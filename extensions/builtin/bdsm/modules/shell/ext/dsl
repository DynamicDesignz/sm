#!/usr/bin/env bash

ext_help()
{
  modules ext/help

  description "BDSM extension ext management"

  action "ext" "List installed ext."
  action "ext known" "List extension ext that can be installed."
  action_separator
  action "ext install all" "Install all extension ext found on the known list."
  action "ext install {name}" "Install extension {name} found on the known list."
  action "ext install {name} {uri}" "Install extension {name} from the given {uri}."
  action "ext add" "Shortcut for install."
  action_separator
  action "ext update all" "Update all extension ext using remembered uris."
  action "ext update {name}" "Update extension {name} using remembered uri."
  action "ext up" "Shortcut for update."
  action_separator
  action "ext uninstall {name}" "Remove extension {name}."
  action "ext del" "Shortcut for uninstall."
  action_separator
  action "ext help" "Show this help."

  show_help usage
}

ext_list()
{
  local extensions COLUMNS=80
  extensions_in "${bdsm_path}/extensions/ext"
  extensions=( ${found_extensions[@]} )

  if array_is_nonempty extensions
  then
    log "ext: "
    echo ${extensions[@]} | xargs -s ${COLUMNS} | xargs -I '{}' echo "  - {}"
  else
    log "# No single extensions (ext) are currently installed."
  fi
}

ext_list_known()
{
  local COLUMNS=80

  awk -F = '/^[^#]/ {printf "# %18s | %s\n", $1, $2 }' <<<"Extension name=Repository"
  awk -F = '/^[^#]/ {printf "%20s   %s\n", $1, $2 }' < "${bdsm_path}/extensions/builtin/bdsm/config/known_ext"
}

ext_install()
{
  local _name="${1:-}" _uri="${2:-}"

  shift || fail "Cannot install extension ext without name."
  [[ -n "${_uri}" ]] ||
    _uri=$( awk -F = "/^${_name}=/ {print \$2 }" < "${bdsm_path}/extensions/builtin/bdsm/config/known_ext" )

  [[ -n "${_uri}" ]] ||
    error "Cannot find ${_name} in known extension ext list."

  local _identifier="$(scm_identifier "${_uri}")"

  log_step "bdsm_${_name}" # TODO: if fail, log_step failure
  enter "${bdsm_path}/extensions/ext"
  fetch_uri "${_uri}" "${src_path}/${_identifier}"
  remove_paths "${_name}"
  copy_directory "${src_path}/${_identifier}" to "${_name}"
  log_step success
}

ext_install_all()
{
  local _set _name _uri COLUMNS=80
  for _set in $( awk '/^[^#]/' < "${bdsm_path}/extensions/builtin/bdsm/config/known_ext" )
  do
    _name="${_set%%=*}"
    _uri="${_set##*=}"
    ext_install "${_name}" "${_uri}"
  done
}

ext_update()
{
  local _name _uri
  if [[ -z "$1" ]]
  then
    error "Cannot update extension ext without name."
  fi
  for _name in "$@"
  do
    case "${_name}" in
      external|builtin)
        error "Extension ${_name} cannot be updated."
        ;;
    esac
    if [[ ! -d "${bdsm_path}/extensions/ext/${_name}" ]]
    then
      error "Extension ${_name} does not exist."
    fi
    if [[ ! -s "${bdsm_path}/extensions/ext/${_name}/.uri" ]]
    then
      log "Extension ${_name} does not contain stored uri.\n"
      continue
    fi
    _uri=$( cat "${bdsm_path}/extensions/ext/${_name}/.uri" )
    if [[ -z "${_uri}" ]]
    then
      log "Extension ${_name} does not contain stored uri."
    else
      ext_install "${_name}" "${_uri}"
    fi
  done
}

ext_update_all()
{
  local _name
  for _name in ${extensions_search_paths[@]}
  do
    case "${_name##*/}" in
      external|builtin)
        # Skip those two
        ;;
      *)
        ext_update "${_name##*/}"
        ;;
    esac
  done
}

ext_uninstall()
{
  local _name="$1"
  case "${_name}" in
    */*|.|..)
      error "Please specify a valid extension name."
      ;;
    external|builtin)
      error "Extension ${_name} cannot be removed."
      ;;
  esac
  enter "${bdsm_path}/extensions/ext"
  if [[ ! -d "${_name}" ]]
  then
    error "Please specify a valid extension name."
  fi

  #TODO: are you sure ?

  log "Uninstalling extension: ${_name}."
  rm -rf "${_name}"
}

ext_check_availability()
{
  awk -F = '/^[^#]/ {printf "%20s   %s\n", $1, $2 }' < "${bdsm_path}/extensions/builtin/bdsm/config/known_ext" |
  "${bdsm_path}/bin/bdsm-ll" \
    printf "%s: " {} \; curl -s --head https://github.com/wayneeseguin/bdsm-{} \| awk "'/Status/{print \$2}'"
}

