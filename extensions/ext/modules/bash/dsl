#!/usr/bin/env bash

fetch_version()
{
  version=$(curl -B "${releases_url}/latest-version.txt" 2>/dev/null)
}

fetch_md5()
{
  md5=$(curl -B "${releases_url}/bdsm-${version}.tar.gz.md5" 2>/dev/null)
}

md5_match()
{
  local archive="$1"

  case "$(uname)" in
    Darwin|FreeBSD)
      archive_md5="$(/sbin/md5 -q "${archive}")"
      ;;

    OpenBSD)
      archive_md5="$(/bin/md5 -q "${archive}")"
      ;;

    Linux|*)
      archive_md5="$(md5sum "${archive}" | awk '{print $1}')"
      ;;
  esac

  [[ "$archive_md5" == "$md5" ]]

  return $?
}

fetch_extensions_repository()
{
  (
  if directory_exists "$extensions_src_path/.git" ; then
    log "Updating $extension repository."

    enter "$extensions_src_path"

    git fetch ${remote:-origin} >/dev/null 2>&1

    # TODO: Branch switching logic

    git reset --hard HEAD >/dev/null 2>&1
    git pull --rebase --force ${remote:-origin} "${branch:-master}" >/dev/null 2>&1
  else
    log "Cloning $extension repository from ${extensions_repository_url}"

    enter "${src_path}"

    # TODO: git/hg/svn url detection, only git to start for now

    git clone --depth 1 "${extensions_repository_url}" "extensions" >/dev/null 2>&1
  fi
  )
}

fetch_tarball()
{
  curl \
    -L "${releases_url}/${extension}-${extension_version}.tar.bz2" \
    -o "${extensions_src_path}/${extension}-${extension_version}.tar.bz2"

  # TODO: md5 check using fetch_md5() and md5_match()

  tar \
    xf "${extensions_src_path}/${extension_version}.tar.bz2" \
    -C "${extensions_src_path}/extensions"

  enter "${extensions_src_path}/${extension}-${extension_version}"
}

install_extensions()
{
  local _extension
  local _extensions=("$@")

  for _extension in "${_extensions[@]}"
  do
    case "${_extension#\/}" in
      ext|srv|pkg|core|mod) continue ;;
    esac

    [[ -z "${_extension}" ]] && continue

    extension_src_path="${extensions_src_path}/${_extension}"

    if [[ -s "${extension_src_path}/VERSION" && -x "${extension_src_path}/bin/help" ]]
    then
      copy_directories_to "${bdsm_path}/extensions" "${extension_src_path}"
    else
      error "${extension_src_path}/${extension} is not a proper extension.\nIt is missing one or more of the VERSION or bin/help."
    fi
  done
}

#
# Package given extension.
#
package_extension()
{
  local sha1="" version

  extension_path="${extensions_path}/${extension}"

  version="$(cat "$extension_path/VERSION" 2>/dev/null)" ||
    fail "${extension_path}/VERSION file is missing. Halting packaging."

  # TODO: add a sanity check to ensure that VERSION matches x.y.x

  true ${releases_path:="${source_path}/bdsm-extensions/releases"}

  true \
    ${release_name:="${extension}-${version}"} \
    ${release_path:="${releases_path}/${release_name}"} \
    ${remote:=origin} \
    ${branch:=master}

  ensure_paths_exist "$releases_path/" "$release_path/"

  enter "${extension_path}"

  if [[ -d ".git" ]] ; then
    sha1=$(git log -n 1 | head -1 | awk '{print $2}')

    # Tag & push
    git tag "${version}"
    git push "${remote}" "${version}"
    git push "${remote}" "${branch}"
  fi

  release_files=(VERSION README.md)
  for file in "${release_files[@]}" ; do
    if [[ -f "${file}" ]] ; then
      cp -f "${file}" "${release_path}/"
    else
      log "WARNING: Missing extension file: '${file}'"
    fi
  done

  release_directories=(bin config modules templates)
  for directory in "${release_directories[@]}" ; do
    if [[ -d "${directory}" ]] ; then
      cp -Rf "${directory}" "${release_path}/"
    else
      log "WARNING: Missing extension directory: '${directory}'"
    fi
  done

  if [[ -n "${sha1}" ]] ; then
    echo "${sha1:0:7}" > "${release_path}/sha1"
  fi

  enter "$releases_path"

  tar zcvf "$release_name".tar.gz "$release_name/"
  md5 "${release_name}.tar.gz" | awk '{print $NF}' > "${release_name}.tar.gz.md5"

  tar jcvf "$release_name".tar.bz2 "$release_name/"
  md5 "${release_name}.tar.bz2" | awk '{print $NF}' > "${release_name}.tar.bz2.md5"

  remove_paths "${release_name}/"

  log "Packaging of extension ${release_name} complete."
}

get_help()
{
  cat -v "$help_path/get"
}

#
# TODO: There is a lot of redundency in the get_{X}(), reduce it.
#

get_latest()
{
  local version_url stable_version archive

  version_url="${releases_url}/version.txt"

  stable_version=$(curl -s $version_url)

  ensure_paths_exist "$src_path/"

  # NOTE: This is the content as in binmodules/bdsm-update-latest

  version=$(curl -B $version_url 2>/dev/null)

  get_version $stable_version
}

get_version()
{
  version="$1"

  md5=$(curl -B http://bdsm.beginrescueend.com/releases/bdsm-${version}.tar.gz.md5 2>/dev/null)

  echo "bdsm-${version}"

  archive="$archives_path/bdsm-${version}.tar.gz"

  curl -L "http://bdsm.beginrescueend.com/releases/bdsm-${version}.tar.gz" \
    -o "$archive"
  case "$(uname)" in
    Darwin|FreeBSD)
      archive_md5="$(/sbin/md5 -q "${archive}")"
      ;;
    OpenBSD)
      archive_md5="$(/bin/md5 -q "${archive}")"
      ;;
    Linux|*)
      archive_md5="$(md5sum "${archive}" | awk '{print $1}')"
      ;;
  esac

  if [[ "$archive_md5" != "$md5" ]]; then
    error "Archive package bdsm-${version}.tar.gz downloaded does not match it's md5 checksum ${md5}.
    Aborting BDSM Installation."
  fi

  tar zxf "${path}/archives/bdsm-${version}.tar.gz" -C "$extensions_src_path/"

  (
    cd "$src_path/bdsm-${version}"

    chmod +x ./install

    ./install
  )

  log "Installed BDSM version:"
  ( source $modules_path/bdsm ; bdsm --version )

  hook="after_update"

  source "$modules_path/hook"
}

get_branch()
{
  (
    if [[ -d "${extensions_src_path}/bdsm/.git" ]] ; then
      enter "${extensions_src_path}/bdsm/"
      git fetch ${remote}
      git pull --rebase --force ${remote} ${branch}
    else
      (
      git clone --depth 1 ${extensions_repository_url} || \
        git clone ${extensions_repository_url/git:\/\//https://}
      )

      enter "bdsm"
    fi
    chmod +x ./install
    ./install
  )
}

