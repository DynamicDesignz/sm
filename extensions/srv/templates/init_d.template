#!/usr/bin/env bash

log()   { printf "$*\n" ; return $? ;  }
error() { log "ERROR: $*" ; exit 1 ; }

initialize()
{
  if (( $UID == 0 ))
  then
    if [[ -s /etc/conf.d/{{service}} ]]
    then
      # TODO: use source_files?
      source /etc/conf.d/{{service}}
    fi
  else
    {{service}}_user="$USER"
  fi

  :\
    ${{{service}}_user:="{{service}}"} \
    ${{{service}}_port:="6379"} \
    ${{{service}}_bin_path:="/usr/local/{{service}}/active/bin"} \
    ${{{service}}_binary:="${{{service}}_bin_path}/{{service}}-server"} \
    ${{{service}}_pid_file:="/var/run/{{service}}/{{service}}.pid"} \
    ${{{service}}_config_file:="/etc/{{service}}/{{service}}.conf"}

  if [[ -s "${{service}}_pid_file" ]] ; then
    pid=$(cat "${{service}}_pid_file")
  else
    rm -f "${{service}}_pid_file"
  fi

  return 0
}

{{service}}_help()
{
  printf "

Usage:

  $0 <options> <action>

Options:

  --conf  - Path to {{service}}.conf file
  --pid   - Path to {{service}} pid file
  --bin   - Path to {{service}}-server binary
  --user  - Username to invoke {{service}} as
  --trace - Use to debugging this control script

Description:

  start    - Start {{service}}
  stop     - Stop {{service}}
  restart  - Restart {{service}}
  status   - Show if {{service}} is running and on what port if so.
  help     - Display this usage information

"
  return 0
}

{{service}}_start()
{
  [[ -s "${{service}}_pid_file" ]] &&
    error "${{service}}_pid_file exists, {{service}} is either already running or crashed.\n"

  log "#starting {{service}} as ${{service}}_user using ${{service}}_config_file..."

  if [[ "${{service}}_user" != "$USER" ]] ; then
    su "${{service}}_user" -c "\"${{service}}_binary\" \"${{service}}_config_file\""
  else
    "${{service}}_binary" "${{service}}_config_file"
  fi

  return $?
}

{{service}}_stop()
{
  [[ -s "${{service}}_pid_file" ]] || \
    error "${{service}}_pid_file does not exist, {{service}} is not running"

  log "#stopping {{service}} as ${{service}}_user using ${{service}}_config_file..."

  kill -QUIT ${pid}

  while [[ -x /proc/${pid} ]] ; do
    log "Waiting for the {{service}} server to shutdown ..."
    sleep 1
  done

  rm -f ${{service}}_pid_file
  log "{{service}} server stopped."
}

{{service}}_restart()
{
  log "#restarting {{service}} server..."
  if [[ -s "${{service}}_pid_file" ]] ; then
    {{service}}_stop
  else
    log "{{service}} is not running, proceeding."
  fi
  {{service}}_start

  return $?
}

initialize

while [[ $# -gt 0 ]] ; do
  token="$1" ; shift
  case "$token" in
    --trace) set -o xtrace ;;
    --conf)  {{service}}_config_file="$1" ; shift ;;
    --pid)   {{service}}_pid_file="$1"    ; shift ;;
    --bin)   {{service}}_bin_path="$1"    ; shift ;;
    start)   {{service}}_start                    ;;
    stop)    {{service}}_stop                     ;;
    restart) {{service}}_restart                  ;;
    help)    {{service}}_help                     ;;
    *)       {{service}}_help            ; exit 1 ;;
  esac
done

exit $?
