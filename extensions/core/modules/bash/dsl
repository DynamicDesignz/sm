#!/usr/bin/env bash

bdsm_version()
{
  if file_is_nonempty "$bdsm_path/VERSION" ; then
    read -r bdsm_version < "$bdsm_path/VERSION"
  else
    bdsm_version="?.?.?"
  fi
}

usage()
{
  bdsm_version

  log "\nbdsm ${bdsm_version} https://bdsm.beginrescueend.com/ by Wayne E. Seguin (wayneeseguin@gmail.com)\n"

  extension_action "core" "help"
}

fetch_version()
{
  version=$(curl -s "${releases_url}/latest-version.txt" 2>/dev/null) ||
    fail "Unable to fetch version from "
}

fetch_md5()
{
  md5=$(curl -s "${releases_url}/bdsm-${version}.tar.gz.md5" 2>/dev/null)
}

md5_match()
{ # TODO: switch this to using system module's os_* DSL
  local archive="$1"

  case "$(uname)" in
    Darwin|FreeBSD)
      archive_md5="$(/sbin/md5 -q "${archive}")"
      ;;

    OpenBSD)
      archive_md5="$(/bin/md5 -q "${archive}")"
      ;;

    Linux|*)
      archive_md5="$(md5sum "${archive}" | awk '{print $1}')"
      ;;
  esac

  [[ "$archive_md5" == "$md5" ]]

  return $?
}


fetch()
{ # TODO: Extract fetch dsl into it's own DSL module
  # TODO: allow either curl or wget, defaulting to curl...
  command_exists curl ||
    fail "bdsm requires curl, which was not found in the PATH :(\nPlease install curl and try again."

  fetch_command="$fetch_command -O -L --create-dirs -C - " # -s for silent
  (
  enter "$archives_path"

  [[ -n "${1:-}" ]] || fail "BUG: $0 called without an argument :/"

  archive=$(basename "$1")
  download=1

  debug "Fetching $archive"

  # Check first if we have the correct archive
  if file_exists "$archive" && file_exists "$archive.md5" ; then
    debug "Found archive and its md5, testing correctness"

    if (( $(md5sum --status -c "$archive.md5") > 0 )) ; then
      debug "Archive is bad, downloading"
      download=1
    else
      debug "Archive is good, not downloading"
      download=0
      result=0
    fi
  else
    debug "No '${archive}' does not exist or does not match md5, downloading"
    download=1
  fi

  if (( download > 0 )) ; then

    if ! eval $fetch_command "$1" ; then
      retry=0
      if (( result == 78 )) ; then
        error "The requested url does not exist: '$1'"
      elif (( result == 18 )) ; then
        error "Only a part of the file was transferred. Removing and re-trying."
        rm -f "$archive"
        retry=1
      elif (( result == 33 )) ; then
        debug "Remote server does not support 'range' command, removing '$archive'"
        rm -f "$archive"
        retry=1
      else
        error "There was an error, please check $log_path/*.error.log"
      fi

      (( retry == 1 )) && eval $fetch_command "$1" ||
        error "There was an error, please check $log_path/*.error.log"
    fi
  fi
  )

  return $0
}

install_release()
{
  archive="$archives_path/bdsm-${version}.tar.gz"

  fetch_md5

  if file_exists "${archive}" && ! md5_match ; then
    # Remove old installs, if they exist and have incorrect md5.
    file_exists "$archives_path/bdsm-${version}.tar.gz" &&
      rm -f "$archives_path/bdsm-${version}.tar.gz"
  fi

  curl -L "${releases_url}/bdsm-${version}.tar.gz" -o "$archive"

  md5_match "$archive" || fail "
Archive package downloaded does not match it's calculated md5 checksum ${md5}:

  $archives_path/bdsm-${version}.tar.gz

Retry the installation and/or check your networking setup.

Halting the installation.
"

  tar zxf "${archives_path}/bdsm-${version}.tar.gz" -C "$src_path/"

  enter "$src_path/bdsm-${version}"

  ensure_files_are_executable "install"

  ./install
}

install_head()
{
  local remote="origin"

  if directory_exists "${src_path}/bdsm/.git" ]] ; then

    enter "${src_path}/bdsm/"

    if [[ -z "$(git branch | awk "/$branch$/")" ]] ; then
      git checkout -b "$branch" --track "$remote/$branch" 2>/dev/null ||
        fail "$remote $branch remote branch not found."

    elif [[ -z "$(git branch | awk "/\* $branch$/{print \$2}")" ]] ; then

      git checkout $branch 2>/dev/null ||
        fail "Unable to checkout $branch.\nCould not get head. Sucks to be you... or rather... doesn't suck :-p"
    fi

    git pull --rebase origin $branch

  else
    enter "${src_path}"

    if ! git clone --depth 1 git://github.com/wayneeseguin/bdsm.git ; then
      git clone https://github.com/wayneeseguin/bdsm.git ||
        fail "Unable to clone the BDSM repository, attempted both git:// and https://\nCould not get head, terribly sorry about the blue balls :("
    fi
  fi

  log "Ahh... that's better...\nIt always feels so nice to get head.\nQuite a load this time eh?\nRemember to get head often!\n"

  enter "${src_path}/bdsm/"

  ensure_files_are_executable "install"

  ./install
}

