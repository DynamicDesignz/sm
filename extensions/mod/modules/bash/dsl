#!/usr/bin/env bash

# Print out a list of all installed modules.
modules_installed()
{
  local _module
  local _module_type="${1:-"bash"}"
  local _modules=($(find "${modules_path}/${_module_type}" -mindepth 1 -maxdepth 1 -type d | sed -e 's#.*/##g' -e '/\..*/d'))

  for _module in ${_modules[@]} ; do
    printf "%s\n" "${_module}"
  done
}

# Print out a list of all dsl for the given module.
module_dsl()
{
  local _function _dsl _module="${1:-}"
  # [[ -n "${_module}" ]] || fail "... module not given"
  local _path="${modules_path}/bash/${_module}"
  _dsl=($(find "${_path}" -mindepth 1 -maxdepth 1 -name dsl -type f -print0 | xargs -0 grep '^[a-z_]*()$'))

  for _function in "${_dsl[@]}" ; do
    _function="${_function##*modules\/bash\/}"
    printf "%s\n" "${_function//*:}"
  done
}

modules_list()
{
  local _module _modules _function _dsl

  for language in bash ruby
  do
    _modules=($(modules_installed ${language}))
    for _module in "${_modules[@]}" ; do
      printf "\n${_module}\n\n"
      _dsl=($(module_dsl "$_module"))
      for _function in "${_dsl[@]}" ; do
        printf "  ${_function}\n"
      done
    done
  done
}

module_docs()
{
  local _function _dsl _module="${1:-}"
  # [[ -n "${_module}" ]] || fail "... module not given"
  local _path="${modules_path}/bash/${_module}"
  #_dsl=($(find "${_path}" -mindepth 1 -maxdepth 1 -name dsl -type f -print0 | xargs -0 grep '^[a-z_]*()$'))

  awk '/^#/{print }' "${_path}/dsl" | sed -e "1d" -e "s/^# //g" -e "s/^#\s*//"
}

modules_docgen()
{
  local _module _modules _function _dsl
  local _prefix="/tmp/docs/modules/"

  _modules=($(modules_installed))
  for _module in "${_modules[@]}" ; do
    ensure_paths_exist "${_prefix}/${_module}"

    _base="${_prefix}/${_module}/${_module}"

    module_docs "${_module}" > "${_base}.md"

    if command_exists redcarpet
    then
      redcarpet "${_base}.md" > "${_base}.html"
    fi

    if command_exists html2haml
    then
      html2haml "${_base}.html" > "${_base}.haml"
    fi
  done

  # perl Markdown.pl --html4tags foo.text
  printf "%s\n" "Modules documentation has been generated in ${_prefix}"
}

