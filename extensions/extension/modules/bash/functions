#!/usr/bin/env bash

fetch_version()
{
  version=$(curl -B "${releases_url}/latest-version.txt" 2>/dev/null)
}

fetch_md5()
{
  md5=$(curl -B "${releases_url}/bdsm-${version}.tar.gz.md5" 2>/dev/null)
}

md5_match()
{
  local archive="$1"

  case "$(uname)" in
    Darwin|FreeBSD)
      archive_md5="$(/sbin/md5 -q "${archive}")"
      ;;

    OpenBSD)
      archive_md5="$(/bin/md5 -q "${archive}")"
      ;;

    Linux|*)
      archive_md5="$(md5sum "${archive}" | awk '{print $1}')"
      ;;
  esac

  [[ "$archive_md5" == "$md5" ]]

  return $?
}

fetch_extensions_repository()
{
  (
  if [[ -d "$extensions_src_path/.git" ]] ; then
    log "Updating $extension repository."
    enter "$extensions_src_path"
    git fetch ${remote:-origin} >/dev/null 2>&1

    # TODO: Branch switching logic

    git reset --hard HEAD >/dev/null 2>&1
    git pull --rebase --force ${remote:-origin} "${branch:-master}" >/dev/null 2>&1
  else
    log "Cloning $extension repository from ${extensions_repository_url}"

    enter "${src_path}"

    # TODO: git/hg/svn url detection, only git to start for now

    git clone --depth 1 "${extensions_repository_url}" "extensions" >/dev/null 2>&1
  fi
  )
  enter "${extensions_src_path}/${extension}"
}

fetch_tarball()
{
  curl \
    -L "${releases_url}/${extension}-${extension_version}.tar.bz2" \
    -o "${extensions_src_path}/${extension}-${extension_version}.tar.bz2"

  # TODO: md5 check using fetch_md5() and md5_match()

  tar \
    xf "${extensions_src_path}/${extension_version}.tar.bz2" \
    -C "${extensions_src_path}/extensions"

  enter "${extensions_src_path}/${extension}-${extension_version}"
}

install_extensions()
{
  local _extension

  for _extension in "$@" ; do
    extension_src_path="${extensions_src_path}/${_extension}" \

    if [[ -s "${extension_src_path}/VERSION" && -x "${extension_src_path}/bin/help" ]] ; then
      cp -Rf \
        "${extension_src_path}" \
        "$bdsm_path/extensions/"
    else
      error "${extension_src_path}/${extension} is not a proper extension."
    fi
  done
}

