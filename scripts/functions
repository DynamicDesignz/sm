#!/usr/bin/env bash

actions_for_extension() {
  if [[ -n "${1:-}" ]] ; then
    echo "bdsm $1: {$(ls -p $extensions_path/$1/ | awk '/[^\/]$/' | tr "\n" ' ' | sed 's/\s\+/, /g' | sed 's/,\s*$//')}"
  fi
}

version()
{
  printf "\n%s\n\n" \
    "bdsm ${VERSION:-"?.?.?"} http://bdsm.beginrescueend.com/ by Wayne E. Seguin (wayneeseguin@gmail.com)"
}

usage()
{
  version

  "${extensions_path}/bdsm/bin/help" usage | ${PAGER}
}

db()
{
  if [[ -f "$1" ]] ; then
    database_file="$1" ; shift
    if [[ ! -f "$database_file" ]] ; then
      mkdir -p $(dirname $database_file)
      touch $database_file
    fi
  else
    echo "usage: $0 database key [value]"
    exit 1
  fi

  key="$1" ; shift
  if [[ -z "$key" ]] ; then
    echo "usage: $0 database key [value]"
    exit 1
  else
    value="$*"
    if [[ "unset" = "$value" ]] || [[ "delete" = "$value" ]] ; then
      sed -i.tmp "s#^$key=.*\$##" $database_file
    else
      if [[ -z "$value" ]] ; then # get
        awk -F= '/^'"$key"'=/{print $2}' $database_file
      else # set
        if [[ -z "$(awk -F= "/^'"$key"'=/{print $2}" $database_file)" ]] ; then # append
          echo "$key=$value" >> $database_file
        else # overwrite
          sed -i.tmp "s#^$key=.*\$#$key=$value#" $database_file
        fi
      fi
    fi
  fi
}

fetch()
{
  fetch_command=$(which curl)
  if [[ $? -ne 0 ]] ; then
    $scripts_path/log "fail" \
      "rvm requires curl, which does not seem to exist in your path :("
    exit 1
  else
    fetch_command="$fetch_command -O -L --create-dirs -C - " # -s for silent
  fi

  pushd "$archives_path" > /dev/null 2>&1

  if [[ -z "$1" ]] ; then
    $scripts_path/log "fail" "BUG: $0 called without an argument :/"
    exit 1
  fi

  archive=$(basename "$1") ; downlaod=1

  (( $debug_flag )) && $scripts_path/log "debug" "Fetching $archive"

  # Check first if we have the correct archive
  if [[ -e "$archive" ]] && [[ -e "$archive.md5" ]] ; then

    if (( $debug_flag )) ; then
      $scripts_path/log "debug" "Found archive and its md5, testing correctness"
    fi

    if [[ $(md5sum --status -c "$archive.md5") -gt 0 ]] ; then

      if (( $debug_flag )) ; then
        $scripts_path/log "debug" "Archive is bad, downloading"
      fi
      download=1

    else

      if (( $debug_flag )) ; then
        $scripts_path/log "debug" "Archive is good, not downloading"
      fi
      download=0
      result=0

    fi

  else

    if (( $debug_flag )) ; then
      $scripts_path/log "debug" "No archive or no MD5, downloading"
    fi
    download=1

  fi

  if [[ $download -gt 0 ]] ; then
    eval $fetch_command "$1"
    result=$?
    if [[ $result -gt 0 ]] ; then
      retry=0
      if [[ $result -eq 78 ]] ; then
        $scripts_path/log "error" "The requested url does not exist: '$1'"
      elif [[ $result -eq 18 ]] ; then
        $scripts_path/log "error" \
          "Only a part of the file was transferred. Removing and re-trying."
        rm -f "$archive"
        retry=1
      elif [[ $result -eq 33 ]] ; then
        if (( $debug_flag )) ; then
          $scripts_path/log "debug" \
            "Server does not support 'range' command, removing '$archive'"
        fi
        rm -f "$archive"
        retry=1
      else
        $scripts_path/log "error" \
          "There was an error, please check $log_path/*.error.log"
      fi

      if [[ $retry -eq 1 ]] ; then
        eval $fetch_command "$1"
        result=$?
        if [[ $result -gt 0 ]] ; then
          $scripts_path/log "error" \
            "There was an error, please check $log_path/*.error.log"
        fi
      fi

    fi
    popd > /dev/null 2>&1
  fi

  return $result
}

