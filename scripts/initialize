#!/usr/bin/env bash

[[ -s "/etc/bdsmrc" ]]  && . "/etc/bdsmrc"
[[ -s "$HOME/.bdsmrc" ]] && . "$HOME/.bdsmrc"

true "${prefix:=/usr/local}" "${bindir:=/usr/local/bin}"

if [[ "$prefix" = "$HOME" ]] ; then
  true "${bdsm_path:="${prefix}bdsm"}"
else
  true "${bdsm_path:="${prefix}/bdsm"}"
fi

true \
  "${scripts_path:="${bdsm_path}/scripts"}" \
  "${extensions_path:="${bdsm_path}/extensions"}" \
  "${templates_path:="${bdsm_path}/templates"}" \
  "${config_path:="${bdsm_path}/config"}" \
  "${src_path:="${bdsm_path}/src"}" \
  "${tmp_path:="${bdsm_path}/tmp"}" \
  "${bin_path:="${bdsm_path}/bin"}" \
  "${archives_path:="${bdsm_path}/archives"}" \
  "${remote:="origin"}" \
  "${branch:="master"}" \
  "${language:="bash"}" \
  "${user:=$USER}" \
  "${keep_releases:=4}" \
  "${hooks_flag:=1}" \
  "${PAGER:=cat -v}"

true \
  "${project_path:="$HOME"}" \
  "${shared_path:=$project_path/shared}" \
  "${previous_path:=$project_path/previous}" \
  "${current_path:=$project_path/current}" \
  "${stage_path:=$project_path/stage}" \ # This should be set in the deploy ext.
  "${discarded_path:=$project_path/discard}" \

export project_path shared previous_path current_path stage_path discarded_path

# TODO: Move this code to a 'project' initializer:
if [[ $UID -gt 0 ]] ; then

  if [[ -z "$project" ]] ; then
    # TODO: Improve this vv
    if [[ -d "$HOME/shared/$user" ]] ; then
      export project="$user"
    fi
  fi

  if [[ -d "$project_path/previous" ]] ; then
    old_releases="$(
    find "$project_path/previous/" -mindepth 1 -maxdepth 1 -type d |
    sort -r | awk "NR > ${keep_releases:-3} { print \$0 }"
    )"
  fi

  if [[ -n "$project" ]] ; then

    database_name="${database_name:-"${project}_${environment}"}"

    if [[ -z "$vcs" ]] ; then
      if [[ -d "$shared_path/$project/.git" ]] ; then
        vcs="git"
      elif [[ -d "$shared_path/$project/.svn" ]] ; then
        vcs="svn"
      elif [[ -d "$shared_path/$project/.hg" ]] ; then
        vcs="hg"
        # TODO:
        # elif [[ ... ]] ; then
        # vcs="fossil"
      else
        vcs="git" # default
      fi
    fi

    source_files ".${project}rc"
  fi
fi

true \
  "${releases_url:=$(db "$config_path/bdsm" "releases_url")}" \
  "${extension_url:=$(db "$config_path/bdsm" "extension_url")}"

result=0

# In case bdsm is being called from within a hook for example, we unset these:
unset extension action

if [[ ${trace_flag:-0} -eq 1 ]] ; then
  export trace_flag
  set -o xtrace
elif [[ ${debug_flag:-0} -eq 1 ]] ; then
  export debug_flag
  set -o verbose
fi


export vcs project database_name old_releases bdsm_path current_path discarded_path previous_path project_path shared_path archives_path bin_path bindir branch config_path extensions_path framework hooks_flag keep_releases prefix remote result scripts_path src_path tmp_path templates_path timestamp user

timestamp="$(date +%m.%d.%Y-%H:%M:%S)"

trap "[[ -e ${tmp_path}/$$ ]] && rm -rf '${tmp_path}/$$' >/dev/null 2>&1" 0 1 2 3 15

