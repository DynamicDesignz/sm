#!/usr/bin/env bash

if [[ "$trace_flag" -eq 1 ]] ; then set -x ; fi

hook() {
  if [[ -f "$shared_path/$project/.$1" ]] ; then
    source "$shared_path/$project/.$1"
  fi
}

update() {
  update_repository && update_current
  return $?
}

update_repository() {
  $scripts_path/log "info" "Updating local repository in $shared_path/$project."
  builtin cd "$shared_path/$project" > /dev/null 2>&1

  if [[ "git" = "$vcs" ]] ; then
    current_branch=$(git branch | awk '/\* /{print $2}')
    # TODO: Improve error handling
    if [ "$current_branch" != "$branch" ] ; then
      $scripts_path/log "info" "Switching to branch $branch from $current_branch"
      git checkout -b $branch --track $remote/$branch
    fi
    git pull $remote $branch

    if [ -f .gitmodules ] ; then
      $scripts_path/log "info" "Updating submodules."
      git submodule init 2>/dev/null
      git submodule update
    fi
  elif [[ "hg" = "$vcs" ]] ; then
    hg pull
    hg update $branch
  fi
}

update_current() {
  if [ -d $current_path ] ; then
    $scripts_path/log "info" "Moving aside previous release."
    mkdir -p $project_path/previous
    mv $current_path $project_path/previous/$timestamp
  fi
  $scripts_path/log "info" "Installing new release to $current_path"
  rsync -ag --exclude=".${vcs}/*" $shared_path/$project/ $current_path;
}

configure() {
  builtin cd $shared_path/config
  $scripts_path/log "info" "Setting up persistent yaml files:"
  for yaml_file in *.yml; do
    $scripts_path/log "info" " - $yaml_file"
    rm -f $current_path/config/$yaml_file
    ln -nfs $shared_path/config/$yaml_file $current_path/config/$yaml_file
  done

  $scripts_path/log "info" "Setting up persistent config files:"
  for config_file in $(ls $shared_path/config/*.conf 2>/dev/null); do
    file_name=$(basename $config_file)
    $scripts_path/log "info" " - $file_name"
    rm -f $current_path/config/$file_name
    ln -nfs $shared_path/config/$file_name $current_path/config/$file_name
  done

  $scripts_path/log "info" "Setting up persistent ruby config files:"
  for config_file in $(ls $shared_path/config/*.rb 2>/dev/null); do
    file_name=$(basename $config_file)
    $scripts_path/log "info" " - $file_name"
    rm -f $current_path/config/$file_name
    ln -nfs $shared_path/config/$file_name $current_path/config/$file_name
  done
}

symlink() {
  $scripts_path/log "info" "Setting up persistent directories"
  for dir in tmp log public/assets pids files ; do
    if [[ -d $shared_path/$dir ]] ; then
      $scripts_path/log "info" " - $dir"
      rm -rf $current_path/$dir
      ln -nfs $shared_path/$dir $current_path/$dir
    else
      $scripts_path/log "info" "<i> $shared_path/$dir does not exist, skipping."
    fi
  done
}

cleanup() {
  mkdir -p $project_path/previous
  if [[ ! -z "$old_releases" ]] ; then
    $scripts_path/log "info" "Removing old releases..."
    builtin cd $project_path/previous
    for release in $(echo $old_releases) ; do
      if [[ -d "$release" ]] ; then
        $scripts_path/log "info" " - $release"
        rm -rf $release
      else
        $scripts_path/log "info" "info" "Skipping ~/previous/$release as the directory does not exist."
      fi
    done
    cd
  fi
}

$scripts_path/log "info" "info" "Deploying..."
(
  update_repository &&
  hook "before_deploy" &&
  update_current &&
  hook "after_update_current" &&
  configure &&
  hook "after_configure" &&
  symlink &&
  hook "after_symlink" &&
  cleanup &&
  hook "after_deploy"
)
result=$?

$scripts_path/log "info" "info" "Deploy started at $timestamp and completed at $(date +%m.%d.%Y-%H:%M:%S)"

exit $result
