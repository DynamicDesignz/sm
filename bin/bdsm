#!/usr/bin/env bash

# Author: Wayne E. Seguin
# All Rights Reserved

VERSION=0.0.2

function version {
  _author="Wayne E. Seguin"
  _author_email="wayneeseguin@gmail.com"
  _website="http://bdsm.beginrescueend.com/"
  _version="$VERSION"
  echo -e "bdsm ${_version} ${_website} by ${_author} (${_author_email})"
}

function usage {

  version

  echo -e "

CLI

  bdsm <service> <action>

  Examples:
    bdsm deploy

    bdsm nginx install
    bdsm nginx setup  ((--force))
    bdsm nginx stop
    bdsm nginx start
    bdsm nginx restart
    bdsm nginx reload

    bdsm (rails) migrate
    bdsm (rails) setup
    bdsm (rails) logtail
    bdsm (rails) console
    bdsm (rails) dbconsole

Notes:

  [project] is required
   - if non root, otherwise defaults to the current user name if not set

  [project|environment|repository]
   - may be exported as environment varaibles
   - or set in the ~/.bdsmrc
   - or specified as for example --project X

  prerequisites:
   - git
   - curl
   - ruby OR prereqs for rvm (preferred)

  http://bdsm.beginrescueend.com/
  https://www.pivotaltracker.com/projects/26822

" | ${PAGER:-less}
}

#
# Setup
#
prefix="${prefix:-/usr/local}"
if [[ -f "$HOME/.bdsmrc" ]]     ; then source "$HOME/.bdsmrc" ; fi
source $prefix/bdsm/scripts/initialize

#
# parse args
#
while [ $# -gt 0 ] ; do
  token="$1" ; shift
  case "$token" in

    # TODO: deploy activates framework deploy after doing common deploy tasks (repo update, hooks).
    deploy) action="deploy" ;;

    migrate|logtail|console|dbconsole|setup)
      service="rails"
      action=$token
    ;;

    start|stop|graceful|reload|install|uninstall|pause|unpause|kill|increase|decrease|logs|restart)
      eval "export ${token/--/}_flag=1"
    ;;

    --project)         export project="$1" ;;
    --environment)     export environment="$1" ;;
    --repo|repository) export repository="$1" ;;
    --trace)           export trace_flag=1 ; export debug_flag=1 ; set -x ;;
    --debug)           export debug_flag=1                                ;;
    --version)         action="version"                                   ;;

    *)
      if [[ -z "$action" ]] ; then
        services=$(cd $scripts_path/services; ls *)
        if $scripts_path/match "$token" $services ; then
          service="$token"
          action="${action:-$token}"
        else
          action="error"
          error_message="An action must be specified."
        fi
      else
        if [[ -d "/data/$token" ]] ; then
          project="$token"
          project_path="/data/$token"
        elif [[ -d "/home/$token" ]] ; then
          project="$token"
          project_path="/home/$token"
        else
          # determine sanity of project
          action="error"
          error_message="Unrecognized command line argument(s): '$token $@'"
        fi
      fi
    ;;
  esac

  if [ ! -z "$parse_break" -o ! -z "$error_message" ] ; then unset parse_break; break; fi
done

if [ ! -z "$error_message" ] ; then exit 1 ; fi

#
# Main Logic
#
if [[ "$trace_flag" = 1 ]] ; then set -x ; else set +x ; fi
result=0

if [[ ! -z "$service" ]] && [[ ! -z "$action" ]] ; then
  if [[ -z "$services_path/$service/$action" ]] ; then
    $services_path/$service/$action "$*"
  fi
elif [[ "$action" = "version" ]] ; then
  version
else
  usage
fi

result=$?

exit $result
