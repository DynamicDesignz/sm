#!/usr/bin/env bash

# Author: Wayne E. Seguin
# All Rights Reserved

VERSION=0.0.2

function version {
  _author="Wayne E. Seguin"
  _author_email="wayneeseguin@gmail.com"
  _website="http://bdsm.beginrescueend.com/"
  _version="$VERSION"
  echo -e "bdsm ${_version} ${_website} by ${_author} (${_author_email})"
}

function usage {

  version

  echo -e "

CLI

  bdsm deploy
  bdsm install [server]
  bdsm setup [server]  ((--force))
  bdsm stop [server]
  bdsm start [server]
  bdsm restart [server]
  bdsm reload [server]
  bdsm migrate
  bdsm tail   # Tail all logs in shared/log/*.log
  bdsm console
  bdsm dbconsole

Notes:

  [project] is required
   - if non root, otherwise defaults to the current user name if not set

  [project|environment|repository]
   - may be exported as environment varaibles
   - or set in the ~/.bdsmrc
   - or specified as for example --project X

  prerequisites:
   - git
   - curl
   - ruby OR prereqs for rvm (preferred)

  http://bdsm.beginrescueend.com/
  https://www.pivotaltracker.com/projects/26822

" | ${PAGER:-less}
}

# Setup
prefix="${prefix:-/usr/local}"
if [[ -f "$HOME/.bdsmrc" ]]     ; then source "$HOME/.bdsmrc" ; fi
source $prefix/bdsm/scripts/initialize

# parse args
while [ $# -gt 0 ] ; do
  token="$1" ; shift
  case "$token" in

    migrate|logtail|console|dbconsole|deploy)
      action=$token
    ;;

    nginx|apache|thinking_sphinx|solr|unicorn|mongrel|thin|passenger|setup)
      server="$token"
      action="${action:-$token}"
    ;;

    start|stop|graceful|reload|install|uninstall|pause|unpause|kill|increase|decrease|logs|restart)
      eval "export ${token/--/}_flag=1"
    ;;

    --project)         export project="$1" ;;
    --environment)     export environment="$1" ;;
    --repo|repository) export repository="$1" ;;
    --trace)           export trace_flag=1 ; export debug_flag=1 ; set -x ;;
    --debug)           export debug_flag=1                                ;;
    --version)         action="version"                                   ;;

    *)
      if [[ -z "$action" ]] ; then
        action="error"
        error_message="An action must be specified."
      else
        if [[ -d "/data/$token" ]] ; then
          project="$token"
          project_path="/data/$token"
        elif [[ -d "/home/$token" ]] ; then
          project="$token"
          project_path="/home/$token"
        else
          # determine sanity of project
          action="error"
          error_message="Unrecognized command line argument(s): '$token $@'"
        fi
      fi
    ;;
  esac
  if [ ! -z "$parse_break" -o ! -z "$error_message" ] ; then unset parse_break; break; fi
done

if [ ! -z "$error_message" ] ; then exit 1 ; fi

#
# Main Logic
#
if [[ "$trace_flag" = 1 ]] ; then set -x ; else set +x ; fi
result=0
case "$action" in
  setup)           $scripts_path/setup           ;;
  console)         $scripts_path/rails console   ;;
  dbconsole)       $scripts_path/rails dbconsole ;;
  logtail)         $scripts_path/logtail         ;;
  version)         version                       ;;
  unicorn)         $scripts_path/unicorn         ;;
  mongrel)         $scripts_path/mongrel         ;;
  thin)            $scripts_path/thin            ;;
  thinking_sphinx) $scripts_path/thinking_sphinx ;;
  deploy)          $scripts_path/deploy          ;;
  *)               usage                         ;;
esac
result=$?

exit $result
