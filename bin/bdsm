#!/usr/bin/env bash

# Author: Wayne E. Seguin
# All Rights Reserved

VERSION=0.0.2

function version {
  _author="Wayne E. Seguin"
  _author_email="wayneeseguin@gmail.com"
  _website="http://bdsm.beginrescueend.com/"
  _version="$VERSION"
  echo -e "bdsm ${_version} ${_website} by ${_author} (${_author_email})"
}

function usage {

  version

  echo -e "

CLI

  bdsm <service> <action> <<arguments>>

  Examples:
    bdsm deploy

    bdsm nginx install
    bdsm nginx setup
    bdsm nginx stop
    bdsm nginx start
    bdsm nginx restart
    bdsm nginx reload

    bdsm (rails) migrate
    bdsm (rails) setup
    bdsm (rails) logtail
    bdsm (rails) console
    bdsm (rails) dbconsole

Notes:

  [service] is required, default may be set in ~/.bdsmrc
  [action] is required as a command line parameter

  [project] is required as an environment variable
   - if non root, otherwise defaults to the current user name if not set

  [project|environment|repository|service]
   - may be exported as environment varaibles
   - or set in the ~/.bdsmrc
   - or specified as for example --project X

  prerequisites:
   - git
   - curl
   - ruby OR prereqs for rvm (preferred)

  http://bdsm.beginrescueend.com/
  https://www.pivotaltracker.com/projects/26822

" | ${PAGER:-less}
}

#
# Setup
#
prefix="${prefix:-/usr/local}"
if [[ -f "$HOME/.bdsmrc" ]]     ; then source "$HOME/.bdsmrc" ; fi
source $prefix/bdsm/scripts/initialize
source $prefix/bdsm/scripts/functions

#
# parse args
#
while [ $# -gt 0 ] ; do
  token="$1" ; shift
  case "$token" in

    # TODO: deploy activates framework deploy after doing common deploy tasks (repo update, hooks).
    deploy) service="bdsm" ; action="deploy" ;;

    migrate|logtail|console|dbconsole|setup)
      service="rails" ; action=$token
    ;;

    --project)         export project="$1" ;;
    --environment)     export environment="$1" ;;
    --repo|repository) export repository="$1" ;;
    --trace)           export trace_flag=1 ; export debug_flag=1 ; set -x ;;
    --debug)           export debug_flag=1                                ;;
    -v|--version)      action="version"                                   ;;

    *)
      #if $scripts_path/match "$token" $services ; then
      if [[ -z "$service" ]] ; then
        if [[ -d "$services_path/$token" ]] ; then
          export service="$token"
        fi
      elif [[ -z "$action" ]] ; then
        if [[ -x "$services_path/$service/$token" ]] ; then
          export action="$token"
          bdsm_args="$@"
          parse_break=1
        fi
      elif [[ -d "/data/$token" ]] ; then
        project="$token"
        project_path="/data/$token"
      elif [[ -d "/home/$token" ]] ; then
        project="$token"
        project_path="/home/$token"
      else
        # determine sanity of project
        action="error"
        error_message="Unrecognized command line argument(s): '$token $@'"
      fi
    ;;
  esac

  if [[ ! -z "$parse_break" ]] || [[ ! -z "$error_message" ]] ; then unset parse_break ; break; fi
done

if [[ ! -z "$error_message" ]] ; then exit 1 ; fi

#
# Main Logic
#
result=0

if [[ "$trace_flag" = 1 ]] ; then set -x ; else set +x ; fi

if [[ "version" = "$action" ]] ; then
  version
elif [[ ! -z "$service" ]] && [[ ! -z "$action" ]] ; then
  if [[ -z "$project" ]] ; then
    echo -e "\$project is unspecified."
    exit 1
  fi

  if [[ -s "$services_path/$service/$action" ]] ; then
    $services_path/$service/$action $*
  fi
elif [[ ! -z "$service" ]] ; then
  echo $(actions_for_service $service)
else
  usage
fi

result=$?

exit $result
