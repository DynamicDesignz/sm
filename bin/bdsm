#!/usr/bin/env bash

# Author: Wayne E. Seguin
# See bdsm LICENSE file for license information.

#
# Setup
#

# Load System Configuration, if it exists.
[[ -s "/etc/bdsmrc" ]] && . /etc/bdsmrc

# Load User Configuration, if it exists.
[[ -s "$HOME/.bdsmrc" ]] && . "$HOME/.bdsmrc"

# The default prefix is /usr/local,
# this should be set to where BDSM is installed to in /etc/bdsmrc
prefix="${prefix:-/usr/local}"
bindir="${bindir:-/usr/local/bin}"

if [[ "$prefix" = "$HOME" ]] ; then
  bdsm_path="${bdsm_path:-"${prefix}bdsm"}"
else
  bdsm_path="${bdsm_path:-"${prefix}/bdsm"}"
fi

export scripts_path="${scripts_path:-"${bdsm_path}/scripts"}"

# Initialize BDSM framework and variables.
. "$scripts_path/initialize"

# Load BDSM framework functions.
. "${scripts_path}/functions"

# Load the BDSM framework version.
[[ -s "$bdsm_path/VERSION" ]] && VERSION="$(cat "$bdsm_path/VERSION")"

version()
{
  printf "\n%s\n\n" \
    "bdsm ${VERSION:-"vX.X.X"} http://bdsm.beginrescueend.com/ by Wayne E. Seguin (wayneeseguin@gmail.com)"
}

usage()
{
  version

  "$extensions_path"/bdsm/bin/help usage | less
}

user="$USER"

# TODO: set log location based on root or user calling

#
# parse args
#
while [[ $# -gt 0 ]] ; do

  token="$1" ; shift

  case "$token" in
    # TODO: extension detection "did you mean"

    # TODO: Fall back on default actions instead of specifying them here
    #       In case the user has set their default serfice in the environment.

    deploy|rollback)
      extension="deploy"
      action="$token"
      parse_break=1
    ;;

    bdsmrc)
      extension="bdsm"
      action=$token
      parse_break=1
    ;;

    help)
      action="help"
      if [[ -n "$1" ]] ; then
        extension="$1"
        parse_break=1
      fi
    ;;

    extend|extension)  extension="extension"           ;;
    --disable-hooks)   hooks_flag=0                    ;;
    --project)         project="$1"            ; shift ;;
    --environment)     environment="$1"        ; shift ;;
    --repo|repository) repository="$1"         ; shift ;;
    --revision)        revision="$1"           ; shift ;;
    --database)        database="$1"           ; shift ;;
    --appserver)       appserver="$1"          ; shift ;;
    --user)            user="$1"               ; shift ;;
    --head)            head_flag=1                     ;;
    --debug)           debug_flag=1                    ;;
    --trace)           trace_flag=1 ; debug_flag=1     ;;
    -v|--version)      action="version"                ;;

    --) args="$@" # Stop processing arguments.
      ;;

    *)
      #if $scripts_path/match "$token" $extensions ; then
      if [[ -z "$extension" ]] ; then

        if [[ -d "$extensions_path/$token" ]] ; then

          extension="$token"

        else

          extension="${extension:-bdsm}"

        fi

      fi

      if [[ -z "$action" ]] ; then

        if [[ -x "$extensions_path/$extension/bin/$token" ]] ; then

          action="$token"

          parse_break=1

        fi

      elif [[ -d "/data/$token" ]] ; then

        project="$token"

        project_path="/data/$token"

      elif [[ -d "/home/$token" ]] ; then

        project="$token"

        project_path="/home/$token"

      else

        # determine sanity of project
        action="error"

        error_message="Unrecognized command line argument(s): '$token $@'"

      fi

    ;;
  esac

  if [[ -n "$parse_break" || ! -z "$error_message" ]] ; then
    unset parse_break ; break
  fi

done

if [[ -n "$error_message" ]] ; then exit 1 ; fi

#
# Main Logic
#
if [[ ${trace_flag:-0} -eq 1 ]] ; then

  export trace_flag
  set -o xtrace

elif [[ ${debug_flag:-0} -eq 1 ]] ; then

  export debug_flag
  set -o verbose

fi

if [[ "version" = "$action" ]] ; then

  version

elif [[ ! -z "$extension" ]] && [[ ! -z "$action" ]] ; then

  if [[ -s "$extensions_path/$extension/bin/$action" ]] ; then

    extension_path="$extensions_path/$extension"
    extension_config_path="$extensions_path/$extension/config"
    extension_templates_path="$extensions_path/$extension/templates"
    extension_scripts_path="$extensions_path/$extension/scripts"
    extension_bin_path="$extensions_path/$extension/bin"

    paths=$(env | awk -F= -v ORS=' ' '/_path/{print $1}')
    flags=$(env | awk -F= -v ORS=' ' '/_flag/{print $1}')

    export action appserver args bdsm_path bindir database debug_flag environment error_message extension extension_bin_path extension_config_path extension_path extension_scripts_path extension_templates_path flags head_flag hooks_flag parse_break paths prefix project project_path repository result revision scripts_path trace_flag user

    cd "$extensions_path/$extension" > /dev/null 2>&1

    #
    # TODO: allow output control.
    #
    #if [[ -z "$verbose_flag" ]] ; then
    "$extensions_path/$extension/bin/$action" $* ; result=$?
    #else
    # "$extensions_path/$extension/bin/$action" $* >> $log 2>> ${log/%log/error.log}
    #fi

    if [[ ${verbose_flag:-0} -eq 1 ]]; then

      if [[ "$result" -gt 0 ]] ; then

        "$scripts_path/log" "error" \
          "'$action $*' returned error\n\n"

      else

        "$scripts_path/log" "info" \
          "'$action $*' returned success\n\n"

      fi

    fi

  fi

elif [[ -n "$extension" ]] ; then

  echo $(actions_for_extension $extension)

else

  usage

fi

result=$?

exit $result
