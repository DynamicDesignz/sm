#!/usr/bin/env bash

# Author: Wayne E. Seguin
# All Rights Reserved

#
# Setup
#
prefix="${prefix:-/usr/local}"
if [[ -s "$HOME/.bdsmrc" ]] ; then source "$HOME/.bdsmrc" ; fi
source "${scripts_path:-"$prefix/bdsm/scripts"}"/initialize
source "${scripts_path}"/functions
result=0

VERSION="$(cat "$bdsm_path"/VERSION)"

function version {
  _author="Wayne E. Seguin"
  _author_email="wayneeseguin@gmail.com"
  _website="http://bdsm.beginrescueend.com/"
  _version="$VERSION"
  echo -e "bdsm ${_version} ${_website} by ${_author} (${_author_email})"
}

function usage {
  version
  "$extensions_path"/bdsm/bin/help | ${PAGER:-less}
}

#
# parse args
#
while [ $# -gt 0 ] ; do
  token="$1" ; shift
  case "$token" in
    # TODO: extension detection "did you mean"

    # TODO: Fall back on default actions instead of specifying them here
    #       In case the user has set their default serfice in the environment.
    deploy|rollback|backup_database)
      export extension="bdsm"
      export action="$token"
      parse_break=1
    ;;

    extend|extension)  export extension="extension"           ;;
    --no-hooks)        export hooks_flag=0                    ;;
    --project)         export project="$1"            ; shift ;;
    --environment)     export environment="$1"        ; shift ;;
    --repo|repository) export repository="$1"         ; shift ;;
    --revision)        export revision="$1"           ; shift ;;
    --database)        export database="$1"           ; shift ;;
    --server)          export server="$1"             ; shift ;; # better name for this?
    --head)            export head_flag=1                     ;;
    --debug)           export debug_flag=1                    ;;
    --trace)           export trace_flag=1 ; export debug_flag=1 ; set -x ;;
    -v|--version)      export action="version" ;;

    *)
      #if $scripts_path/match "$token" $extensions ; then
      if [[ -z "$extension" ]] ; then
        if [[ -d "$extensions_path/$token" ]] ; then
          export extension="$token"
        else
          export extension="${extension:-bdsm}"
        fi
      fi
      if [[ -z "$action" ]] ; then
        if [[ -x "$extensions_path/$extension/bin/$token" ]] ; then
          export action="$token"
          parse_break=1
        fi
      elif [[ -d "/data/$token" ]] ; then
        project="$token"
        project_path="/data/$token"
      elif [[ -d "/home/$token" ]] ; then
        project="$token"
        project_path="/home/$token"
      else
        # determine sanity of project
        action="error"
        error_message="Unrecognized command line argument(s): '$token $@'"
      fi
    ;;
  esac

  if [[ ! -z "$parse_break" ]] || [[ ! -z "$error_message" ]] ; then unset parse_break ; break; fi
done

if [[ ! -z "$error_message" ]] ; then exit 1 ; fi

#
# Main Logic
#
if [[ "$trace_flag" = 1 ]] ; then set -x ; else set +x ; fi

if [[ "version" = "$action" ]] ; then
  version
elif [[ ! -z "$extension" ]] && [[ ! -z "$action" ]] ; then
  if [[ -s "$extensions_path/$extension/bin/$action" ]] ; then
    export extension_path="$extensions_path/$extension"
    export extension_config_path="$extensions_path/$extension/config"
    export extension_templates_path="$extensions_path/$extension/templates"
    export extension_scripts_path="$extensions_path/$extension/scripts"
    export extension_bin_path="$extensions_path/$extension/bin"

    pushd "$extensions_path/$extension" > /dev/null 2>&1
    # TODO: log action output with tee
    "$extensions_path/$extension/bin/$action" $*
    result=$?
    if [[ "$result" -gt 0 ]] ; then
      : # log error
    else
      : # log success
    fi

    popd > /dev/null 2>&1
    unset extensions_path extension_config_path extension_templates_path extension_scripts_path
  fi
elif [[ ! -z "$extension" ]] ; then
  echo $(actions_for_extension $extension)
else
  usage
fi
result=$?

exit $result
