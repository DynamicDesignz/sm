#!/usr/bin/env bash

#
# # General Services functions.
#
#
# ### services_list()
#
# List installed services. These are extensions that have loaded the service
# module.
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# A list of available services to install are printed to STDOUT of
# the calling environment.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# NIY
# No failure conditions currently.
#
# ##### Usage Examples
#
#     user$ services_avilable
#     Available service listing has not yet been implemented.
#     This feature has not yet been implemented.
#
#
# # General Services functions.
#
#
# ### services_list()
#
# List installed services. These are extensions that have loaded the service
# module.
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# A list of available services to install are printed to STDOUT of
# the calling environment.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# NIY
# No failure conditions currently.
#
# ##### Usage Examples
#
#     user$ services_avilable
#     Available service listing has not yet been implemented.
#     This feature has not yet been implemented.
#
services_avilable()
{
  log "Available service listing has not yet been implemented."
  NIY
  services_installed
}

#
# ### services_installed()
#
# List installed services. These are extensions that have loaded the service
# module.
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# A list of installed extensions that load the service module are printed
# to the STDOUT of the calling environment.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# NIY
# No failure conditions currently.
#
# ##### Usage Examples
#
#     user$ services_installed
#     nginx unicorn redis postgresql
#
services_installed()
{
  log "Installed services has not yet been implemented."
  NIY
}

#
# ### services_available()
#
# List available services. These are extensions that load the service module.
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# A list of available extensions that load the service module are printed to
# STDOUT of the calling environment.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# NIY
# No failure conditions currently.
#
# ##### Usage Examples
#
#     user$ services_available
#     nginx redis postgresql mongodb ...
#
services_available()
{
  log "Installed services has not yet been implemented."
  NIY
}

#
# # Single Service functions.
#
#
# ### service_setup()
#
# Service setup and configuration.
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# None.
#
# ##### Environmental effects
#
# Creates a system service user with the same name as the service.
# Sets up the service init_d file from template, if it exists.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# No failure scenarios currently.
#
# ##### Usage Examples
#
#     user$ service=redis
#     user$ service_setup
#     ...
#
service_setup()
{
  log "#creating paths for ${service} ${package_version}..."

  ensure_paths_exist "${service_paths[@]}" "${install_path}"

  user_create_if_missing "${service_user}" with group "${service_user}"

  chown_paths_recursively "${service_user}:${service_user}" "${service_paths[@]}"

  service_install_init_d "${service}"
}

#
# ### service_start()
#
# Starts the given service using init scripts.
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# Whatever stream output comes from the called init script.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# Fails if extension was not set.
# Fails if the init script is missing or not executable.
#
# ##### Usage Examples
#
#     user$ extension=redis
#     user$ service_start
#     ...
#
service_start()
{
  [[ -n "${service}" ]] ||
    fail "Service must be set in order to start the associated service."

  if command_exists "${service}_start"
  then
    "${service}_start"
  else
    file_is_executable "${init_scripts_path}/${service}" ||
      fail "${init_scripts_path}/${service} is missing or not executable."

    service_init_start
  fi
}

#
# ### service_stop()
#
# stops the given service using init scripts.
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# Whatever stream output comes from the called init script.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# Fails if service was not set.
# Fails if the init script is missing or not executable.
#
# ##### Usage Examples
#
#     user$ service=redis
#     user$ service_stop
#     ...
#
service_stop()
{
  if command_exists "${service}_stop"
  then
    "${service}_stop"
  else
    file_is_executable "${init_scripts_path}/${service}" ||
      fail "${init_scripts_path}/${service} is missing or not executable."

    service_init_stop
  fi
}

#
# ### service_restart()
#
# restarts the given service using init scripts.
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# Whatever stream output comes from the called init script.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# Fails if service was not set.
# Fails if the init script is missing or not executable.
#
# ##### Usage Examples
#
#     user$ service=redis
#     user$ service_restart
#     ...
#
service_restart()
{
  if command_exists "${service}_restart"
  then
    "${service}_restart"
  else
    file_is_executable "${init_scripts_path}/${service}" ||
      fail "${init_scripts_path}/${service} is missing or not executable."

    service_init_stop
    service_init_start
  fi
}

#
# ### service_status()
#
# statuss the given service using init scripts.
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# Whatever stream output comes from the called init script.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# Fails if service was not set.
# Fails if the init script is missing or not executable.
#
# ##### Usage Examples
#
#     user$ service=redis
#     user$ service_status
#     ...
#
service_status()
{
  if command_exists "${service}_status"
  then
    "${service}_status"
  else
    file_is_executable "${init_scripts_path}/${service}" ||
      fail "${init_scripts_path}/${service} is missing or not executable."

    service_init_status
  fi
}

#
# ### service_logtail()
#
# logtails the given service using init scripts.
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# Whatever stream output comes from the called init script.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# Fails if service was not set.
# Fails if the init script is missing or not executable.
#
# ##### Usage Examples
#
#     user$ service=redis
#     user$ service_logtail
#     ...
#
service_logtail()
{
  if command_exists "${service}_logtail"
  then
    "${service}_logtail"
  else
    file_is_executable "${init_scripts_path}/${service}" ||
      fail "${init_scripts_path}/${service} is missing or not executable."

    "${init_scripts_path}/${service}" logtail
  fi
}

#
# ### service_info()
#
# infos the given service using init scripts.
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# Whatever stream output comes from the called init script.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# Fails if service was not set.
# Fails if the init script is missing or not executable.
#
# ##### Usage Examples
#
#     user$ service=redis
#     user$ service_info
#     ...
#
service_info()
{
  if command_exists "${service}_info"
  then
    "${service}_info"
  else
    file_is_executable "${init_scripts_path}/${service}" ||
      fail "${init_scripts_path}/${service} is missing or not executable."

    "${init_scripts_path}/${service}" info
  fi
}

#
# ### service_configcheck()
#
# configchecks the given service using init scripts.
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# Whatever stream output comes from the called init script.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# Fails if service was not set.
# Fails if the init script is missing or not executable.
#
# ##### Usage Examples
#
#     user$ service=redis
#     user$ service_configcheck
#     ...
#
service_configcheck()
{
  if command_exists "${service}_configcheck"
  then
    "${service}_configcheck"
  else
    file_is_executable "${init_scripts_path}/${service}" ||
      fail "${init_scripts_path}/${service} is missing or not executable."

    "${init_scripts_path}/${service}" configcheck
  fi
}

#
# ### service_usage()
#
# usages the given service using init scripts.
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# Whatever stream output comes from the called init script.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# Fails if service was not set.
# Fails if the init script is missing or not executable.
#
# ##### Usage Examples
#
#     user$ service=redis
#     user$ service_usage
#     ...
#
service_usage() {
  # TODO: Update this for service specific items.
  printf "
Usage:

  $0 [options]

Options:

  --prefix   - specify prefix path
  --src)     - specify source directory
  --data)    - specify data directory
  --user)    - specify user to install as
  --version) - specify version to install
  --licence) - view licence
  --help)    - view this usage information

  "
  return 0
}

#
# ### service_cli()
#
# clis the given service using init scripts.
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# Whatever stream output comes from the called init script.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# Fails if service was not set.
# Fails if the init script is missing or not executable.
#
# ##### Usage Examples
#
#     user$ service=redis
#     user$ service_cli
#     ...
#
service_cli()
{
  # TODO: Update this for service specific items.
  local _ignored_args=()

  number_of_args=${#extension_args[@]}

  for (( index=0 ; index < $number_of_args ; index++ ))
  do
    token="${extension_args[$index]}"

    case "$token" in
      --prefix)
        prefix_path="${extension_args[$((++index))]}"
        ;;
      --src)
        src_path="${extension_args[$((++index))]}"
        ;;
      --data)
        data_path="${extension_args[$((++index))]}"
        ;;
      --user)
        service_user="${extension_args[$((++index))]}"
        ;;
      --version)
        service_version="${extension_args[$((++index))]}"
        ;;
      --base_url)
        service_base_url="${extension_args[$((++index))]}"
        ;;
      --file)
        service_file="${extension_args[$((++index))]}"
        ;;
      --directory)
        service_directory="${extension_args[$((++index))]}"
        ;;
      --archive_format)
        archive_format="${extension_args[$((++index))]}"
        ;;
      --activate|activate)
        # TODO: Throw error if parameter is not specified.
        if (( ${#extension_args[@]} > 0 ))
        then
          service_activate "${service}" "${extension_args[$((++index))]}"
        else
          error "Cannot activate ${service}, no version was given."
        fi
        ;;
      --deactivate|deactivate)
        service_deactivate "${service}"
        ;;
      --md5)
        service_md5="${extension_args[$((++index))]}"
        ;;
      --help)
        service_usage
        exit 0
        ;;
      --trace)
        set -o xtrace
        ;;
      *)
        _ignored_args+=("${token}")
        ;;
    esac

    if (( ${#_ignored_args[@]} > 0 ))
    then
      extension_args=( "${_ignored_args[@]}" )
    fi
  done

  service_init_path
}

#
# ### service_pid()
#
# List installed services. These are extensions that have loaded the service
# module.
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# A list of extensions that load the service module are printed to STDOUT of
# the calling environment.
#
# ##### Environmental effects
#
# Sets the variable 'service_pid' to contain the pid of the process or 0.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# None currently.
#
# ##### Usage Examples
#
#     root# service=redis
#     root# service_pid
#     root# echo $service_pid
#     0
#
service_pid()
{
  local _path="${run_path:="/var/run"}/${service}"
  local _pid=0

  ensure_paths_exist "${_path}"

  if file_is_nonempty "${_path}/${service}.pid"
  then
    read -r _pid < "${_path}/${service}.pid"
    if os_is_linux
    then # Sanity check.
      if ! directory_exists "/proc/${pid}"
      then
        _pid=0
        rm -f "${_path}/${service}.pid"
      fi
    fi
  fi

  service_pid=${_pid}

  return 0
}

#
# ### service_load_conf_d()
#
# Load the /etc/conf.d/{service}.conf configuration file into the calling
# environment.
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# None, unless the configuration file contains any print statements.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# No failure conditions currently.
#
# ##### Usage Examples
#
#     user$ service=redis
#     user$ service_load_conf_d
#
service_load_conf_d()
{
  source_files "${confd_path}/${service}.conf"
}

#
# # Service init functions.
#
#
# ### service_install_init_d()
#
# Installs the BDSM service module init.d script for the current extension.
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# Logging messages informing the end user of what is occurring.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# No failure conditions currently.
#
# ##### Usage Examples
#
#     user$ service_install_init_d
#
service_install_init_d()
{
  local _service="${1:-}" _version="${2:-${package_version}}"

  variables_must_be_nonempty _service

  directory_exists "${init_scripts_path}" ||
    return 0 # No bin/ dir, no need for it to be in the path.

  if user_is_root
  then
    ensure_paths_exist "/etc/conf.d" "${init_scripts_path}"

    log "Installing init scripts for ${_service}"

    # TODO: Install the service init script...

    if template_exists "${_service}"
    then
      install_template "${_service}" to "${init_scripts_path}/${_service}" \
        mode 0755
    else
      # Use core srv init.d template
      install_template "${extensions_path}/srv/templates/init_d.template" \
        to "${init_scripts_path}/${_service}" mode 0755
    fi

    service_activate "${service}" "${package_version}"

    # TODO: Replace this with install_template + seed_template
    printf "%s\n" "[ -d \"${prefix_path}/${_service}/active/bin\" ] && " \
      > "/etc/profile.d/${_service}.sh"

    printf "%s\n" "PATH=\"\$PATH:${prefix_path}/${_service}/active/bin\" ; export PATH; " \
      >> /etc/profile.d/${_service}.sh

    chmod_files 0755 "/etc/profile.d/${_service}.sh"
  fi
}

#
# ### service_init_path()
#
# Sets the PATH explicitely for purposes of the current service extension.
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# None.
#
# ##### Environmental effects
#
# Alters the PATH variable.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# No failure conditions currently.
#
# ##### Usage Examples
#
#     user$ service_init_path
#
service_init_path()
{
  PATH="${prefix_path}/bin:/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin:/usr/local/sbin:${PATH}"
}

#
# ### service_init_start()
#
# This is the generalized service init start function.
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# Logging telling the end user what is happening.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# No failure conditions currently.
#
# ##### Usage Examples
#
#     user$ service_init_start
#
service_init_start()
{
  log "Starting ${service}..."

  service_init_path

  local _result=0

  if array_is_nonempty service_flags
  then
    "${service_binary}" "${service_flags[@]}" "${service_config_file}" || result=$?
  else
    "${service_binary}" "${service_config_file}" || result=$?
  fi

  (( _result > 0 )) || touch "$service_pid_file"

  return ${_result}
}

#
# ### service_init_stop()
#
# This is the generalized service init stop function.
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# Logging telling the end user what is happening.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# No failure conditions currently.
#
# ##### Usage Examples
#
#     user$ service_init_stop
#
service_init_stop()
{
  local _result=0

  service_init_path

  (( service_pid > 0 )) ||
    error "Service pid has not been set or is zero."

  log "Stopping ${service}..."

  kill -QUIT "${service_pid}" || _result=$?

  if (( _result == 0 ))
  then
    rm -f "$service_pid_file"
  fi

  return ${_result}
}
#
# ### service_init_status()
#
# This is the generalized service init status function.
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# Logging telling the end user what is happening.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# No failure conditions currently.
#
# ##### Usage Examples
#
#     user$ service_init_status
#
service_init_status()
{
  log "statusing ${service}..."

  service_init_path

  local _result

  "${service_binary}" "${service_flags[@]}" "${service_config_file}"

  _result=$?

  (( _result != 0 )) || touch "$service_pid_file"

  return ${_result}
}


#
# ### service_init_usage()
#
# This is the generalized service init usage function.
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# Logging telling the end user what is happening.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# No failure conditions currently.
#
# ##### Usage Examples
#
#     user$ service_init_usage
#
service_init_usage()
{
  log "Usage:\n\n  $0 {start|stop|restart|status|info|logtail}"
}

#
# ### service_init_logtail()
#
# This is the generalized service init logtail function.
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# Logging telling the end user what is happening.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# No failure conditions currently.
#
# ##### Usage Examples
#
#     user$ service_init_logtail
#
service_init_logtail()
{
  error "Service init logtail has not yet been implemented."
}

#
# ### service_conf_d()
#
# Installs the conf.d template for the service, if it exists.
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# Logging updates to inform the user what is happening.
#
# ##### Environmental effects
#
# Once completed a conf.d file should be in place.
# For example /etc/conf.d/redis.conf for the redis service.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# No failure conditions currently.
#
# ##### Usage Examples
#
#     user$ service=redis
#     user$ service_conf_d
#
service_conf_d()
{
  # TODO: Install a default conf.d template if extension does not define one.
  template_exists "conf.d" || return 0

  install_template "conf.d.template" \
    to "/etc/conf.d/${service}.conf" \
    mode 0644 \
    owner "${service_user}:${service_user}"

  template_exists "/etc/conf.d/${service}.conf" || return 0

  seed_template "/etc/conf.d/${service}.conf" \
    prefix_path "${prefix_path}" \
    init_scripts_path "${init_scripts_path}" \
    modules_path "${modules_path}" \
    data_path "${data_path}" \
    confd_path "${confd_path}" \
    extension "${service}" \
    service "${service}"
}

#
# ### service_init_start()
#
# This is the generalized service init start function.
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# Logging telling the end user what is happening.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# No failure conditions currently.
#
# ##### Usage Examples
#
#     user$ service_init_start
#
service_init_action()
{
  local _action="${1:-}"

  service_load_conf_d

  if command_exists "${service}_${action}"
  then
    "${service}_${action}"
  else
    case "action" in
      start)
        service_init_start
        ;;

      stop)
        service_init_stop
        ;;

      restart)
        service_init_stop
        service_init_start
        ;;

      status)
        service_init_status
        ;;

      logtail)
        service_init_logtail
        ;;

      *)
        service_init_usage
        ;;
    esac
  fi

  return $?
}

#
# ### service_init_d()
#
# The main logic for generalized service init.d scripts.
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# Logging updates to inform the user what is happening.
#
# ##### Environmental effects
#
# May alter the runstate of the service extension.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# No failure conditions currently.
#
# ##### Usage Examples
#
#     user$ service=redis
#     user$ service_init_d
#
service_init_d()
{
  enable_backtrace # Enable backtrace on script error.

  service_load_conf_d # Load the configuration file.

  # Sanity checks go here.
  file_is_executable "${service_binary}" ||
    fail "Could not find ${service_binary} or ${service_binary} is not executable."

  service_pid

  service_cli # Parse the script arguments and take action accordingly.

  service_init_action "${service_action}"
}

#
# ### service_deactivate()
#
# Deactivates the named service or
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# Logging updates to inform the user what is happening.
#
# ##### Environmental effects
#
# Changes the current or named service's init script to be nonexecutable.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# No failure conditions currently.
#
# ##### Usage Examples
#
#     user$ service=redis
#     user$ service_deactivate
#
service_deactivate()
{
  local _service="${1:-"${service}"}"

  [[ -n "${_service}" ]] ||
    fail "service must be set or passed in in order to deactivate a service."

  if file_exists "${init_scripts_path}/${_service}"
  then
    chmod_files 0644 "${init_scripts_path}/${_service}"

    if user_is_root
    then # Add service to system startup
      if command_exists rc-update
      then
        rc-update add ${service} default
      elif command_exists chkconfig
      then
        chkconfig ${service} on
      #elif command_exists svc
      #then
      #  svc ${service} on # TODO: daemontools start on boot
      else # Fall back on rc.local to start redis at system startup.
        if ! file_contains "/etc/rc.local" "${service} start"
        then
          echo "${init_scripts_path}/${service} start" >> /etc/rc.local
        fi
      fi
    fi
  fi
  # TDOO: hook into system's paths.
}

#
# ### service_activate()
#
# Activates the named service or
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# Logging updates to inform the user what is happening.
#
# ##### Environmental effects
#
# Changes the current or named service's init script to be nonexecutable.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# No failure conditions currently.
#
# ##### Usage Examples
#
#     user$ service=redis
#     user$ service_deactivate
#
service_activate()
{
  local _service="${1:-"${service}"}" _version="${2:-${package_version}}"

  [[ -n "${_service}" ]] ||
    fail "service must be set or passed in in order to deactivate a service."

  variables_must_be_nonempty _service _version

  symlink_exists "${service_db_path}/active" &&
    package_deactivate "${_service}"

  directory_exists "${service_db_path}/${_version}" ||
    log "Skipping activation of ${_service} ${_version} as '${install_path}' does not exist."

  log "Activating service ${_service} version ${_version}"

  link --force "${service_db_path}/${_version}" \
    to "${service_db_path}/active"


  if file_exists "${init_scripts_path}/${service}"
  then
    chmod_files 0755 "${init_scripts_path}/${service}"

    if user_is_root
    then # Add service to system startup
      if command_exists rc-update
      then
        rc-update remove ${service} default
      elif command_exists chkconfig
      then
        chkconfig ${service} off
      #elif command_exists svc
      #then
      #  svc ${service} off
      #  TODO: daemontools remove start on boot
      else # Fall back on rc.local to start redis at system startup.
        if ! file_contains "/etc/rc.local" "${service} start"
        then
          sed -i -e "d#${init_scripts_path}/${service} start#" /etc/rc.local
        fi
      fi
    fi
  fi
}
