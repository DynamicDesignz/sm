#!/usr/bin/env bash

#
# BDSM system module DSL functions
#
init_scripts_path()
{
  if [[ $UID -eq 0 ]] ; then
    case "$MACHTYPE" in
      *darwin*)
        # For now stick with say, /usr/local/bin
        printf "${prefix_path}/bin"
        ;;
      *linux-gnu*|*)
        if [[ -d "/etc/init.d" ]] ; then
          printf "/etc/init.d"
        elif [[ -d "/etc/rc.d" ]] ; then
          printf "/etc/rc.d"
        else
          fail "Unknown init scripts directory (/etc/init.d or /etc/rc.d not found)."
        fi
        ;;
    esac

  else
    printf "$HOME/.init.d/"
  fi
}

# Example:
#
#   ensure_user_exists "nginx" group "nginx"
ensure_user_exists()
{
  local _token _group
  # parse arguments
  while [[ $# -gt 0 ]] ; do
    _token="$1" ; shift

    case "${_token}" in
      group)
        _group="${1}" ; shift
        ;;
      with)
        continue # Syntatic sugar, ignore, next!
        ;;
      from)
        _source="${1}" ; shift
        ;;
      --force)
        _force_flag=1
        ;;

      *)
        if [[ -z "${_group}" ]] ; then
          _group="${_token}"
          break
        fi
        ;;
    esac
  done

  if [[ $UID -eq 0 ]] ; then
    (
    case "$(uname)" in
      "OpenBSD")
        groupadd "$package_user"
        useradd -g "$package_user" "$package_user" -s /bin/bash
        usermod -s /bin/bash "$package_user"
        ;;

      "FreeBSD")
        pw groupadd -q "$package_user"
        ;;

      "Linux")
        # groupadd nginx
        # useradd -G nginx -M nginx
        if [[ -f "/etc/SuSE-release" ]] ; then
          groupadd "$package_user"
        else
          groupadd -f "$package_user"
        fi

        useradd -g "${package_user}" "${package_user}"
        usermod -d "${data_path%\/*}" "${package_user}"
        usermod -s /bin/bash "${package_user}"
      ;;

      "Darwin")
        current_max_gid=$(dscl . -list /Groups gid | awk '{print $2}' | sort -g -r | head -1)
        next_gid=$((current_max_gid+1))

        current_max_uid=$(dscl . -list /Users UniqueID | awk '{print $2}' | sort -g -r | head -1)
        next_uid=$((current_max_uid+1))

        if ! dscl . -list /Users | grep -q "^${package_user}$" ; then
          dscl . -create "/Groups/$package_user"
          dscl . -create "/Groups/$package_user" gid "$next_gid"
          dscl . -create "/Users/${package_user}"
          dscl . -create "/Users/${package_user}" PrimaryGroupID "$gid" # UserShell /bin/bash
          dscl . -create "/Users/${package_user}" uid "$next_uid"
          dscl . -create "/Users/${package_user}" realname "Postgresql User"
          dscl . -create "/Users/${package_user}" home "${data_path%\/*}"
          dscl . -create "/Users/${package_user}" shell "/bin/bash"
          dscl . -create "/Users/${package_user}" gid "$gid"
          dscl . -create "/Users/${package_user}" passwd "*"
        fi
      ;;

      "SunOS")
        groupadd "$package_user"
        useradd -g "$package_user" -s /bin/bash -d "${data_path}" "$package_user"
        usermod -s /bin/bash "$package_user"
        ;;
    esac
    ) || true # Ignore failures with this for now...
  else
    fail "Users and groups may be manipulated only by the super user (root) via su or sudo."
  fi
}

delete_user()
{
  local _token _group
  # parse arguments
  while [[ $# -gt 0 ]] ; do
    _token="$1" ; shift

    case "${_token}" in
      group)
        _group="${1}" ; shift
        ;;
      with)
        continue # Syntatic sugar, ignore, next!
        ;;
      from)
        _source="${1}" ; shift
        ;;
      --force)
        _force_flag=1
        ;;

      *)
        if [[ -z "${_group}" ]] ; then
          _group="${_token}"
          break
        fi
        ;;
    esac
  done

  if [[ $UID -eq 0 ]] ; then
    (
    case "$(uname)" in
      "OpenBSD")
        groupdel "$package_user"
        userdel -g "$package_user" "$package_user"
        ;;

      "FreeBSD")
        pw groupdel -q "$package_user"
        ;;

      "Linux")
        userdel "${package_user}"
      ;;

      "Darwin")
        gid="501" #only gids > 500 show up in user preferences

        #Find an open gid
        while true; do
          name=$(dscl . search /groups PrimaryGroupID $gid | cut -f1 -s)
          if [ -z "$name" ] ; then
            break
          fi
          gid=$[$gid +1]
        done

        #Create the group
        dscl . -delete "/Users/${package_user}" PrimaryGroupID "$gid" # UserShell /bin/bash
        dscl . -delete "/Groups/$package_user"
        dscl . -delete "/Groups/$package_user" gid "$gid"
      ;;

      "SunOS")
        groupdel "$package_user"
        userdel "$package_user"
        ;;
    esac
    ) || true # Ignore failures with this for now...
  else
    fail "Users and groups may be manipulated only by the super user (root) via su or sudo."
  fi
}

running_as_root() { [[ $UID -eq 0 ]] ; }
running_as_superuser() { [[ $UID -eq 0 ]] ; }
running_as_user() { [[ $UID -ne 0 ]] ; }

run_as_user()
{
  local _user="$1" ; shift
  su "${_user}" -c "$*"
}

run_as_login_user()
{
  local _user="$1" ; shift
  su - "${_user}" -c "$*"
}

os_is_linux()   { [[ "$MACHTYPE" = *linux* ]]   ; }
os_is_darwin()  { [[ "$MACHTYPE" = *darwin* ]]  ; }
os_is_bsd()     { [[ "$MACHTYPE" = *bsd* ]]     ; }
os_is_solaris() { [[ "$MACHTYPE" = *solaris* ]] ; }
os_is_aix()     { [[ "$MACHTYPE" = *aix* ]]     ; }

os_type()
{
  case "$MACHTYPE" in
    (*linux*)
      printf "%s" "linux"
      ;;
    (*darwin*)
      printf "%s" "darwin"
      ;;
    (*bsd*)
      printf "%s" "bsd"
      ;;
    (*solaris*)
      printf "%s" "solaris"
      ;;
    (*aix*)
      printf "%s" "aix"
      ;;
  esac
}

os_arch_type()
{
  case "${MACHTYPE//-*}" in
    (i386|i686|i86pc)
      printf "%s" "i386"
      ;;
    (*x86_64*)
      printf "%s" "x86_64"
      ;;
    (*ppc*)
      printf "%s" "ppc"
      ;;
  esac
}

os_arch()
{
  printf '%s' "${MACHTYPE//-*}"
}

os_arch_capable()
{
  if os_is_darwin ; then

  else
    os_arch_type
  fi
}

os_cpu_count()
{
  local _count=1

  if os_is_darwin ; then
    read -r _count < <(sysctl hw.ncpu)
    _count="${_count//* }"
  elif os_is_linux ; then
    _count=0
    while read -r line ; do
      case "$line" in (processor*) ((_count++)) ;; esac
    done < /proc/cpuinfo
  fi

  printf '%d' ${_count}
}

