#!/usr/bin/env bash

#
# ## init_scripts_path
#
# Returns the system init scripts path (eg. /etc/init.d /etc/rc.d)
#
# ### Input Parameters
#
# None.
#
# ### Stream Outputs
#
# The system init scripts path is printed to the calling environments STDOUT.
#
# ### Environmental effects
#
# None.
#
# ### Return Codes
#
# 0 for success.
#
# ### Failure Scenarios
#
# Fails the OS is not of a (yet) recognized type.
#
# ### Usage Examples
#
#     user@archlinux$ init_scripts_path
#     /etc/rc.d
#
init_scripts_path()
{
  if (( UID == 0 )) ; then
    case "$MACHTYPE" in
      *darwin*)
        printf "/etc/init.d" # Service module will create and use this.
        ;;
      *linux-gnu*|*)
        if [[ -d "/etc/init.d" ]] ; then
          printf "/etc/init.d"
        elif [[ -d "/etc/rc.d" ]] ; then
          printf "/etc/rc.d"
        else
          fail "Unknown init scripts directory (/etc/init.d or /etc/rc.d not found)."
        fi
        ;;
    esac
  else
    printf "$HOME/.init.d"
  fi
}

#
# ## confd_path
#
# Return the system conf.d path.
#
# ### Input Parameters
#
# None.
#
# ### Stream Outputs
#
# Prints the conf.d path for the current system and user.
#
# ### Environmental effects
#
# None.
#
# ### Return Codes
#
# 0 for success
#
# ### Failure Scenarios
#
# No failure scenarios currently.
#
# ### Usage Examples
#
#     root# confd_path
#     /etc/conf.d
#
confd_path()
{
  if (( UID == 0 ))
  then
    printf "/etc/conf.d"
  else
    printf "$HOME/.conf.d"
  fi
}

#
# ## os_is_linux
#
# Tests if the operating system the process is running on is Linux.
#
# ### Input Parameters
#
# None.
#
# ### Stream Outputs
#
# None.
#
# ### Environmental effects
#
# None.
#
# ### Return Codes
#
# 0 if the operating system is linux
# 1 if the operating system is not linux
#
# ### Failure Scenarios
#
# No failure scenarios currently.
#
# ### Usage Examples
#
#     root@archlinux# os_is_linux
#     root@archlinux# echo $?
#     0
#
os_is_linux()
{
  if [[ "$MACHTYPE" = *linux* ]]
  then
    return 0
  else
    return 1
  fi
}

#
# ## os_is_darwin
#
# Tests if the operating system the process is running on is Linux.
#
# ### Input Parameters
#
# None.
#
# ### Stream Outputs
#
# None.
#
# ### Environmental effects
#
# None.
#
# ### Return Codes
#
# 0 if the operating system is linux
# 1 if the operating system is not linux
#
# ### Failure Scenarios
#
# No failure scenarios currently.
#
# ### Usage Examples
#
#     root@archlinux# os_is_linux
#     root@archlinux# echo $?
#     0
#
os_is_darwin()
{
  if [[ "$MACHTYPE" = *darwin* ]]
  then
    return 0
  else
    return 1
  fi
}

#
# ## os_is_bsd
#
# Tests if the operating system the process is running on is Linux.
#
# ### Input Parameters
#
# None.
#
# ### Stream Outputs
#
# None.
#
# ### Environmental effects
#
# None.
#
# ### Return Codes
#
# 0 if the operating system is linux
# 1 if the operating system is not linux
#
# ### Failure Scenarios
#
# No failure scenarios currently.
#
# ### Usage Examples
#
#     root@archlinux# os_is_linux
#     root@archlinux# echo $?
#     0
#

os_is_bsd()
{
  [[ "$MACHTYPE" = *bsd* ]]
}

#
# ## os_is_solaris
#
# Tests if the operating system the process is running on is Linux.
#
# ### Input Parameters
#
# None.
#
# ### Stream Outputs
#
# None.
#
# ### Environmental effects
#
# None.
#
# ### Return Codes
#
# 0 if the operating system is linux
# 1 if the operating system is not linux
#
# ### Failure Scenarios
#
# No failure scenarios currently.
#
# ### Usage Examples
#
#     root@archlinux# os_is_linux
#     root@archlinux# echo $?
#     0
#

os_is_solaris()
{
  [[ "$MACHTYPE" = *solaris* ]]
}

#
# ## os_is_aix
#
# Tests if the operating system the process is running on is Linux.
#
# ### Input Parameters
#
# None.
#
# ### Stream Outputs
#
# None.
#
# ### Environmental effects
#
# None.
#
# ### Return Codes
#
# 0 if the operating system is linux
# 1 if the operating system is not linux
#
# ### Failure Scenarios
#
# No failure scenarios currently.
#
# ### Usage Examples
#
#     root@archlinux# os_is_linux
#     root@archlinux# echo $?
#     0
#

os_is_aix()
{
  [[ "$MACHTYPE" = *aix* ]]
}

#
# ## os_type
#
# Tests if the operating system the process is running on is Linux.
#
# ### Input Parameters
#
# None.
#
# ### Stream Outputs
#
# None.
#
# ### Environmental effects
#
# None.
#
# ### Return Codes
#
# 0 if the operating system is linux
# 1 if the operating system is not linux
#
# ### Failure Scenarios
#
# No failure scenarios currently.
#
# ### Usage Examples
#
#     root@archlinux# os_is_linux
#     root@archlinux# echo $?
#     0
#
os_type()
{
  case "$MACHTYPE" in
    (*linux*)
      printf "%s" "linux"
      ;;
    (*darwin*)
      printf "%s" "darwin"
      ;;
    (*bsd*)
      printf "%s" "bsd"
      ;;
    (*solaris*)
      printf "%s" "solaris"
      ;;
    (*aix*)
      printf "%s" "aix"
      ;;
  esac
}

#
# ## os_arch_type
#
# Tests if the operating system the process is running on is Linux.
#
# ### Input Parameters
#
# None.
#
# ### Stream Outputs
#
# None.
#
# ### Environmental effects
#
# None.
#
# ### Return Codes
#
# 0 if the operating system is linux
# 1 if the operating system is not linux
#
# ### Failure Scenarios
#
# No failure scenarios currently.
#
# ### Usage Examples
#
#     root@archlinux# os_is_linux
#     root@archlinux# echo $?
#     0
#
os_arch_type()
{
  case "${MACHTYPE//-*}" in
    (i386|i686|i86pc)
      printf "%s" "i386"
      ;;
    (*x86_64*)
      printf "%s" "x86_64"
      ;;
    (*ppc*)
      printf "%s" "ppc"
      ;;
  esac
}

#
# ## os_arch
#
# Tests if the operating system the process is running on is Linux.
#
# ### Input Parameters
#
# None.
#
# ### Stream Outputs
#
# None.
#
# ### Environmental effects
#
# None.
#
# ### Return Codes
#
# 0 if the operating system is linux
# 1 if the operating system is not linux
#
# ### Failure Scenarios
#
# No failure scenarios currently.
#
# ### Usage Examples
#
#     root@archlinux# os_is_linux
#     root@archlinux# echo $?
#     0
#
os_arch()
{
  printf '%s' "${MACHTYPE//-*}"
}

#
# ## os_arch_capable
#
# Tests if the operating system the process is running on is Linux.
#
# ### Input Parameters
#
# None.
#
# ### Stream Outputs
#
# None.
#
# ### Environmental effects
#
# None.
#
# ### Return Codes
#
# 0 if the operating system is linux
# 1 if the operating system is not linux
#
# ### Failure Scenarios
#
# No failure scenarios currently.
#
# ### Usage Examples
#
#     root@archlinux# os_is_linux
#     root@archlinux# echo $?
#     0
#
os_arch_capable()
{
  if os_is_darwin ; then
    local _string
    read -r _string < <(sysctl hw.cpu64bit_capable)
    if (( ${_string//* } == 1 )) ; then
      printf "%s" "x86_64"
    else
      os_arch_type # Either i386 or ppc
    fi
  else
    os_arch_type
  fi
}

#
# ## os_cpu_count
#
# Print the number of cpu cores on the current system to STDOUT
#
# ### Input Parameters
#
# None.
#
# ### Stream Outputs
#
# An integer representing the number of CPU cores or 1 if unknown.
#
# ### Environmental effects
#
# None.
#
# ### Return Codes
#
# 0 for success
#
# ### Failure Scenarios
#
# No failure scenarios currently.
#
# ### Usage Examples
#
#     user$ os_cpu_count
#     24
#
os_cpu_count()
{
  local _count=1 # Defaulting to 1.

  if os_is_darwin
  then
    read -r _count < <(sysctl hw.ncpu)
    _count="${_count//* }"
  elif os_is_linux
  then
    _count=$(awk '/^processor/{count++} END{print count}' /proc/cpuinfo 2>&1)
  fi

  printf '%d' ${_count}
}

