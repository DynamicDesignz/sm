#!/usr/bin/env bash

#
# ## read_default
#
# Reads default values from an extension's config/defaults file.
#
# ### Input Parameters
#
# First parameter is the defaults file key to read (key=value).
# Second parameter is the variable name to store the retrieved value in.
# Remaining parameters are parsed out as token, value and prefix
#   into|as <variable name>
#   prefix <name>
#   <variable> # If no specifier.
#
# ### Stream Outputs
#
# None.
#
# ### Environmental effects
#
# A variable will be set to the value, if the value is nonempty. If no variable
# name is specified the variable will be assigned the same name as the key.
#
# ### Return Codes
#
# 0 for success.
#
# ### Failure Scenarios
#
# Fails if no arguments are passed in, at least need to specify a key.
#
# ### Usage Examples
#
#     user$ read_default "version" prefix "package" # extension is nginx for example
#     user$ echo $package_version
#     1.0.0
#
read_default()
{
  local key variable token value prefix

  key="${1:-}"

  [[ -n "${key}" ]] ||
    fail "$extension $action read_default() no arguments passed! "

  shift

  while (( $# > 0 )) ; do
    token="$1" ; shift
    case "$token" in
      into|as)
        variable="$1" ; shift
        ;;
      prefix)
        prefix="$1" ; shift
        ;;
      *)
        variable="$token"
        break
      ;;
    esac
  done

  if [[ -z "${variable:-}" ]] ; then
    if [[ -n "${prefix:-}" ]] ; then
      true "${variable:="${prefix:-}_$key"}"
    else
      true "${variable:="$key"}"
    fi
  fi

  value="$(hash_file "${extension_config_path}/defaults" "${key}")"

  eval "${variable}=\"${value}\""
}

