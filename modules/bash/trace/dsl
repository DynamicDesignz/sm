#!/usr/bin/env bash

#
# ## set_ps4()
#
# Set the environmental PS4 variable for informative tracing.
#
# ### Input Parameters
#
# None.
#
# ### Stream Outputs
#
# None.
#
# ### Return Codes
#
# 0 for success
#
# ### Failure Scenarios
#
# No failure scenarios currently.
#
# ### Usage Examples
#
#     user$ echo "'$PS4'"
#     '+ '
#     user$ set_ps4
#     user$ echo "'$PS4'"
#     ' > ${BASH_SOURCE##${bdsm_path}\/} ${FUNCNAME[0]:+${FUNCNAME[0]}()} ${LINENO} $ '
#
set_ps4()
{
  # Set the PS4 variable
  PS4=" > \${BASH_SOURCE##\${bdsm_path}\/} \${FUNCNAME[0]:+\${FUNCNAME[0]}()} \${LINENO} $ "
  # Export the PS4 variabel so that this script and called bash scripts will
  # display a more detailed and formatted trace output.
  export PS4

  # Return true, 0, for success.
  return 0
}

#
# ## trace()
#
# Toggle tracing functionality on or off. If 'on' is triggered then every line
# of code execution after the function returns will be displayed in the format
# specified by the PS4 environment variable (see set_ps4).
#
# ### Input Parameters
#
# First parameter is either empty, 'on' or 'off'
#
# ### Stream Outputs
#
# None.
#
# ### Return Codes
#
# 0 for success
#
# ### Failure Scenarios
#
# No failure scenarios currently.
#
# ### Usage Examples
#
#     user$ trace on
#     user$ echo "hi"
#     >   1 $ echo hi
#     user$ trace off
#     >  trace() 1 $ local _option=off
#     >  trace() 3 $ [[ off = \o\n ]]
#     >  trace() 8 $ set +o xtrace
#
# ### Code Walkthrough
trace()
{
  # Declare the option varibale and set it to the first parameter, if nonempty,
  # and to 'on' if no parameters were given.
  local _option="${1:-on}"

  # If the option is on (default) then
  if [[ "${_option}" = "on" ]]
  then
    # set and export the trace flag to 1
    export trace_flag=1
    # Start shell tracing
    set -o xtrace
  else
    # Stop shell tracing
    set +o xtrace
    # set and export the trace flag to 0
    export trace_flag=0
  fi
}

#
# ## enable_trace()
#
# Turns tracing on.
#
# ### Input Parameters
#
# None.
#
# ### Stream Outputs
#
# None.
#
# ### Return Codes
#
# 0 for success.
#
# ### Failure Scenarios
#
# No failure scenarios currently.
#
# ### Usage Examples
#
#     user$ enable_trace
#
# ### Code Walkthrough
enable_trace()
{
  # Enable shell tracing
  trace on
}

#
# ## disable_trace()
#
# Turns tracing off.
#
# ### Input Parameters
#
# None.
#
# ### Stream Outputs
#
# None.
#
# ### Return Codes
#
# 0 for success
#
# ### Failure Scenarios
#
# No current failure scenarios.
#
# ### Usage Examples
#
#     user$ disable_trace
#
# ### Code Walkthrough
disable_trace()
{
  # Disable shell tracing
  trace off
}

#
# ## debug()
#
# Toggle verbose debugging functionality on or off. If 'on' is triggered then
# every line of code execution after the function returns will be displayed.
#
# ### Input Parameters
#
# First parameter is either empty, 'on' or 'off'
#
# ### Stream Outputs
#
# None.
#
# ### Return Codes
#
# 0 for success
#
# ### Failure Scenarios
#
# No failure scenarios currently.
#
# ### Usage Examples
#
#     user$ debug on
#     user$ echo "hi"
#     >   1 $ echo hi
#     user$ debug off
#     >  debug() 1 $ local _option=off
#     >  debug() 3 $ [[ off = \o\n ]]
#     >  debug() 8 $ set +o xdebug
#
# ### Code Walkthrough
debug()
{
  # Declare the option varibale and set it to the first parameter, if nonempty,
  # and to 'on' if no parameters were given.
  local _option="${1:-on}"

  # If the option variable is set to on (the default) then
  if [[ "${_option}" = "on" ]]
  then
    # Set and export the debug_flag variable to 1 (enable)
    export debug_flag=1
    # Enable verbose shell echoing (every code line is printed before execution)
    set -o verbose
  else
    # Disable verbose shell echoing.
    set +o verbose
    # Set and export the debug_flag variable to 0 (disable)
    export debug_flag=0
  fi
}

#
# ## enable_debug()
#
# Enables verbose debugging output.
#
# ### Input Parameters
#
# None.
#
# ### Stream Outputs
#
# None.
#
# ### Return Codes
#
# 0 for success
#
# ### Failure Scenarios
#
# No failure scenarios currently.
#
# ### Usage Examples
#
#     user$ enable_debug
#
# ### Code Walkthrough
enable_debug()
{
  # Turn debugging on.
  debug on
}

#
# ## disable_debug()
#
# Disables verbose debugging output.
#
# ### Input Parameters
#
# None.
#
# ### Stream Outputs
#
# None.
#
# ### Return Codes
#
# 0 for success
#
# ### Failure Scenarios
#
# No failure scenarios currently.
#
# ### Usage Examples
#
#     user$ disable_debug
#
# ### Code Walkthrough
disable_debug()
{
  # Turn debugging off
  debug off
}

#
# ## enable_backtrace()
#
# Enables backtrace and program exit whenever a command returns a nonzero value
# that is not handled.
#
# ### Input Parameters
#
# First parameter is optional. If it is passed it is a message that will be
# outputed when a command trigger the program to error exit.
#
# ### Stream Outputs
#
# What gets printed to STDOUT and STDERROR. 'None.' if nothing is output.
#
# ### Return Codes
#
# 0 for success
#
# ### Failure Scenarios
#
# No failure conditions currently.
#
# ### Usage Examples
#
#     user$ cat ./test
#     #!/usr/bin/env bash
#     source "/usr/local/bdsm/modules/bash/core/initialize" # Load BDSM framework core.
#     modules trace # Load the trace module.
#     enable_backtrace
#     echo "Error exit with backtrace is now off."
#     false # Does not cause exiting with backtrace printing.
#
#     user$ $PWD/test
#     Error exit with backtrace is on.
#     ERROR: A command has returned an unhandled error code (nonzero return value).
#     Error Backtrace:
#        Trace   Function           Line  File
#           1.   main()                7  /Users/wayneeseguin/test
#
# ### Code Walkthrough
enable_backtrace()
{
  # Declare a message local variable and set it to the first parameter or empty
  # string if the first paramter was not passed in.
  local _message="${1:-}"

  # If the message variable is not empty then
  if variable_is_nonempty _message
  then
    # Enable the backtrace with the message attached to the backtrace call.
    trap "backtrace \"${_message}\"" ERR
  else
    # Enable the backtrace with no message attached to the backtrace call.
    trap "backtrace \"A command has returned an unhandled error code (nonzero return value).\"" ERR
  fi
  # Set the shell exit on error option
  set -o errexit
}

#
# ## function_name()
#
# Function Description
#
# ### Input Parameters
#
# None.
#
# ### Stream Outputs
#
# None.
#
# ### Return Codes
#
# 0 for success
#
# ### Failure Scenarios
#
# No failure conditions currently.
#
# ### Usage Examples
#
#     user$ cat ./test
#     #!/usr/bin/env bash
#     source "/usr/local/bdsm/modules/bash/core/initialize" # Load BDSM framework core.
#     modules trace # Load the trace module.
#     disable_backtrace
#     echo "Error exit with backtrace is now off."
#     false # Does not cause exiting with backtrace printing.
#
#     user$ ./test
#     Error exit with backtrace is now off.
#
# ### Code Walkthrough
disable_backtrace()
{
  # Turn off shell error exit option.
  set +o errexit

  # Clear all ERR signal traps.
  trap - ERR
}

#
# ## backtrace()
#
# Display a backtrace of the current call stack to the point that backtrace was
# called from. Currently trace is turned on as well so that execution after
# calling backtrace is traced.
#
# ### Input Parameters
#
# None.
#
# ### Stream Outputs
#
# The call stack up to the current point of execution is printed to STDOUT of
# the calling environment.
#
# ### Return Codes
#
# 0 for success
#
# ### Failure Scenarios
#
# No failure scenarios currently.
#
# ### Usage Examples
#
#     user$ cat ./test
#     #!/usr/bin/env bash
#     source "/usr/local/bdsm/modules/bash/core/initialize" # Load BDSM framework core.
#     modules trace # Load the trace module.
#
#     functiona()
#     {
#       echo "function a"
#       functionb
#       echo "function a"
#     }
#
#     functionb()
#     {
#       echo "function b"
#       functionc
#       echo "function b"
#     }
#
#     functionc()
#     {
#       echo "function c"
#       backtrace
#       echo "function c"
#     }
#
#     functiona
#
#     user$ $PWD/test
#     function a
#     function b
#     function c
#     Error Backtrace:
#        Trace   Line Function             File
#           4.     25 functionc()          /Users/wayneeseguin/test
#           3.     18 functionb()          /Users/wayneeseguin/test
#           2.     11 functiona()          /Users/wayneeseguin/test
#           1.     29 main()               /Users/wayneeseguin/test
#      > /Users/wayneeseguin/test functionc() 26 $ echo 'function c'
#     function c
#      > /Users/wayneeseguin/test functionb() 19 $ echo 'function b'
#     function b
#      > /Users/wayneeseguin/test functiona() 12 $ echo 'function a'
#     function a
#
# ### Code Walkthrough
backtrace()
{
  set +o xtrace
  local _separator _columns=$(tput cols)
  printf -v _separator '%*s' "${_columns:-${COLUMNS:-80}}"
  local _message="${1:-}"

  if [[ -n "${_message}" ]]
  then
    printf "\n${_message}\n\n"
  fi

  local _source _function _line _index _largest _format _digits _longest

  for (( _index=0 ; _index < ${#FUNCNAME[@]} ; _index++ ))
  do
    if (( ${#FUNCNAME[${_index}]} > ${#_largest} ))
    then
      _largest=${FUNCNAME[${_index}]}
    fi
  done

  for (( _index=0 ; _index < ${#BASH_SOURCE[@]} ; _index++ ))
  do
    if (( ${#BASH_SOURCE[${_index}]} > ${#_longest} ))
    then
      _longest=${BASH_SOURCE[${_index}]}
    fi
  done

  for (( _index=0 ; _index < ${#BASH_LINENO[@]} ; _index++ ))
  do
    if (( ${#BASH_LINENO[${_index}]} > ${#_digits} ))
    then
      _digits=${BASH_LINENO[${_index}]}
    fi
  done

  case "${EDITOR:-}" in
    (mvim*|mate*)
      #_format=" %-$((${#_largest} + 2))s %-$((${#EDITOR} + ${#_digits} + 19 + ${#_longest}))s\n"
      _format="%-$((${#_largest} + 2))s %-s\n"
      printf "${_format}" "function()" "Source"  1>&2
      ;;
    (vi*|gvim*|emacs*|*)
      _format="%-$((${#_largest} + 2))s $ %${#EDITOR}s +%-$((${#_digits}))s %-$((${#_longest} + 2))s %s\n"
      printf "${_format}" "function()" ' ' "#" "source file"  1>&2

      ;;
  esac

  printf "${_separator// /=}\n" 1>&2

  for (( _index=1 ; _index < ${#FUNCNAME[@]} ; ++_index ))
  do
    _source="${BASH_SOURCE[${_index}]}"
    _function="${FUNCNAME[${_index}]:+${FUNCNAME[${_index}]}()}"
    _line=${BASH_LINENO[$(( _index - 1 ))]}

    case "$_function" in
      fail\(\)|error\(\)|command_not_found_handle\(\)|command_not_found\(\))
        continue
        ;;
    esac

    case "${EDITOR:-}" in
      (mvim*|mate*)
        printf "${_format}" "${_function}" "${EDITOR// *}://open?url=file://${_source}&line=${_line}" 1>&2
        ;;
      (vi*|gvim*|emacs*|*)
        printf "${_format}" "${_function}" "${EDITOR}" "${_line}" "${_source} " 1>&2
        ;;
    esac
  done
  printf "${_separator// /=}\n" 1>&2

  if (( trace_flag > 0 ))
  then
    enable_trace
  fi
}

