#!/usr/bin/env bash

set_ps4()
{
  export PS4=" > \${BASH_SOURCE##\${bdsm_path}\/} \${FUNCNAME[0]:+\${FUNCNAME[0]}()} \${LINENO} $ "
}

enable_trace()
{
  [[ ${trace_flag:-0} -eq 1 ]] || return 0

  export trace_flag
  set -o xtrace
}

enable_debug()
{
  [[ ${debug_flag:-0} -eq 1 ]] || return 0

  export debug_flag
  set -o verbose
}

enable_backtrace()
{
  trap 'backtrace 69 $? ${LINENO}' ERR
}

backtrace()
{
  local _source _function _line

  local _status="${1:-0}" _message="${1}"

  if [[ ${_status} -gt 0 && ${_status} -ne 69 ]] ; then
    return 0 # If the return status was success, do not print a backtrace
  fi
  # printf "%s\n" "There has been an error..."
  # printf "%s\n" " on or around line ${BASH_LINENO[0]}"
  # printf "%s\n" " of ${BASH_SOURCE[0]}"
  # printf "%s\n" " in ${FUNCNAME[0]}()"
  # [[ -n "${_message}" ]] &&
  #   printf "%s\n" "  with message: ${_message}"
  # printf "%s\n" "  and exit status ${_status}"
  # printf "%s\n" "${_string}"
  # printf "  %6s %6s %-20s %-55s\n" "Trace" "Line" "Function" "File" 1>&2

  for (( index = 1 ; index < (${#FUNCNAME[@]}) ; ++index )) ; do
    # line="${LINENO} > "
    _source="${BASH_SOURCE[${index}]}" # "##${bdsm_path}}"
    _function="${FUNCNAME[${index}]:+${FUNCNAME[${index}]}()}"
    _line=${BASH_LINENO[$(( index - 1 ))]}

    printf "  %5d." "$((${#FUNCNAME[@]} - index ))" 1>&2
    printf " %6s" "${_line}" 1>&2
    printf " %-20s" "${_function}" 1>&2
    printf " %-55s\n" "${_source} " 1>&2
  done

  exit "${_status}"
}

