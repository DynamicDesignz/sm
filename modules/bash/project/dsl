#!/usr/bin/env bash

#
# ### project_initialize
#
# Initializes paths and environment for the logical concept of a 'project'.
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# None.
#
# ##### Environmental effects
#
# Environmental variable settings, such as {shared,release}_path, environment,
# etc...
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# No failure scenarios currently.
#
# ##### Usage Examples
#
#     user$ project_initialize
#     user$ echo $environment
#     production
#
project_initialize()
{
  if [[ -n "${project_path}" ]] ; then
    : \
      "${shared_path:=${project_path}/shared}" \
      "${release_path:=${project_path}/current}" \
      "${environment:="production"}"

    : \
      "${vcs:=$(vcs "${shared_path}/${project}")}"

    log_path="$shared_path/log" # Override default BDSM log path.
    extension_log_path="${log_path}"
  fi

  if [[ -n "${project}" ]] ; then
    database_name="${database_name:-"${project}_${environment}"}"

    source_files ".${project}rc"
  fi
}

#
# ### vcs
#
# Detect and set the vcs, if any, for the current project.
#
# ##### Input Parameters
#
# First parameter must be the path to a repository for determining the VCS.
#
# ##### Stream Outputs
#
# None.
#
# ##### Environmental effects
#
# The environment variable 'vcs' will be set to the VCS detected, or 'git' by
# default.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# Fails if no repository path is given.
#
# ##### Usage Examples
#
#     user$ vcs /home/appuser/shared/appuser
#     user$ echo $vcs
#     git
vcs()
{
  local _path="$1"

  [[ -n "${_path}" ]] ||
    fail "Repository path must be given in order to detect the VCS used."

  if [[ -d "${_path}/.git" ]] ; then
    vcs="git"
  elif [[ -d "${_path}/.svn" ]] ; then
    vcs="svn"
  elif [[ -d "${_path}/.hg" ]] ; then
    vcs="hg"
  # TODO:
  # elif [[ ... ]] ; then
  # vcs="fossil"
  else
    vcs="git" # default
  fi
}

