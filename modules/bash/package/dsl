#!/usr/bin/env bash
#
# ## package_definition
#
# Enables module developers to easily set package variables in name, value pairs.
#
# ##### Input Parameters
#
# Parameters must come in pairs, variable name first (without the 'package'
# prefix), value second.
#
# ##### Stream Outputs
#
# None.
#
# ##### Environmental effects
#
# For each name/value pair, a variable package_${name} is created with the given
# value.
#
# ##### Return Codes
#
# 0 for success.
#
# ##### Failure Scenarios
#
# Fails if extension developer accidentailly separates key/value with an = :)
# Fails if a key is given without a matching value.
#
# ##### Usage Examples
#
# Example Usage:
#
# user$ package_definition \
#         name "bash" \
#         version "4.2" \
#         url "ftp.gnu.org/gnu/bash/"
#
# ##### Notes
#
# For readability it is recommended to split the line into "key value" lines by
# ending the line with a singele backslash '\' character with no space afterwards.
#
package_definition()
{
  while (( $# > 0 )) ; do
    key="$1" ; shift
    if [[ -n "${1:-}" ]] ; then
      value="$1" ; shift
    else
      if echo "$key" | grep '=' ; then
        fail "Invalid key '${key}'\n => Guess: Most likely the '=' is supposed to be a ' '."
      else
        fail "Value not specified for key '${key}'\n => They tend to come in pairs :)"
      fi
    fi

    case "$key" in
      name)
        package_name="${value}"
        ;;
      version)
        package_version="${value}"
        ;;
      file)
        package_file="${value}"
        ;;
      dir)
        package_dir="${value}"
        ;;
      url)
        package_url="${value}"
        ;;
      base_url)
        package_base_url="${value}"
        ;;
      patches_url)
        package_patches_url="${value}"
        ;;
      md5_url)
        package_md5_url="${value}"
        ;;
      bin_path)
        bin_path="${value}"
        ;;
      prefix_path)
        prefix_path="${value}"
        ;;
      source_path)
        source_path="${value}"
        ;;
      target_path)
        target_path="${value}"
        ;;
      archive_format)
        archive_format="${value}"
        ;;
      # TODO: Simplify into
      #(+([[[:alnum:]]|])_path|name|version|url|md5_url)
      #  eval "${key}=${value}"
      #  ;;
      *)
        fail "Unknown key '${key}' (value: ${value})"
      ;;
    esac
  done
}

#
# ## package_install
#
# Performs all package installation steps:
# * download
# * extract
# * patch
# * confiure
# * build
# * install
# * postinstall
# * activation
# * service setup, if service module is loaded
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# Steps performed are logged to STDOUT of the calling environment.
#
# ##### Environmental effects
#
# Package installation artifacts are created in the system and source directories.
#
# ##### Return Codes
#
# 0 for success.
#
# ##### Failure Scenarios
#
# Fails if any of the constituant components fail.
#
# ##### Usage Examples
#
# Example Usage:
#
# user$ package_definition \
#         name "bash" \
#         version "4.2" \
#         url "ftp.gnu.org/gnu/bash/"
#
# user$ package_install
#
# ##### Notes
#
package_install()
{
  variables_must_be_nonempty package_name package_version archive_format

  true "${package_dir:="${package_name}-${package_version}"}"

  ensure_paths_exist "${source_path}"

  enter "${source_path}"

  if command_exists "${package_name}_download"
  then
    "${package_name}_download"
  else
    log "Downloading ${package_name} ${package_version}"
    package_fetch
  fi

  if command_exists "${package_name}_extract"
  then
    "${package_name}_extract"
  else
    log "Extracting ${package_name} ${package_version}"
    package_extract
  fi

  enter "${package_dir}"

  if command_exists "${package_name}_patch"
  then
    "${package_name}_patch"
  else
    package_patch
  fi

  if command_exists "${package_name}_configure"
  then
    "${package_name}_configure"
  else
    log "Configuring ${package_name} ${package_version}"
    package_configure
  fi

  if command_exists "${package_name}_build"
  then
    "${package_name}_build"
  else
    log "Building ${package_name} ${package_version}"
    package_build
  fi

  if command_exists "${package_name}_install"
  then
    "${package_name}_install"
  else
    log "Installing ${package_name} ${package_version}"

    package_make_install

    log "Installed ${package_name} ${package_version}."
  fi

  if command_exists "${package_name}_postinstall"
  then
    "${package_name}_postinstall"
  fi

  package_activate_if_first "${package_name}" "${package_version}"

  package_setup

  if module_is_loaded "service"
  then
    service_setup
  fi
}

#
# ## package_fetch_md5
#
# Fetches the package's md5 sum from the md5_url, if given.
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# none.
#
# ##### Environmental effects
#
# The 'package_md5' variable is set with the downloaded md5 sum.
#
# ##### Return Codes
#
# 0 for success.
#
# ##### Failure Scenarios
#
# Fails if any of the constituant components fail.
#
# ##### Usage Examples
#
# Example Usage:
#
# user$ package_fetch_md5
#
# ##### Notes
#
package_fetch_md5()
{
  variables_must_be_nonempty package_name package_version archive_format

  local download_url

  : \
    "${package_file:="${package_name}-${package_version}.${archive_format}"}" \
    "${packge_md5_url:="${package_base_url}/${package_file}.md5"}" \
    "${package_md5:=$( hash_file "${extension_config_path}/md5" "${package_file}" )}"

  if [[ -z "${package_md5}" && -n "${package_md5_url}" ]]
  then
    curl -L "${packge_md5_url}" -o "${package_file}.md5" 2>/dev/null ||
      error "Fetching md5 from '${package_md5_url}' failed."

    package_md5=$(cat "${package_file}.md5")
  fi
}

#
# ## package_fetch
#
# Fetches the package's archive file.
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# curl output goes to STDERR of the calling environment.
#
# ##### Environmental effects
#
# The package archive file will be placed on the filesystem.
#
# ##### Return Codes
#
# 0 for success.
#
# ##### Failure Scenarios
#
# No failure scenarios currently.
#
# ##### Usage Examples
#
# Example Usage:
#
# user$ package_fetch
#
# ##### Notes
#
package_fetch()
{
  variables_must_be_nonempty package_name package_version archive_format

  : \
    "${package_file:="${package_name}-${package_version}.${archive_format}"}" \
    "${package_url:="${package_base_url}/${package_file}"}"

  package_fetch_md5

  if variable_is_nonempty package_md5
  then
    file_matches_md5 "${package_file}" "${package_md5}" || {
      log "${package_file} does not match md5 ${package_md5}, removing and downloading."

      remove_files "${package_file}"

      curl -L "${package_url}" -o "${package_file}" ||
        error "Downloading ${package_name} from '${package_url}' to '${package_file}' failed "
    }
  else
    curl -L "${package_url}" -o "${package_file}" ||
      error "Downloading ${package_name} from '${package_url}' to '${package_file}' failed "
  fi
}

#
# ## package_extract
#
# Extracts the package archive into the package source directory.
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# none.
#
# ##### Environmental effects
#
# The 'package_md5' variable is set with the downloaded md5 sum.
#
# ##### Return Codes
#
# 0 for success.
#
# ##### Failure Scenarios
#
# Errors halting program if any extraction fails or if the archive format is
# unknown.
#
# ##### Usage Examples
#
# Example Usage:
#
# user$ package_extract
#
# ##### Notes
#
package_extract()
{
  case "${archive_format}" in
    tar.gz|tgz) # gzip
      tar zxf "${package_file}" ||
        error "There was an error while extracting the archive '${package_file}'"
      ;;
    xz) # LZMA
      tar Jxf "${package_file}" ||
        error "There was an error while extracting the archive '${package_file}'"
      ;;
    tar.bz2) # bzip
      tar jxf "${package_file}" ||
        error "There was an error while extracting the archive '${package_file}'"
      ;;
    zip)
      unzip "${package_file}" -d "${source_path}" ||
        error "There was an error while extracting the archive '${package_file}'"
      ;;
    *)
      error "Unknown archive format for ${package_file}"
      ;;
  esac
}

#
# ## package_configure
#
# Configures the package source (eg. ./configure ...).
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# none.
#
# ##### Environmental effects
#
# Makefile will be generated for a standard package extension.
#
# ##### Return Codes
#
# 0 for success.
#
# ##### Failure Scenarios
#
# Errors halting program if configuration fails for any reason.
#
# ##### Usage Examples
#
# Example Usage:
#
# user$ package_configure
#
# ##### Notes
#
package_configure()
{
  local _command

  if [[ -n ${configure_command:-} ]]
  then
    _command="${configure_command}"
  else
    export PREFIX="${install_base_path}/${package_version}"

    _command="./configure ${configure_flags[@]:-"--prefix=${install_path:-$prefix_path}"}"

    file_is_executable "configure" || return 0
  fi

  ${_command} > configure.log 2>&1 ||
    error "Configuration of ${package_name} ${package_version} failed, seek help..."

  log "Configuration of ${package_name} ${package_version} successful."
}

#
# ## package_build
#
# builds the package source (eg. make)
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# none.
#
# ##### Environmental effects
#
# Makefile will be generated for a standard package extension.
#
# ##### Return Codes
#
# 0 for success.
#
# ##### Failure Scenarios
#
# Errors halting program if building fails for any reason.
#
# ##### Usage Examples
#
# Example Usage:
#
# user$ package_build
#
# ##### Notes
#
package_build()
{
  local _command

  if [[ -n ${make_command:-} ]]
  then
    _command="${make_command}"
  else
    _command="make ${make_flags[@]:-"-j$(os_cpu_count)"}"
  fi

  if eval "${_command}" > make.log 2>&1
  then
    return 0
  else
    error "Compilation if ${package_name} ${package_version} failed! "
  fi
}

#
# ## package_make_install
#
# make install  the package source (eg. make)
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# none.
#
# ##### Environmental effects
#
# Installation files will be installed to the install_path.
#
# ##### Return Codes
#
# 0 for success.
#
# ##### Failure Scenarios
#
# Errors halting program if make install fails for any reason.
#
# ##### Usage Examples
#
# Example Usage:
#
# user$ package_make_install
#
# ##### Notes
#
package_make_install()
{
  local _command

  if [[ -n ${make_install_command:-} ]]
  then
    _command="${make_install_command}"
  else
    _command="make ${make_install_flags[@]:-install}"
  fi

  if ${_command} > make.install.log 2>&1
  then
    return 0
  else
    error "Failed to make install of ${package_name} ${package_version} failed! "
  fi
}

#
# ## package_activate
#
# activates the package
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# none.
#
# ##### Environmental effects
#
# Symlink will be created to the active version in the package install path.
#
# ##### Return Codes
#
# 0 for success.
#
# ##### Failure Scenarios
#
# Errors halting program if activateing fails for any reason.
#
# ##### Usage Examples
#
# Example Usage:
#
# user$ package_activate
#
# ##### Notes
#
package_activate()
{
  local _package="${1:-}" _version="${2:-}"

  variables_must_be_nonempty _package _version

  symlink_exists "${prefix_path}/${_package}/active" &&
    package_deactivate "${_package}"

  directory_exists "${prefix_path}/${_package}/${_version}" ||
    log "Skipping activation of ${_package} ${_version} as '${install_path}' does not exist."

  log "Activating ${_package} ${_version}"

  link "${prefix_path}/${_package}/${_version}" \
    to "${prefix_path}/${_package}/active"

  package_setup "${_package}"
}

#
# ## package_setup
#
# Sets up the package
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# none.
#
# ##### Environmental effects
#
# ldconfig, profile.d and service (init.d / conf.d) files will be put in place
# on the system.
#
# ##### Return Codes
#
# 0 for success.
#
# ##### Failure Scenarios
#
# Errors halting program if setup fails for any reason.
#
# ##### Usage Examples
#
# Example Usage:
#
# user$ package_setup
#
# ##### Notes
#
package_setup()
{
  local _package="${1:-${package_name}}"

  package_ldconfig "${_package}"

  package_profile_d "${_package}"

  if module_is_loaded "service"
  then
    service_setup "${_package}"
  fi
}

#
# ## package_deactivate
#
# deactivates the package
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# none.
#
# ##### Environmental effects
#
# Active symlinks will be removed from the filesystem.
#
# ##### Return Codes
#
# 0 for success.
#
# ##### Failure Scenarios
#
# Errors halting program if deactivating fails for any reason.
#
# ##### Usage Examples
#
# Example Usage:
#
# user$ package_deactivate
#
# ##### Notes
#
package_deactivate()
{
  local _package="${1:-}" _file _files

  variables_must_be_nonempty _package

  log "Deactivating ${_package}"

  _files=(
    "${prefix_path}/${_package}/active"
    "/etc/ld.so.profile.d/${_package}.conf"
    "/etc/profile.d/${_package}.sh"
  )

  for _file in $"${_files[@]}"
  do
    if file_exists "${_file}"
    then
      remove_files "${_file}"
    fi
  done
}

#
# ## package_activate_if_first
#
# Activates the package version , if another package version has not yet been
# activated.
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# none.
#
# ##### Environmental effects
#
# Active symlinks will be added to the filesystem if it is the first version
# installed.
#
# ##### Return Codes
#
# 0 for success.
#
# ##### Failure Scenarios
#
# Errors halting program if deactivating fails for any reason.
#
# ##### Usage Examples
#
# Example Usage:
#
# user$ package_activate_if_first
#
# ##### Notes
#
package_activate_if_first()
{
  local _package="${1:-}" _version="${2:-}"

  variables_must_be_nonempty _package _version

  if directory_exists "${install_path}"
  then
    symlink_exists "${prefix_path}/${_package}/active" ||
      package_activate "${_package}" "${_version}"
  else
    log "'${install_path}' not found, skipping activation."
  fi
}

#
# ## package_ldconfig
#
# Sets up system level ldconfigs for the package libraries.
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# none.
#
# ##### Environmental effects
#
# Adjusts ldconfig configuration and runs ldconfig (on linux).
#
# ##### Return Codes
#
# 0 for success.
#
# ##### Failure Scenarios
#
# Errors halting program if deactivating fails for any reason.
#
# ##### Usage Examples
#
# Example Usage:
#
# user$ package_ldconfig
#
# ##### Notes
#
package_ldconfig()
{
  local _package="${1:-${package_name}}" _path _files

  variables_must_be_nonempty _package

  directory_exists "${prefix_path}/${_package}/active/lib" ||
    return 0 # no lib/ directory for activated package, no need to update ldconfig

  # TODO: Figure out if solaris and freebsd have an analog to this?
  if user_is_root
  then
    if os_is_linux
    then
      log "Updating ldconfig for ${_package}"
      ensure_paths_exist "/etc/ld.so.conf.d"

      printf "%s\n" "${prefix_path}/${_package}/active/lib" \
        > "/etc/ld.so.conf.d/${_package}.conf"

      chmod_files 0644 "/etc/ld.so.conf.d/${_package}.conf"

      ldconfig
    elif os_is_darwin
    then # Cluster Fuck.
      true
      # This should be handled by the profile.d?
      # _files=($(find "${prefix_path}/${_package}/active" -mindepth 1 -maxdepth 1 -type d))
      # (( ${#_files[@]} > 0 )) && copy_files_to "${prefix_path}" "${_files[@]}"
    fi
  fi
}

#
# ## package_profile_d
#
# Sets up system level profile_d configuration for the package
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# none.
#
# ##### Environmental effects
#
# Updates profile_d configuration for the given package
#
# ##### Return Codes
#
# 0 for success.
#
# ##### Failure Scenarios
#
# Errors halting program if profile_d setup fails for any reason.
#
# ##### Usage Examples
#
# Example Usage:
#
# user$ package_profile_d
#
# ##### Notes
#
package_profile_d()
{
  local _package="${1:-${package_name}}"

  variables_must_be_nonempty _package

  directory_exists "${prefix_path}/${_package}/active/bin" ||
    return 0 # No bin/ dir, no need for it to be in the path.

  if user_is_root
  then
    ensure_paths_exist "/etc/profile.d"
    ensure_files_exist "/etc/profile"

    log "Updating shell profile for ${_package}"

    if os_is_darwin
    then
      if grep -v '/etc/profile.d/' /etc/profile > /dev/null 2>&1
      then
        printf "%s" 'if [ -d /etc/profile.d ]; then for profile in /etc/profile.d/*.sh ; do ' \
          >> /etc/profile

        printf "%s\n" " [ -x \"\$profile\" ] && . \"\$profile\" ; done ; unset profile ; fi" \
          >> /etc/profile
      fi
    fi

    printf "%s\n" "[ -d \"${prefix_path}/${_package}/active/bin\" ] && " \
      > "/etc/profile.d/${_package}.sh"

    printf "%s" "PATH=\"\$PATH:${prefix_path}/${_package}/active/bin\" ; export PATH; " \
      >> /etc/profile.d/${_package}.sh

    chmod_files 0755 /etc/profile.d/${_package}.sh
  fi
}

#
# ## package_uninstall
#
# Uninstalls the package
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# none.
#
# ##### Environmental effects
#
# Uninstalls the package install effects from the system.
#
# ##### Return Codes
#
# 0 for success.
#
# ##### Failure Scenarios
#
# Errors halting program if uninstall fails for any reason.
#
# ##### Usage Examples
#
# Example Usage:
#
# user$ package_uninstall
#
# ##### Notes
#
package_uninstall()
{
  variables_must_be_nonempty package_name package_version archive_format

  true "${package_dir:="${package_name}-${package_version}"}"

  package_make_uninstall ||
    error "Failed to uninstall ${package_name} from ${prefix_path}."

  log "Uninstalled ${package_name} from ${prefix_path}."
}

#
# ## package_patch
#
# Applies any patches found for the current package.
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# none.
#
# ##### Environmental effects
#
# Updates the source code directory for the package with any patches found.
#
# ##### Return Codes
#
# 0 for success.
#
# ##### Failure Scenarios
#
# Errors halting program if patching fails for any reason.
#
# ##### Usage Examples
#
# Example Usage:
#
# user$ package_patch
#
# ##### Notes
#
package_patch()
{
  local _patches _patch

  directory_exists "${extension_patches_path}" || return 0

  # TODO: Three level hierarchy based on patches/{OS}/{version},
  #       root level as 'global' always installed.

  # TODO: Test each dir for existence and skip if missing
  _patches=($(find "${extension_patches_path}" -mindepth 1 -maxdepth 1 -iname '*.patch' -type f))

  (( ${#_patches[@]} > 0 )) || return 0

  log "Applying patches for ${package_name} ${package_version}"

  package_apply_patches "${_patches[@]}"

  directory_exists "${extension_patches_path}/$(os_type)" || return 0

  _patches=($(find "${extension_patches_path}/$(os_type)" -mindepth 1 -maxdepth 1 -iname '*.patch' -type f))
  package_apply_patches "${_patches[@]}"

  directory_exists "${extension_patches_path}/$(os_type)/${package_version}" || return 0

  _patches=($(find "${extension_patches_path}/$(os_type)/${package_version}" -mindepth 1 -maxdepth 1 -iname '*.patch' -type f))

  package_apply_patches "${_patches[@]}"
}

#
# ## package_apply_patches
#
# Applies patches found
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# none.
#
# ##### Environmental effects
#
# Applies any patches found for the current package.
#
# ##### Return Codes
#
# 0 for success.
#
# ##### Failure Scenarios
#
# Errors halting program if apply_patches fails for any reason.
#
# ##### Usage Examples
#
# Example Usage:
#
# user$ package_apply_patches
#
# ##### Notes
#
package_apply_patches()
{
  local _patch _patches=("$@")

  (( ${#_patches[@]} > 0 )) || fail "Cannot apply patches as no patches were given."

  for _patch in "${_patches[@]}" ; do
    # TODO: apply the patch...
    true
  done
}

#
# ## package_usage
#
# Sets up system level usage configuration for the package
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# none.
#
# ##### Environmental effects
#
# Updates usage configuration for the given package
#
# ##### Return Codes
#
# 0 for success.
#
# ##### Failure Scenarios
#
# Errors halting program if usage setup fails for any reason.
#
# ##### Usage Examples
#
# Example Usage:
#
# user$ package_usage
#
# ##### Notes
#
package_usage() {
  printf "
  Usage:

  $0 [options]

  options:

  --prefix   - specify prefix path
  --src)     - specify source directory
  --data)    - specify data directory
  --user)    - specify user to install as
  --version) - specify version to install
  --licence) - view licence
  --help)    - view this usage information

  "
  return 0
}

#
# ## package_cli
#
# Parses package CLI arguments
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# none.
#
# ##### Environmental effects
#
# Updates cli configuration for the given package
#
# ##### Return Codes
#
# 0 for success.
#
# ##### Failure Scenarios
#
# Errors halting program if cli setup fails for any reason.
#
# ##### Usage Examples
#
# Example Usage:
#
# user$ package_cli
#
# ##### Notes
#
package_cli()
{
  local _ignored_args=()

  number_of_args=${#extension_args[@]}

  for (( index=0 ; index < $number_of_args ; index++ ))
  do
    token="${extension_args[$index]}"

    case "$token" in
      --prefix)
        prefix_path="${extension_args[$((++index))]}"
        ;;
      --src)
        src_path="${extension_args[$((++index))]}"
        ;;
      --data)
        data_path="${extension_args[$((++index))]}"
        ;;
      --user)
        package_user="${extension_args[$((++index))]}"
        ;;
      --version)
        package_version="${extension_args[$((++index))]}"
        ;;
      --base_url)
        package_base_url="${extension_args[$((++index))]}"
        ;;
      --file)
        package_file="${extension_args[$((++index))]}"
        ;;
      --directory)
        package_directory="${extension_args[$((++index))]}"
        ;;
      --archive_format)
        archive_format="${extension_args[$((++index))]}"
        ;;
      --activate|activate)
        # TODO: Throw error if parameter is not specified.
        if (( ${#extension_args[@]} > 0 ))
        then
          package_activate "${extension}" "${extension_args[$((++index))]}"
        else
          error "Cannot activate ${extension}, no version was given."
        fi
        ;;
      --deactivate|deactivate)
        package_deactivate "${extension}"
        ;;
      --md5)
        package_md5="${extension_args[$((++index))]}"
        ;;
      --licence)
        extension_license
        exit 0
        ;;
      --help)
        package_usage
        exit 0
        ;;
      --trace)
        set -o xtrace
        ;;
      *)
        _ignored_args+=("${token}")
        ;;
    esac

    (( ${#_ignored_args[@]} > 0 )) && extension_args=( "${_ignored_args[@]}" )

  done
}

#
# ## package_active
#
# Parses package active arguments
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# none.
#
# ##### Environmental effects
#
# Updates active configuration for the given package
#
# ##### Return Codes
#
# 0 for success.
#
# ##### Failure Scenarios
#
# Errors halting program if active setup fails for any reason.
#
# ##### Usage Examples
#
# Example Usage:
#
# user$ package_active
#
# ##### Notes
#
package_is_active()
{
  local _name="${1:-${package_name}}"
  [[ -n "${_name}" ]] ||
    fail "Can not query if a package is active as no package name was given or name is empty."

  local _path="${prefix_path}/${_name}"

  [[ -L "${_path}/active" ]] && [[ -d $(readlink "${_path}/active") ]]
}

#
# ## package_must be
#
# Parses package must be arguments
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# none.
#
# ##### Environmental effects
#
# Updates must be configuration for the given package
#
# ##### Return Codes
#
# 0 for success.
#
# ##### Failure Scenarios
#
# Errors halting program if must be setup fails for any reason.
#
# ##### Usage Examples
#
# Example Usage:
#
# user$ package_must be
#
# ##### Notes
#
package_must_be_active()
{
  local _name="${1:-}"
  [[ -n "${_name}" ]] ||
    fail "Can not ensure that package is active as no package name was given or name is empty."

  package_is_active "${_name}" ||
    error "Install/activate the node package extension before installing ${_name}."
}

#
# ## packages_must_be_active
#
# Parses package must_be_active arguments
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# none.
#
# ##### Environmental effects
#
# Updates must_be_active configuration for the given package
#
# ##### Return Codes
#
# 0 for success.
#
# ##### Failure Scenarios
#
# Errors halting program if must_be_active setup fails for any reason.
#
# ##### Usage Examples
#
# Example Usage:
#
# user$ packages_must_be_active
#
# ##### Notes
#
packages_must_be_active()
{
  local _package _packages="$@"

  (( "${#@}" > 0 )) ||
    fail "Can not ensure that packages are active as no packages were given."

  for _package in "${_packages[@]}"
  do
    package_must_be_active "${_package}"
  done
}
