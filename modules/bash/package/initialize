#!/usr/bin/env bash

modules filesystem system templates environment defaults

# Ensure that default values are set.
true \
  "${prefix_path:="/usr/local"}" \
  "${archive_format:=tar.gz}" \
  "${package_name:=${extension}}"

true \
  "${bin_path:="${prefix_path}/bin"}" \
  "${source_path:="${prefix_path}/src"}" \
  "${install_base_path:="${prefix_path}/${package_name}"}"

if running_as_root ; then
  true \
    "${log_path:="${prefix_path}/log"}" \
    "${data_path:="/var/db/${package_name}"}" \
    "${log_path:="/var/log/${package_name}"}" \
    "${package_user:="${package_name}"}"

else
  true \
    "${log_path:="${prefix_path}/log"}" \
    "${data_path:="${prefix_path}/.${package_name}"}" \
    "${package_user:="$USER"}"
fi

# Ensure that package_version is set at this point
variable_is_nonempty package_version || \
  read_default version prefix package

if variable_is_nonempty package_version ; then
  install_path="${install_base_path}/${package_version}"
else
  log "ERROR: package_version must be defined when using package module. \n(Hint: set version=x.y.z in the extension's config/defaults file.)"
fi

variable_is_nonempty package_base_url || \
  read_default base_url prefix package

variable_is_nonempty init_scripts_path || \
  init_scripts_path="$(init_scripts_path)"

export LDFLAGS="${LDFLAGS:-} -L${prefix_path}/lib"

export package_name prefix_path package_name package_version archive_format package_file package_url package_md5_url prefix_path bin_path source_path

