# TODO: much more error checking and conditional branching.
package_install()
{
  ensure_nonempty package_name package_version archive_format

  true "${package_dir:="${package_name}-${package_version}"}"

  ensure_paths_exist "${source_path}"

  enter "${source_path}"

  if command_exists "${package_name}_download" ; then
    "${package_name}_download"
  else
    log "Downloading ${package_name} ${package_version}"
    package_fetch
  fi

  if command_exists "${package_name}_extract" ; then
    "${package_name}_extract"
  else
    log "Extracting ${package_name} ${package_version}"
    package_extract
  fi

  enter "${package_dir}"

  if command_exists "${package_name}_patch" ; then
    "${package_name}_patch"
  else
    log "Applying any patches found for ${package_name} ${package_version}"
    package_patch
  fi

  if command_exists "${package_name}_configure" ; then
    "${package_name}_configure"
  else
    log "Configuring ${package_name} ${package_version}"
    package_configure
  fi

  if command_exists "${package_name}_build" ; then
    "${package_name}_build"
  else
    log "Building ${package_name} ${package_version}"
    package_build
  fi

  if command_exists "${package_name}_install" ; then
    "${package_name}_install"
  else
    log "Installing ${package_name} ${package_version}"

    package_make_install

    log "Installed ${package_name} ${package_version}."
  fi

  package_activate_if_first "${package_name}" "${package_version}"
}

package_uninstall()
{
  ensure_nonempty package_name package_version archive_format

  true "${package_dir:="${package_name}-${package_version}"}"

  package_make_uninstall ||
    fail "Failed to uninstall ${package_name} from ${prefix_path}."

  log "Uninstalled ${package_name} from ${prefix_path}."
}

package_fetch_md5()
{
  ensure_nonempty package_name package_version archive_format

  local download_url

  true \
    "${package_file:="${package_name}-${package_version}.${archive_format}"}" \
    "${packge_md5_url:="${package_base_url}/${package_file}.md5"}"

  package_md5=$( hash_file "$extension_config_path/md5" "${package_file}" )

  if [[ -z "${package_md5}" && -n "${package_md5_url}" ]] ; then
    curl -L "${packge_md5_url}" -o "${package_file}.md5" ||
      fail "Fetching md5 from '${package_md5_url}' failed."

    package_md5=$(cat "${package_file}.md5")
  fi

}

file_matches_md5()
{
  local file="$1" md5="$2" file_md5

  [[ -s "${file}" ]] || return 1

  if os_is_linux ; then
    command="md5sum"
  elif os_is_darwin ; then
    command="/sbin/md5 -q"
  fi

  file_md5="$($command "$file")"

  [[ "${file_md5// *}" = "$md5" ]]
}

package_fetch()
{
  ensure_nonempty package_name package_version archive_format

  true \
    "${package_file:="${package_name}-${package_version}.${archive_format}"}" \
    "${package_url:="${package_base_url}/${package_file}"}"

  package_fetch_md5

  file_matches_md5 "${package_file}" "${package_md5}" ||
  {
    log "${package_file} does not match md5 ${package_md5}"

    remove_files "${package_file}"

    curl -L "${package_url}" -o "${package_file}" ||
      fail "Downloading ${package_name} from '${package_url}' to '${package_file}' failed "
  }
}

package_extract()
{

  case "${archive_format}" in
    tar.gz|tgz) # gzip
      tar zxf "${package_file}"
      ;;
    xz) # LZMA
      tar Jxf "${package_file}"
      ;;
    tar.bz2) # bzip
      tar jxf "${package_file}"
      ;;
    zip)
      unzip "${package_file}" -C ${source_path}
      ;;
    *)
      fail "Unknown archive format for ${package_file}"
      ;;
  esac
}

package_configure()
{
  local command

  if [[ -n ${configure_command:-} ]] ; then
    command="${configure_command}"
  else
    export PREFIX="${install_base_path}/${package_version}"

    command="./configure ${configure_flags[@]:-"--prefix=${install_path:-$prefix_path}"}"

    if [[ ! -x ./configure ]] ; then
      log "./configure not found or not executable, skipping configuration step."
      return 0
    fi
  fi

  ${command} > configure.log 2>&1 ||
    fail "Configuration of ${package_name} ${package_version} failed, seek help..."

  log "Configuration of ${package_name} ${package_version} successful."
}

package_build()
{ # TODO: make this robust, -j4 for example.
  local command

  if [[ -n ${make_command:-} ]] ; then
    command="${make_command}"
  else
    command="make ${make_flags[@]:-"-j$(os_cpu_count)""}"
  fi

  ${command} > make.log 2>&1 ||
    fail "Compilation if ${package_name} ${package_version} failed! "
}

package_make_install()
{ # TODO: make this robust
  local command

  if [[ -n ${make_command:-} ]] ; then
    command="${make_command}"
  else
    command="make ${make_install_flags[@]:-install}"
  fi

  ${command} > make.install.log 2>&1 ||
    fail "Failed to make install of ${package_name} ${package_version} failed! "

  log "Installation of ${package_name} ${package_version} was successful! "
}

package_uninstall()
{ # TODO: make this robust
  local command

  if [[ -n ${make_uninstall_command:-} ]] ; then
    command="${make_uninstall_command}"
  else
    command="make ${make_uninstall_flags[@]:-uninstall}"
  fi

  ${command} > make.uninstall.log 2>&1 ||
    fail "make uninstall ${package_name} ${package_version} failed! "
}

package_clean_install_files()
{
  log "#cleaning install files for ${package} ${package_version}...\n"

  enter "${src_path}"

  local files=($(
  find "$src_path/" -mindepth 1 -maxdepth 1 -iname "${package}*${package_version}*"
  ))

  remove_files "${files[@]}"
}

package_activate()
{
  local _package="${1:-}" _version="${2:-}"

  ensure_nonempty _package

  variable_is_nonempty _version ||
    fail "Variable must be specified as the 2nd parameter!"

  package_deactivate "${_package}"

  link "${prefix_path}/${_package}/${_version}" \
    to "${prefix_path}/${_package}/active"

  package_ldconfig "${_package}"

  package_profile_d "${_package}"

  # TODO: package_conf_d, detect if ext template file exists and put it in place.
}

package_deactivate()
{
  local _package="${1:-}"

  ensure_nonempty _package

  symlink_exists "${prefix_path}/${_package}/active" &&
    remove_files "${prefix_path}/${_package}/active"

  file_exists "/etc/ld.so.profile.d/${_package}.conf" &&
    remove_files "/etc/ld.so.profile.d/${_package}.conf"

  file_exists "/etc/profile.d/${_package}.sh" &&
    remove_files "/etc/profile.d/${_package}.sh"
}

package_activate_if_first()
{
  local _package="${1:-}" _version="${2:-}"

  ensure_nonempty _package _version

  symlink_exists "${prefix_path}/${_package}/active" ||
    package_activate "${_package}" "${_version}"
}

package_ldconfig()
{
  local _package="${1:-}" _path _files

  ensure_nonempty _package

  directory_exists "${prefix_path}/${_package}/active/lib" ||
    return 0 # no lib/ directory for activated package, no need to update ldconfig

  # TODO: Figure out if solaris and freebsd have an analog to this?
  if running_as_root ; then
    if os_is_linux ; then
      ensure_paths_exist "/etc/ld.so.profile.d"

      printf "%s\n" "${prefix_path}/${_package}/active/lib" \
        > "/etc/ld.so.profile.d/${_package}.conf"

      chmod_file 0644 "/etc/ld.so.profile.d/${_package}.conf"

      ldconfig
    elif os_is_darwin ; then # Cluster Fuck.
      _files=($(find "${prefix_path}/${_package}/active" -mindepth 1 -maxdepth 1 -type d))

      copy_files_to "${prefix_path}" "${_files[@]}"

      # for _path in "${_files[@]}" ; do
      #   cp -Rf "${_path}" "${prefix_path}/"
      # done
    fi
  fi
}

package_profile_d()
{
  local _package="${1:-}"

  ensure_nonempty _package

  directory_exists "${prefix_path}/${_package}/active/bin" ||
    return 0 # No bin/ dir, no need for it to be in the path.

  if running_as_root ; then

    ensure_paths_exist "/etc/profile.d"
    ensure_files_exist "/etc/profile"

    if os_is_darwin ; then

      if grep -v '/etc/profile.d/\*' /etc/profile >/dev/null 2>&1 ; then

        echo 'if [ -d /etc/profile.d ]; then for profile in /etc/profile.d/*.sh ; do ' \
          >> /etc/profile

        printf "%s\n" " [ -x \"$profile\" ] && . \"$profile\" ;\n  done ;\n unset profile ;\n fi" \
          >> /etc/profile
      fi

    fi

    printf "%s\n" "[ -d \"${prefix_path}/${_package}/active/bin\" ] && " \
      > "/etc/profile.d/${_package}.sh"

    printf "%s" "PATH=\"\$PATH:${prefix_path}/${_package}/active/bin\" ; export PATH; " \
      >> /etc/profile.d/${_package}.sh

    chmod_file 0755 /etc/profile.d/${_package}.sh
  fi
}

package_patch()
{
  local _patches _patch
  # TODO: Three level hierarchy based on patches/{OS}/{version},
  #       root level as 'global' always installed.

  _patches=(
    $(find "${extension_patches_path}" -mindepth 1 -maxdepth 1 -iname '*.patch' -type f)
    $(find "${extension_patches_path}/$(os_type)" -mindepth 1 -maxdepth 1 -iname '*.patch' -type f)
    $(find "${extension_patches_path}/$(os_type)/${package_version}" -mindepth 1 -maxdepth 1 -iname '*.patch' -type f)
  )

  for _patch in "${_patches[@]}" ; do
    true
  done
}


