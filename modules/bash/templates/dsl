#!/usr/bin/env bash

#
# ### template_exists()
#
# Checks if a named template file exists in the extension_templates_path
#
# ##### Input Parameters
#
# First parameter must be the name of a template file, eg. a string.
#
# ##### Stream Outputs
#
# None.
#
# ##### Return Codes
#
# 0 if the named template file exists and is nonempty.
# 1 if the named template file does not exist or is empty.
#
# ##### Failure Scenarios
#
# Fails if no template name is given.
#
# ##### Usage Examples
#
#     user$ {{ setup the scenario }}
#     user$ function_name {{ parameters }}
#     user$ {{ demonstrate the results}}
template_exists()
{
  local _template="${extension_templates_path}/${1}.template"

  [[ -n "${_template}" ]] ||
    fail "Cannot check if a template exists as no template name was given."

  [[ -s "${_template}" ]]
}

#
# ### install_template()
#
# Installs a named template to a given location.
#
# ##### Input Parameters
#
# The first parameter should be the template name.
# Remaining parameters specify the target, mode and owner:
#   owner "<<user>>[:<<group>>]"
#   mode 0755
#   to "/path/to/new/file"
#
# ##### Stream Outputs
#
# None.
#
# ##### Return Codes
#
# 0 if successful
# 1 otherwise
#
# ##### Failure Scenarios
#
# Fails if no template name was given.
# Fails if the template name given is a directory.
#
# ##### Usage Examples
#
#     user$ install_template "nginx.conf" \
#           to "${nginx_path}/nginx.conf" \
#           mode 0644 owner "${nginx_user}"
#
install_template()
{
  local _template _name _target _source _mode=0644 _owner=$USER

  while (( $# > 0 )) ; do
    token="${1}" ; shift

    case "${token}" in
      to)
         _target="$1" ; shift
        ;;

      mode)
         _mode="$1" ; shift
        ;;

      owner)
         _owner="$1" ; shift
        ;;

      from) # TODO: finish this part.
         _source="$1" ; shift
        ;;

      *)
        if [[ -z "${_name}" ]] ; then
          _name="$token"
        elif [[ -z "${_target}" ]] ; then
          _target="$token"
          break # When we have a target we are done.
          # An alternative idea would be to allow an array of multiple targets
          # to symlink to...
        fi
        ;;
    esac
  done

  if file_exists "${_name}"
  then
    _template="${_name}"
  elif file_exists "${extension_templates_path}/${_name}"
  then
    _template="${extension_templates_path}/${_name}"
  else
    _template="${extension_templates_path}/${_name}.template"
  fi

  ensure_paths_exist "$(dirname "${_target}")"

  [[ -f "${_template}" ]] ||
    fail "Cannot install template as the template file '${_template}' is missing.'"

    if [[ -d "${_target}" ]]
    then
      if [[ -d "${_target}/${_name}" ]]
      then
        fail "${_target}/${_name} is a directory, cannot install template ${_name}"
      else
        cp -f "${_template}" "${_target}/${_name}"
        [[ -n "${_mode:-}" ]]       && chmod "${_mode}" "${_target}/${_name}"
        [[ -n "${_owner:-}" ]]      && chown "${_owner}" "${_target}/${_name}"
      fi
    else
      cp -f "${_template}" "${_target}"
      [[ -n "${_mode:-}" ]]       && chmod "${_mode}" "${_target}"
      [[ -n "${_owner:-}" ]]      && chown "${_owner}" "${_target}"
    fi
}

#
# ### seed_template()
#
# Seed a template file replacing all given keys with given values.
#
# ##### Input Parameters
#
# First parameter must be the template filename to seed.
# Remaining parameters must come in pairs, the first of each pair specifies
# the key to search and replace in the template file and the second is the
# value to replace {{$key}} with.
#
# ##### Stream Outputs
#
# None.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# Fails if no template filename is given.
# Fails if the template given does not exist.
# Fails if no key/value pairs are given.
# Fails if for every key there is no associated value.
# Fails if the intermediate template file does not exist...
#
# ##### Usage Examples
#
#    user$ seed_template "/etc/conf.d/${extension}.conf" \
#      prefix_path "${prefix_path}" \
#      init_scripts_path "${init_scripts_path}" \
#      modules_path "${modules_path}" \
#      data_path "${data_path}" \
#      confd_path "${confd_path}" \
#      extension "${extension}"
#
seed_template()
{
  local _template="${1:-}"

  if [[ -n "${_template}" ]]
  then
    fail "Can not seed template as no template was given."
  else
    shift
  fi

  local _args="$@" _strings=()

  [[ -f "${_template}" ]] ||
    fail "Can not seed template template file '${_template}' does not exist."

  (( ${#_args[@]} > 0 ))  || fail "No replacement keys specified, cannot seed template '${_template}'."
  ((  (${#_args[@]} % 2) == 0 )) || fail "Every replacement key must have a replacement value."

  warn "Template Seeding (replacing defaults) has not yet been fully implemented."

  # Aggregate the replacement strings.
  for (( index=0 ; index < ${#_args[@]} ; index++ ))
  do
    _strings+=(" -e 's#${_args[${index}]}#${_args[$((++index))]}#g' ")
  done

  # Filter the template with the replacments.
  sed ${_strings[@]} ${_template} >> ${_template}.${timestamp}

  if file_exists "${_template}.${timestamp}"
  then
    mv -f "${_template}.${timestamp}" "${_template}"
  else
    fail "Something went horribly wrong, the template intermediate file '${_template}.${timestamp}' does not exist."
  fi
}

