#!/usr/bin/env bash

#
# ## function_name
#
# Function Description
#
# ### Input Parameterss
#
# Positional Parameter listing and descriptions.
#
# ### Stream Outputs
#
# What gets printed to STDOUT and STDERROR. 'None.' if nothing is output.
#
# ### Return Codes
#
# 0 if ...
# 1 if ...
#
# ### Failure Scenarios
#
# Fails if ...
#
# ### Usage Examples
#
#     user$ {{ setup the scenario }}
#     user$ function_name {{ parameters }}
#     user$ {{ demonstrate the results}}
template_exists()
{
  local _template="${extension_templates_path}/${1}.template"

  [[ -s "${_template}" ]]
}

#
# ## function_name
#
# Function Description
#
# ### Input Parameterss
#
# Positional Parameter listing and descriptions.
#
# ### Stream Outputs
#
# What gets printed to STDOUT and STDERROR. 'None.' if nothing is output.
#
# ### Return Codes
#
# 0 if ...
# 1 if ...
#
# ### Failure Scenarios
#
# Fails if ...
#
# ### Usage Examples
#
#     user$ {{ setup the scenario }}
#     user$ function_name {{ parameters }}
#     user$ {{ demonstrate the results}}
install_template()
{
  local _template _name _target _source _mode=0644 _owner=$USER

  while (( $# > 0 )) ; do
    token="${1}" ; shift

    case "${token}" in
      to)
         _target="$1" ; shift
        ;;

      mode)
         _mode="$1" ; shift
        ;;

      owner)
         _owner="$1" ; shift
        ;;

      from) # TODO: finish this part.
         _source="$1" ; shift
        ;;

      *)
        if [[ -z "${_name}" ]] ; then
          _name="$token"
        elif [[ -z "${_target}" ]] ; then
          _target="$token"
          break # When we have a target we are done.
          # An alternative idea would be to allow an array of multiple targets
          # to symlink to...
        fi
        ;;
    esac
  done

  if file_exists "${_name}"
  then
    _template="${_name}"
  else
    _template="${extension_templates_path}/${_name}.template"
  fi

  ensure_paths_exist "$(dirname "${_target}")"

  if [[ -f "${_template}" ]]
  then
    if [[ -d "${_target}" ]]
    then
      if [[ -d "${_target}/${_name}" ]]
      then
        fail "${_target}/${_name} is a directory, cannot install template ${_name}"
      else
        cp -f "${_template}" "${_target}/${_name}"
        [[ -n "${_mode:-}" ]]       && chmod "${_mode}" "${_target}/${_name}"
        [[ -n "${_owner:-}" ]]      && chown "${_owner}" "${_target}/${_name}"
      fi
    else
      cp -f "${_template}" "${_target}"
      [[ -n "${_mode:-}" ]]       && chmod "${_mode}" "${_target}"
      [[ -n "${_owner:-}" ]]      && chown "${_owner}" "${_target}"
    fi
  else
    fail "Template missing: #{_template}"
  fi
}

#
# ## function_name
#
# Function Description
#
# ### Input Parameterss
#
# Positional Parameter listing and descriptions.
#
# ### Stream Outputs
#
# What gets printed to STDOUT and STDERROR. 'None.' if nothing is output.
#
# ### Return Codes
#
# 0 if ...
# 1 if ...
#
# ### Failure Scenarios
#
# Fails if ...
#
# ### Usage Examples
#
#     user$ {{ setup the scenario }}
#     user$ function_name {{ parameters }}
#     user$ {{ demonstrate the results}}
seed_template()
{
  local _template="${1:-}"

  if [[ -n "${_template}" ]]
  then
    fail "Can not seed template as no template was given."
  else
    shift
  fi

  local _args="$@" _strings=()

  [[ -f "${_template}" ]] ||
    fail "Can not seed template template file '${_template}' does not exist."

  (( ${_args} > 0 ))  || fail "Arguments not specified, cannot seed template '${_template}'."
  ((  (5 % 2) == 0 )) || fail "An even number of arguments must be given."

  warn "Template Seeding (replacing defaults) has not yet been fully implemented."

  # Aggregate the replacement strings.
  for (( index=0 ; index < ${#_args[@]} ; index++ ))
  do
    _strings+=(" -e 's#${_args[${index}]}#${_args[$((++index))]}#g' ")
  done

  # Filter the template with the replacments.
  sed ${_strings[@]} ${_template} >> ${_template}.${timestamp}

  if file_exists "${_template}.${timestamp}"
  then
    mv -f "${_template}.${timestamp}" "${_template}"
  else
    fail "Something went horribly wrong, the template intermediate file '${_template}.${timestamp}' does not exist."
  fi
}

