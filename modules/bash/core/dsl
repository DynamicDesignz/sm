#!/usr/bin/env bash

bdsm_path()
{
  if [[ $UID -eq 0 ]] ; then
    true "${prefix:=/usr/local}"
  else
    true "${prefix:=$HOME}"
  fi

  if [[ "$prefix" = "$HOME" ]] ; then
    true "${bdsm_path:="${prefix}bdsm"}"
  else
    true "${bdsm_path:="${prefix}/bdsm"}"
  fi
}

bdsm_exports()
{
  export action archives_path bdsm_path branch config_path database database_name debug_flag environment error_message extension extension_action extension_args extension_bin_path extension_config_path extension_modules_path extension_path extension_templates_path extensions_path flags framework head_flag hooks_flag keep_releases modules_path old_releases parse_break paths prefix previous_path project project_path release_path remote repository result revision shared_path src_path templates_path timestamp tmp_path trace_flag user extension_log_path
  # TODO: Filter this list of exports down.
}

bdsm_set_trap()
{
  trap backtrace ERR
  # trap "result=$? ; [[ -e ${tmp_path}/$$ ]] && rm -rf '${tmp_path}/$$; exit $result' >/dev/null 2>&1" 0 1 2 3 15
}

modules()
{
  local _module _bdsm _extension _path _file _modules=("$@")

  [[ ${#_modules[@]} -gt 0 ]] || fail "No modules specified to load."

  for _module in "${_modules[@]}" ; do
    _bdsm="${modules_path}/bash/${_module}"
    _extension="${extension_modules_path}/bash/${_module}"

    for _path in "${_bdsm}" "${_extension}" ; do
      for _file in dsl initialize cli ; do
        if [[ -s "${_path}/${_file}" ]] ; then
          source "${_path}/${_file}"
        fi
      done
    done
  done
}

load()
{
  local _file _files=("$@")

  for _file in "${_files[@]}" ; do
    source_files "${extension_modules_path:-"$modules_path"}/bash/${_file}"
  done
}

actions_for_extension() {
  local _extension="${1:-}"
  (
  if [[ -n "${_extension}" ]] ; then
    directory_exists "$extensions_path/${_extension}/bin" || return 0

    actions=($(
      find "$extensions_path/${_extension}/bin" -mindepth 1 -maxdepth 1 -type f
    ))

    executables=()
    for action in "${actions[@]}" ; do
      [[ -x "${action}" ]] && \
        executables[${#executables[@]}]="${action//*\/}"
    done
    executables="${executables[@]}"
    printf "${executables}"
  fi
  )
}

version()
{
  read -r bdsm_version < "$bdsm_path/VERSION"
  log "\nbdsm ${bdsm_version:-"?.?.?"} https://bdsm.beginrescueend.com/ by Wayne E. Seguin (wayneeseguin@gmail.com)\n"
}

usage()
{
  version
  extension_action "bdsm" "help"
}

# TODO: Extract fetch dsl into it's own DSL module
fetch()
{
  # TODO: allow either curl or wget, defaulting to curl...
  command_exists curl ||
    fail "bdsm requires curl, which was not found in the PATH :(\nPlease install curl and try again."

  fetch_command="$fetch_command -O -L --create-dirs -C - " # -s for silent
  (
  enter "$archives_path"

  [[ -n "${1:-}" ]] || fail "BUG: $0 called without an argument :/"

  archive=$(basename "$1")
  download=1

  debug "Fetching $archive"

  # Check first if we have the correct archive
  if file_exists "$archive" && file_exists "$archive.md5" ; then
    debug "Found archive and its md5, testing correctness"

    if [[ $(md5sum --status -c "$archive.md5") -gt 0 ]] ; then
      debug "Archive is bad, downloading"
      download=1
    else
      debug "Archive is good, not downloading"
      download=0
      result=0
    fi
  else
    debug "No '${archive}' does not exist or does not match md5, downloading"
    download=1
  fi

  if [[ $download -gt 0 ]] ; then
    if ! eval $fetch_command "$1" ; then
      retry=0
      if [[ $result -eq 78 ]] ; then
        error "The requested url does not exist: '$1'"
      elif [[ $result -eq 18 ]] ; then
        error "Only a part of the file was transferred. Removing and re-trying."
        rm -f "$archive"
        retry=1
      elif [[ $result -eq 33 ]] ; then
        debug "Remote server does not support 'range' command, removing '$archive'"
        rm -f "$archive"
        retry=1
      else
        error "There was an error, please check $log_path/*.error.log"
      fi

      if [[ $retry -eq 1 ]] ; then
        if ! eval $fetch_command "$1" ; then
          error "There was an error, please check $log_path/*.error.log"
        fi
      fi
    fi
  fi
  )

  return $0
}

fetch_version()
{
  version=$(curl -B "${releases_url}/latest-version.txt" 2>/dev/null)
}

fetch_md5()
{
  md5=$(curl -B "${releases_url}/bdsm-${version}.tar.gz.md5" 2>/dev/null)
}

md5_match()
{
  local archive="$1"

  # TODO: switch this to using system module's os_* DSL
  case "$(uname)" in
    Darwin|FreeBSD)
      archive_md5="$(/sbin/md5 -q "${archive}")"
      ;;

    OpenBSD)
      archive_md5="$(/bin/md5 -q "${archive}")"
      ;;

    Linux|*)
      archive_md5="$(md5sum "${archive}" | awk '{print $1}')"
      ;;
  esac

  [[ "$archive_md5" == "$md5" ]]

  return $?
}

install_release()
{
  archive="$archives_path/bdsm-${version}.tar.gz"

  fetch_md5

  if file_exists "${archive}" && ! md5_match ; then
    # Remove old installs, if they exist and have incorrect md5.
    file_exists "$archives_path/bdsm-${version}.tar.gz" &&
      rm -f "$archives_path/bdsm-${version}.tar.gz"
  fi

  curl -L "${releases_url}/bdsm-${version}.tar.gz" -o "$archive"

  md5_match "$archive" ||
    fail "ERROR:

Archive package downloaded does not match it's calculated md5 checksum ${md5}:

  $archives_path/bdsm-${version}.tar.gz

Retry the installation and/or check your networking setup.

Halting installation.
"

  tar zxf "${archives_path}/bdsm-${version}.tar.gz" -C "$src_path/"

  enter "$src_path/bdsm-${version}"
}

install_head()
{
  local remote="origin"

  if directory_exists "${src_path}/bdsm/.git" ]] ; then

    enter "${src_path}/bdsm/"

    if [[ -z "$(git branch | awk "/$branch$/")" ]] ; then
      git checkout -b "$branch" --track "$remote/$branch" 2>/dev/null ||
        fail "$remote $branch remote branch not found."

    elif [[ -z "$(git branch | awk "/\* $branch$/{print \$2}")" ]] ; then

      git checkout $branch 2>/dev/null ||
        fail "Unable to checkout $branch.\nCould not get head. Sucks to be you... or rather... doesn't suck :-p"
    fi

    git pull --rebase origin $branch

  else
    enter "${src_path}"

    if ! git clone --depth 1 git://github.com/wayneeseguin/bdsm.git ; then
      git clone https://github.com/wayneeseguin/bdsm.git ||
        fail "Unable to clone the BDSM repository, attempted both git:// and https://\nCould not get head, terribly sorry about the blue balls :("
    fi
  fi

  log "Ahh... that's better...\nIt always feels so nice to get head.\nQuite a load this time eh?\nRemember to get head often!\n"

  enter "${src_path}/bdsm/"
}

# Source bdsmrc files, cascaded.
bdsmrc()
{
  source_files "/etc/bdsmrc" "$HOME/.bdsmrc"
}
