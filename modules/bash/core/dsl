#!/usr/bin/env bash

bdsm_path()
{
  if [[ $UID -eq 0 ]] ; then
    true "${prefix:=/usr/local}"
  else
    true "${prefix:=$HOME}"
  fi

  if [[ "$prefix" = "$HOME" ]] ; then
    true "${bdsm_path:="${prefix}bdsm"}"
  else
    true "${bdsm_path:="${prefix}/bdsm"}"
  fi
}

bdsm_exports()
{
  export action archives_path bdsm_path branch config_path database database_name debug_flag environment error_message extension extension_action extension_args extension_bin_path extension_config_path extension_modules_path extension_path extension_templates_path extensions_path flags framework head_flag hooks_flag keep_releases modules_path old_releases parse_break paths prefix previous_path project project_path release_path remote repository result revision shared_path src_path templates_path timestamp tmp_path trace_flag user extension_log_path
  # TODO: Filter this list of exports down.
}

modules()
{
  local _module _bdsm _extension _path _file _modules=("$@")

  [[ ${#_modules[@]} -gt 0 ]] || fail "No modules specified to load."

  for _module in "${_modules[@]}" ; do
    _bdsm="${modules_path}/bash/${_module}"
    _extension="${extension_modules_path}/bash/${_module}"

    for _path in "${_bdsm}" "${_extension}" ; do
      for _file in dsl initialize cli ; do
        if [[ -s "${_path}/${_file}" ]] ; then
          source "${_path}/${_file}"
        fi
      done
    done
  done
}

load()
{
  local _file _files=("$@")

  for _file in "${_files[@]}" ; do
    source_files "${extension_modules_path:-"$modules_path"}/bash/${_file}"
  done
}

actions_for_extension() {
  local _extension="${1:-}" _path="$extensions_path/${_extension}/bin"

  [[ -n "${_extension}" ]] ||
    fail "Cannot list actions for extension as no extension was given."

  directory_exists "${_path}" || return 0

  local _files=($(find "${_path}" -mindepth 1 -maxdepth 1 -type f))
  local _file _actions=()

  for _file in "${_files[@]}" ; do
    [[ -x "${_file}" ]] && _actions+=("${_file//*\/}")
  done

  _actions="${_actions[@]}" # Convert from array to string.

  printf "${actions}"
}

# Source bdsmrc files, cascaded.
bdsmrc()
{
  source_files "/etc/bdsmrc" "$HOME/.bdsmrc"
}

