#!/usr/bin/env bash

#
# parse CLI arguments
#
set +o nounset
set +o noclobber

while (( $# > 0 ))
do
  token="$1"
  shift

  case "$token" in
    # TODO: extension detection "did you mean"

    # TODO: Fall back on default actions instead of specifying them here
    #       In case the user has set their default serfice in the environment.

    -*)
      case "$token" in
        --disable-hooks)
          hooks_flag=0
          ;;

        --project)
          project="$1"
          shift
          ;;

        --environment)
          environment="$1"
          shift
          ;;

        --repo|repository)
          repository="$1"
          shift
          ;;

        --revision)
          revision="$1"
          shift
          ;;

        --user)
          user="$1"
          shift
          ;;

        --head)
          head_flag=1
          ;;

        --debug)
          true ${debug_flag:=0} $(( debug_flag++ ))
          enable_debug
          ;;

        --help)
          action="help"
          extension="${1:-core}"
          parse_break=1
          ;;

        -v|--version)
          extension="core"
          action="version"
          ;;

        --trace)
          true ${trace_flag:=0} $(( trace_flag++ ))
          enable_trace
          ;;

        --) extension_args=("$@") # Stop processing arguments.
          ;;
        *)
          error "Unknown flag '${token}'"
          ;;
      esac
      ;;

    *)
      if [[ -z "$extension" ]] ; then
        if [[ -d "$extensions_path/$token" ]] ; then
          extension="$token"
          continue
        else
          case "$token" in
            list|ls)
              extension="ext"
              action="list"
              extension_args=("$@")
              parse_break=1
              ;;

            bdsmrc)
              extension="core"
              action="$token"
              extension_args=("${action}" "$@")
              parse_break=1
              ;;

            docopen)
              extension="core"
              action="docopen"
              parse_break=1
              ;;

            help)
              action="help"
              extension="${1:-core}"
              parse_break=1
              ;;

            get|version)
              extension="core"
              action="${token}"
              extension_args=("$@")
              parse_break=1
              ;;

            activate|enable)
              extension="ext"
              action="package"
              extension_args=("activate" "$@")
              parse_break=1
              ;;

            deactivate|disable)
              extension="ext"
              action="package"
              extension_args=("deactivate" "$@")
              parse_break=1
              ;;

            add|extend)
              extension="ext"
              action="extend"
              extension_args=("$@")
              parse_break=1
              ;;

            ext|extension|extensions)
              extension="ext"
              action="${1:-help}"
              extension_args=("$@")
              parse_break=1
              ;;

            mod|module|modules)
              extension="mod"
              action="${1:-list}"
              extension_args=("$@")
              parse_break=1
              ;;

            srv|service|services)
              extension="srv"
              action="${1:-list}"
              extension_args=("$@")
              parse_break=1
              ;;

            pkg|package|packages)
              extension="pkg"
              action="${1:-list}"
              extension_args=("$@")
              parse_break=1
              ;;

            edit|open|update|create)
              extension="ext"
              action="${token}"
              extension_args=("$@")
              parse_break=1
              ;;

            *)
              [[ -z "${extension}" ]] ||
                error "Extension '${token}' not found"
              ;;
          esac
        fi
      fi

      if (( parse_break == 1 ))
      then
        break
      fi

      if [[ -z "${action:-}" ]]
      then
        if [[ -x "${extensions_path}/${extension}/bin/$token" ]]
        then
          action="$token"
          extension_args=("$@")
          parse_break=1
        fi
      elif [[ -d "/data/$token" ]]
      then
        project="$token"
        project_path="/data/$token"
      elif [[ -d "/home/$token" ]]
      then
        project="$token"
        project_path="/home/$token"
      fi
      ;;
  esac

  if [[ -n "$parse_break" || -n "$error_message" ]]
  then
    unset parse_break
    break
  fi

done

if [[ -z "${action:-}" && -x "${extensions_path}/${extension}/bin/${extension}" ]]
then # A default action has the same name as the extension.
  action="${extension}"
fi

