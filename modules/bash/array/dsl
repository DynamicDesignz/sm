#!/usr/bin/env bash

#
# ### array_is_nonempty()
#
# Checks to see if an array with the name given as the first parameter is nonempty.
#
# ##### Input Parameters
#
# The first parameter is the name of the array variable.
#
# ##### Stream Outputs
#
# None.
#
# ##### Return Codes
#
# 0 if the array is non-empty.
# 1 if the array is empty.
#
# ##### Failure Scenarios
#
# Fails if the array name, the first parameter, is not given.
#
# ##### Usage Examples
#
#     user$ the_array=(1 2 3 4 5)
#     user$ array_is_nonempty the_array
#     user$ echo $?
#     0
#
#     user$ the_array=()
#     user$ array_is_nonempty the_array
#     user$ echo $?
#     1
#
array_is_nonempty()
{
  local _array_name="$1"

  variable_is_nonempty _array_name ||
    fail "Cannot push onto array as an array name was not given."

  eval "(( \${#${_array_name}[@]} > 0 ))"
}

#
# ### array_length()
#
# Return the length of the given array.
#
# ##### Input Parameters
#
# First parameter is the name of the array variable.
#
# ##### Stream Outputs
#
# Prints the length of the named array to the STDOUT stream of the calling
# environment.
#
# ##### Return Codes
#
# returns 0
#
# ##### Failure Scenarios
#
# Fails if the array name, first parameter, is not given.
#
# ##### Usage Examples
#
#     user$ the_array=(1 2 3 4 5)
#     user$ array_length the_array
#     5
#
array_length()
{
  local _array_name="$1"

  variable_is_nonempty _array_name ||
    fail "Cannot push onto array as an array name was not given."

  eval "printf \"%s\\n\"\"\${#${_array_name}[@]}\""
}

#
# ### array_last_element()
#
# Print the last element of the given array.
#
# ##### Input Parameters
#
# First parameter is the name of the array variable.
#
# ##### Stream Outputs
#
# Prints the last element of the named array to the STDOUT stream of the
# calling environment.
#
# ##### Failure Scenarios
#
# Fails if the array name, first parameter, is not given.
#
# ##### Return Codes
#
# 0 denoting success
#
# ##### Usage Examples
#
#     $ the_array=(one two three four five)
#     $ array_last_element the_array
#     five
#
array_last_element()
{
  local _array_name="$1" _length

  variable_is_nonempty _array_name ||
    fail "Cannot push onto array as an array name was not given."

  eval "_length=\${#${_array_name}[@]}"

  eval "printf \"%s\\n\"\"\${${_array_name}[${_length}]}\""
}

#
# ### array_first_element()
#
# Print the first element of the given array.
#
# ##### Input Parameters
#
# First parameter is the name of the array variable.
#
# ##### Stream Outputs
#
# Prints the first element of the named array to the STDOUT stream of the
# calling environment.
#
# ##### Return Codes
#
# 0 denoting success
#
# ##### Failure Scenarios
#
# Fails if the array name, the first parameter, is not given.
#
# ##### Usage Examples
#
#     $ the_array=(one two three four five)
#     $ array_first_element the_array
#     one
#
array_first_element()
{
  local _array_name="$1" _length

  variable_is_nonempty _array_name ||
    fail "Cannot push onto array as an array name was not given."

  eval "printf \"%s\\n\" \"\${${_array_name}[0]}\""
}

#
# ### array_push()
#
# Appends one or more elements to the array with the given name.
#
# ##### Input Parameters
#
#   The first parameter is the name of the array variable.
#   Remaining parameters are the elements to be appended to the array.
#
# ##### Stream Outputs
#
#   None.
#
# ##### Returns
#
#   0 denoting success
#
# ##### Failure Scenarios
#
# Fails if the array name, the first parameter, is not given.
# Fails if no elements were given (second paramater and beyond).
#
# ##### Usage Examples
#
#     $ the_array=(1 2 3 4 5)
#     $ array_length the_array
#     5
#
array_push()
{
  local _array_name="$1"
  shift

  variable_is_nonempty _array_name ||
    fail "Cannot push elements onto array as an array name was not given."

  eval "(( \${#${_array_name}[@]} > 0 ))"

  local _element _elements=("$@")

  (( ${#_elements[@]} > 0 )) ||
    fail "Cannot push elements onto array as no elements were given."

  for _element in "${_elements[@]}"
  do
    eval "${_array_name}+=(\${_element})}"
  done
}

#
# ### array_append()
#
# Return the length of the given array.
#
# ##### Input Parameters
#
# The first parameter is the name of the array variable.
# Remaining parameters are the elements to append to the end of the array.
#
# ##### Stream Outputs
#
# None.
#
# ##### Returns
#
# 0 denoting success
#
# ##### Failure Scenarios
#
# Fails if the array name, the first parameter, is not given.
# Fails if no elements were given to append to the array.
#
# ##### Usage Examples
#
#     user$ the_array=(1)
#     user$ array_append the_array 2 3 4 5
#     user$ array_join the_array # print the contents of the array, space separated.
#     1 2 3 4 5
#
array_append()
{
  local _array_name="$1"

  variable_is_nonempty _array_name ||
    fail "Cannot push onto array as an array name was not given."

  shift
  local _element _elements=("$@")

  (( ${#_elements[@]} > 0 )) ||
    fail "Cannot push elements onto array as no elements were given."

  for _element in "${_elements[@]}"
  do
    eval "${_array_name}+=(\${_element})}"
  done
}

#
# ### array_length()
#
# Return the length of the given array.
#
# ##### Input Parameters
#
#   The first parameter is the name of the array variable.
#
# ##### Stream Outputs
#
#   Prints the length of the named array to the STDOUT stream of the calling environment.
#
# ##### Usage Examples
#
#     $ the_array=(1 2 3 4 5)
#     $ array_length the_array
#     5
#
array_shift()
{
  local _array_name="$1" ; shift

  variable_is_nonempty _array_name ||
    fail "Cannot push onto array as an array name was not given."

  fail "array_shift() has not yet been implemented for the array module."
}

#
# ### array_unshift()
#
#   Prepends one or more elements to the array whose name is given, in the order
#   given.
#
# ##### Input Parameters Parameters
#
#   The first parameter is the name of the array variable.
#   Remaining parameters are the elements to prepend to the array.
#
# ##### Stream Outputs
#
#   None.
#   Yields a failure message if no array name was given.
#   Yields a failure message if no elements were given to unshift.
#
# ##### Return Codes
#
#   0 denoting success
#
# ##### Usage Examples
#
#     $ the_array=(2 3 4 5)
#     $ array_unshift 1
#     user$ array_join the_array # print the contents of the array, space separated.
#     1 2 3 4 5
#
#     $ the_array=(4 5)
#     $ array_unshift 3 2 1
#     user$ array_join the_array # print the contents of the array, space separated.
#     1 2 3 4 5
#
array_unshift()
{
  local _array_name="$1"

  variable_is_nonempty _array_name ||
    fail "Cannot push onto array as an array name was not given."
  shift

  local _element _elements=("$@")

  (( ${#_elements[@]} > 0 )) ||
    fail "Cannot push elements onto array as no elements were given."

  for _element in "${_elements[@]}"
  do
    eval "${_array_name}=(\"${_element}\" \"\${${_array_name}[@]}\")"
  done
}

#
# ### array_join()
#
# Joins the named array into a string separated by either a space or a given string.
#
# ##### Input Parameters
#
# The first parameter is the name of the array variable.
# The second parameter is the separator between elements in the string, this is optional and defaults to a space.
#
# ##### Stream Outputs
#
# Prints the elements of the named array, separted by either the 2nd parameter
# if given or else a space character, to the STDOUT stream of the calling
# environment.
#
# ##### Return Codes
#
# 0 denoting success
#
# ##### Failure Scenarios
#
# Fails if the array name, the first parameter, is not given.
#
# ##### Usage Examples
#
#     $ the_array=(1 2 3 4 5)
#     $ array_join the_array
#     1 2 3 4 5
#
#     $ array_join the_array '.'
#     1.2.3.4.5
#
array_join()
{
  local _array_name="$1"

  variable_is_nonempty _array_name ||
    fail "Cannot join array as an array name was not given."

  shift
  local _separator="${1:-' '}"

  eval "for (( index=0 ; index < \${#${_array_name}[@]} ; index++ )) ; do (( index >  0 )) && printf \"%s\"${_separator}\"\" ; printf \"%s\" \"\${${_array_name}[\${index}]}\" ; done"
}

