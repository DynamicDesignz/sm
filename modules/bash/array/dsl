#!/usr/bin/env bash

#
# # Array Module
#
#
# ## array\_is\_nonempty()
#
# Checks to see if an array with the name given as the first parameter
# is nonempty.
#
# ### Input Parameters
#
# The first parameter is the name of the array variable.
#
# ### Stream Outputs
#
# None.
#
# ### Return Codes
#
# 0 if the array is non-empty.
# 1 if the array is empty.
#
# ### Failure Scenarios
#
# Fails if the array name, the first parameter, is not given.
#
# ### Usage Examples
#
#     user$ the_array=(1 2 3 4 5)
#     user$ array_is_nonempty the_array
#     user$ echo $?
#     0
#
#     user$ the_array=()
#     user$ array_is_nonempty the_array
#     user$ echo $?
#     1
#
# ### Code Walkthrough
#
array_is_nonempty()
{
  local _array_name="$1"

  if variable_is_nonempty _array_name
  then
    eval "(( \${#${_array_name}[@]} > 0 ))"
  else
    # otherwise the array name variable was not passed in. This is a programming
    # error and as such we call the fail function which yields a message and
    # a backtrace thus enabling the developer to pinpoint and fix the issue
    # quickly.
    fail "Cannot push onto array as an array name was not given."
  fi
}

#
# ## array\_is\_empty()
#
# Checks to see if an array with the name given as the first parameter is empty.
#
# ### Input Parameters
#
# The first parameter is the name of the array variable.
#
# ### Stream Outputs
#
# None.
#
# ### Return Codes
#
# 0 if the array is empty.
# 1 if the array is non-empty.
#
# ### Failure Scenarios
#
# Fails if the array name, the first parameter, is not given.
#
# ### Usage Examples
#
#     user$ the_array=()
#     user$ array_is_empty the_array
#     user$ echo $?
#     0
#
#     user$ the_array=(1 2 3 4 5)
#     user$ array_is_empty the_array
#     user$ echo $?
#     1
#
# ### Code Walkthrough
#
array_is_empty()
{
  local _array_name="$1"

  if variable_is_nonempty _array_name
  then
    eval "(( \${#${_array_name}[@]} == 0 ))"
  else
    # otherwise the array name variable was not passed in. This is a programming
    # error and as such we call the fail function which yields a message and
    # a backtrace thus enabling the developer to pinpoint and fix the issue
    # quickly.
    fail "Cannot push onto array as an array name was not given."
  fi
}

#
# ## array\_length()
#
# Return the length of the given array.
#
# ### Input Parameters
#
# First parameter is the name of the array variable.
#
# ### Stream Outputs
#
# Prints the length of the named array to the STDOUT stream of the calling
# environment.
#
# ### Return Codes
#
# returns 0
#
# ### Failure Scenarios
#
# Fails if the array name, first parameter, is not given.
#
# ### Usage Examples
#
#     user$ the_array=(1 2 3 4 5)
#     user$ array_length the_array
#     5
#
# ### Code Walkthrough
#
array_length()
{
  local _array_name="$1"

  if variable_is_nonempty _array_name
  then
    eval "printf \"%s\\n\" \"\${#${_array_name}[@]}\""
  else
    # otherwise the array name variable was not passed in. This is a programming
    # error and as such we call the fail function which yields a message and
    # a backtrace thus enabling the developer to pinpoint and fix the issue
    # quickly.
    fail "Cannot push onto array as an array name was not given."
  fi
}

#
# ## array\_last\_element()
#
# Print the last element of the given array.
#
# ### Input Parameters
#
# First parameter is the name of the array variable.
#
# ### Stream Outputs
#
# Prints the last element of the named array to the STDOUT stream of the
# calling environment.
#
# ### Failure Scenarios
#
# Fails if the array name, first parameter, is not given.
#
# ### Return Codes
#
# 0 denoting success
#
# ### Usage Examples
#
#     $ the_array=(one two three four five)
#     $ array_last_element the_array
#     five
#
# ### Code Walkthrough
#
array_last_element()
{
  local _array_name="$1" _length

  if variable_is_nonempty _array_name
  then
    eval "_length=\${#${_array_name}[@]}"

    eval "printf \"%s\\n\" \"\${${_array_name}[${_length}]}\""
  else
    # otherwise the array name variable was not passed in. This is a programming
    # error and as such we call the fail function which yields a message and
    # a backtrace thus enabling the developer to pinpoint and fix the issue
    # quickly.
    fail "Cannot push onto array as an array name was not given."
  fi
}

#
# ## array\_first\_element()
#
# Print the first element of the given array.
#
# ### Input Parameters
#
# First parameter is the name of the array variable.
#
# ### Stream Outputs
#
# Prints the first element of the named array to the STDOUT stream of the
# calling environment.
#
# ### Return Codes
#
# 0 denoting success
#
# ### Failure Scenarios
#
# Fails if the array name, the first parameter, is not given.
#
# ### Usage Examples
#
#     $ the_array=(one two three four five)
#     $ array_first_element the_array
#     one
#
# ### Code Walkthrough
#
array_first_element()
{
  local _array_name="$1" _length

  if variable_is_nonempty _array_name
  then
    eval "printf \"%s\\n\" \"\${${_array_name}[0]}\""
  else
    # otherwise the array name variable was not passed in. This is a programming
    # error and as such we call the fail function which yields a message and
    # a backtrace thus enabling the developer to pinpoint and fix the issue
    # quickly.
    fail "Cannot push onto array as an array name was not given."
  fi
}

#
# ## array\_push()
#
# Appends one or more elements to the array with the given name.
#
# ### Input Parameters
#
#   The first parameter is the name of the array variable.
#   Remaining parameters are the elements to be appended to the array.
#
# ### Stream Outputs
#
#   None.
#
# ### Returns
#
#   0 denoting success
#
# ### Failure Scenarios
#
# Fails if the array name, the first parameter, is not given.
# Fails if no elements were given (second paramater and beyond).
#
# ### Usage Examples
#
#     $ the_array=(1 2 3 4 5)
#     $ array_push the_array 6
#     $ array_join the_array # print the contents of the array, space separated
#     1 2 3 4 5 6
#
# ### Code Walkthrough
#
array_push()
{
  local _array_name="$1"
  shift

  if variable_is_nonempty _array_name
  then
    eval "(( \${#${_array_name}[@]} > 0 ))"

    local _element _elements=("$@")

    if (( ${#_elements[@]} == 0 ))
    then
      fail "Cannot push elements onto array as no elements were given."
    fi

    for _element in "${_elements[@]}"
    do
      eval "${_array_name}+=(\${_element})"
    done
  else
    # otherwise the array name variable was not passed in. This is a programming
    # error and as such we call the fail function which yields a message and
    # a backtrace thus enabling the developer to pinpoint and fix the issue
    # quickly.
    fail "Cannot push elements onto array as an array name was not given."
  fi
}

#
# ## array\_append()
#
# Return the length of the given array.
#
# ### Input Parameters
#
# The first parameter is the name of the array variable.
# Remaining parameters are the elements to append to the end of the array.
#
# ### Stream Outputs
#
# None.
#
# ### Returns
#
# 0 denoting success
#
# ### Failure Scenarios
#
# Fails if the array name, the first parameter, is not given.
# Fails if no elements were given to append to the array.
#
# ### Usage Examples
#
#     user$ the_array=(1)
#     user$ array_append the_array 2 3 4 5
#     user$ array_join the_array # print the contents of the array,
#     space separated.
#     1 2 3 4 5
#
# ### Code Walkthrough
#
array_append()
{
  local _array_name="$1"

  if variable_is_nonempty _array_name
  then
    shift
    local _element _elements=("$@")

    if (( ${#_elements[@]} == 0 ))
    then
      fail "Cannot push elements onto array as no elements were given."
    fi

    for _element in "${_elements[@]}"
    do
      eval "${_array_name}+=(\${_element})}"
    done
  else
    # otherwise the array name variable was not passed in. This is a programming
    # error and as such we call the fail function which yields a message and
    # a backtrace thus enabling the developer to pinpoint and fix the issue
    # quickly.
    fail "Cannot push onto array as an array name was not given."
  fi
}

#
# ## array\_shift()
#
# Removes the first element of the array and prints it.
#
# ### Input Parameters
#
#   The first parameter is the name of the array variable.
#
# ### Stream Outputs
#
#   Prints the first element of the named array to the STDOUT stream of the
#   calling environment.
#
# ### Usage Examples
#
#     user$ cat $HOME/test
#     #!/usr/bin/env bash
#     source "/usr/local/bdsm/modules/bash/core/initialize" # Load BDSM framework.
#     modules array
#
#     my_array=(1 2 3 4)
#     echo ${my_array[@]}
#     array_shift my_array
#     echo ${my_array[@]}
#
#     user$ $HOME/test
#     1 2 3 4
#     1
#     2 3 4
#
# ### Code Walkthrough
#
array_shift()
{
  local _array_name="$1" new_array=() index first_element

  if variable_is_nonempty _array_name
  then
    shift
    eval "
    first_element=\${${_array_name}[0]}

    for (( index=1; index < \${#${_array_name}[@]}; index++ ))
    do
      new_array+=(\${${_array_name}[\${index}]})
    done

    ${_array_name}=(\"\${new_array[@]}\")
    "
    printf "%s" "${first_element}"
  else
    # otherwise the array name variable was not passed in. This is a programming
    # error and as such we call the fail function which yields a message and
    # a backtrace thus enabling the developer to pinpoint and fix the issue
    # quickly.
    fail "Cannot shift from array as an array name was not given."
  fi
}

#
# ## array\_unshift()
#
#   Prepends one or more elements to the array whose name is given, in the order
#   given.
#
# ### Input Parameters Parameters
#
#   The first parameter is the name of the array variable.
#   Remaining parameters are the elements to prepend to the array.
#
# ### Stream Outputs
#
#   None.
#   Yields a failure message if no array name was given.
#   Yields a failure message if no elements were given to unshift.
#
# ### Return Codes
#
#   0 denoting success
#
# ### Usage Examples
#
#     $ the_array=(2 3 4 5)
#     $ array_unshift 1
#     user$ array_join the_array # print contents of the array, space separated.
#     1 2 3 4 5
#
#     $ the_array=(4 5)
#     $ array_unshift 3 2 1
#     user$ array_join the_array # print contents of the array, space separated.
#     1 2 3 4 5
#
# ### Code Walkthrough
#
array_unshift()
{
  local _array_name="$1"

  if variable_is_nonempty _array_name
  then
    shift

    local _element _elements=("$@")

    if (( ${#_elements[@]} == 0 ))
    then
      fail "Cannot push elements onto array as no elements were given."
    fi

    for _element in "${_elements[@]}"
    do
      eval "${_array_name}=(\"${_element}\" \"\${${_array_name}[@]}\")"
    done
  else
    # otherwise the array name variable was not passed in. This is a programming
    # error and as such we call the fail function which yields a message and
    # a backtrace thus enabling the developer to pinpoint and fix the issue
    # quickly.
    fail "Cannot push onto array as an array name was not given."
  fi
}

#
# ## array\_join()
#
# Joins the named array into a string separated by either a space or
# a given string.
#
# ### Input Parameters
#
# The first parameter is the name of the array variable.
# The second parameter is the separator between elements in the string, this is
# optional and defaults to a space.
#
# ### Stream Outputs
#
# Prints the elements of the named array, separated by either the 2nd parameter
# if given or else a space character, to the STDOUT stream of the calling
# environment.
#
# ### Return Codes
#
# 0 denoting success
#
# ### Failure Scenarios
#
# Fails if the array name, the first parameter, is not given.
#
# ### Usage Examples
#
#     $ the_array=(1 2 3 4 5)
#     $ array_join the_array
#     1 2 3 4 5
#
#     $ array_join the_array '.'
#     1.2.3.4.5
#
# ### Code Walkthrough
#
array_join()
{
  local _array_name="$1"

  if variable_is_nonempty _array_name
  then
    shift
    local _separator="${1:-' '}"

    eval "
    for (( index=0 ; index < \${#${_array_name}[@]} ; index++ )) ;
    do (( index >  0 )) && printf \"%s\"${_separator}\"\" ;
      printf \"%s\" \"\${${_array_name}[\${index}]}\" ;
    done"
  else
    # otherwise the array name variable was not passed in. This is a programming
    # error and as such we call the fail function which yields a message and
    # a backtrace thus enabling the developer to pinpoint and fix the issue
    # quickly.
    fail "Cannot join array as an array name was not given."
  fi
}

#
# ## array\_largest()
#
# Outputs the first string in the array with the largest length.
#
# ### Input Parameters
#
# The first element is an array variable name.
#
# ### Stream Outputs
#
# Prints the largest elements of the named array to the STDOUT
# stream of the calling environment.
#
# ### Return Codes
#
# 0 denoting success
#
# ### Failure Scenarios
#
# Fails if the array name, the first parameter, is not given.
#
# ### Usage Examples
#
#     $ the_array=(billie bob joe)
#     $ array_largest the_array
#     billie
#
# ### Code Walkthrough
#
array_largest()
{
  local _array_name="${1:-}" _index _largest=""

  if variable_is_nonempty _array_name
  then
    eval "
    for (( _index=0 ; _index < \${#${_array_name}[@]} ; _index++ ))
    do
      if (( \${#${_array_name}[\${_index}]} > \${#_largest} ))
      then
        _largest=\${${_array_name}[\${_index}]}
      fi
    done
    "
    printf "%s" "${_largest}"

  else
    # otherwise the array name variable was not passed in. This is a programming
    # error and as such we call the fail function which yields a message and
    # a backtrace thus enabling the developer to pinpoint and fix the issue
    # quickly.
    fail "Cannot find largest element as an array variable name was not given."
  fi
}

#
# ## array\_sort\_desc()
#
# Sorts the named array contents in descending order.
#
# ### Input Parameters
#
# An array variable name.
#
# ### Stream Outputs
#
# None.
#
# ### Return Codes
#
# 0 denoting success
#
# ### Failure Scenarios
#
# Fails if the array name, the first parameter, is not given.
#
# ### Usage Examples
#
#     user$ cat $HOME/test
#     #!/usr/bin/env bash
#     source "/usr/local/bdsm/modules/bash/core/initialize" # BDSM framework
#     modules array
#
#     arr=(c a d e f b h j i )
#     array_sort_desc arr
#     array_join arr
#     echo
#
#     user$ $HOME/test
#     j i h f e d c b a
#
# ### Code Walkthrough
#
array_sort_desc()
{
  local _array_name="${1:-}" _index _largest=""
  if variable_is_nonempty _array_name
  then
    eval "${_array_name}=(\$(
    echo \"\${${_array_name}[@]}\" | tr ' ' \"\n\" | sort -r
    ))"
  else
    # otherwise the array name variable was not passed in. This is a programming
    # error and as such we call the fail function which yields a message and
    # a backtrace thus enabling the developer to pinpoint and fix the issue
    # quickly.
    fail "Cannot sort an array in decending order as an array"\
      "variable name was not given."
  fi
}

#
# ## array\_sort\_asc()
#
# Sorts the named array contents in ascending order.
#
# ### Input Parameters
#
# An array variable name.
#
# ### Stream Outputs
#
# None.
#
# ### Return Codes
#
# 0 denoting success
#
# ### Failure Scenarios
#
# Fails if the array name, the first parameter, is not given.
#
# ### Usage Examples
#
#     user$ cat $HOME/test
#     #!/usr/bin/env bash
#     source "/usr/local/bdsm/modules/bash/core/initialize" # BDSM framework
#     modules array
#
#     arr=(c a d e f b h j i )
#     array_sort_asc arr
#     array_join arr
#     echo
#
#     user$ $HOME/test
#     a b c d e f h i j
#
# ### Code Walkthrough
#
array_sort_asc()
{
  local _array_name="${1:-}" _index _largest=""
  if variable_is_nonempty _array_name
  then
    eval "${_array_name}=(\$(
    echo \"\${${_array_name}[@]}\" | tr ' ' \"\n\" | sort
    ))"
  else
    # otherwise the array name variable was not passed in. This is a programming
    # error and as such we call the fail function which yields a message and
    # a backtrace thus enabling the developer to pinpoint and fix the issue
    # quickly.
    fail "Cannot sort an array in ascending order as an array "\
      "variable name was not given."
  fi
}


#
# ## array\_unique()
#
# Sorts the named array contents in ascending order.
#
# ### Input Parameters
#
# An array variable name.
#
# ### Stream Outputs
#
# None.
#
# ### Return Codes
#
# 0 denoting success
#
# ### Failure Scenarios
#
# Fails if the array name, the first parameter, is not given.
#
# ### Usage Examples
#
#     user$ cat $HOME/test
#     #!/usr/bin/env bash
#     source "/usr/local/bdsm/modules/bash/core/initialize" # BDSM framework
#     modules array
#
#     arr=(a a a b b c c c c d d d d d d)
#     array_unique arr
#     array_join arr
#     echo
#
#     user$ $HOME/test
#     a b c d
#
# ### Code Walkthrough
#
array_unique()
{
  # Store the array name into a local variable, set to the empty string if it
  # was not passed in. Also initialize the index and largest variables.
  local _array_name="${1:-}" _index _largest=""

  # If the array name variable is not empty
  if variable_is_nonempty _array_name
  then
    # Then loop over the array finding the largest element using awk.
    eval "${_array_name}=(\$(
    echo \" \${${_array_name}[@]} \" | awk -v RS=' ' -v ORS=' ' '!(\$0 in a){a[\$0];print}'
    ))"
  else
    # otherwise the array name variable was not passed in. This is a programming
    # error and as such we call the fail function which yields a message and
    # a backtrace thus enabling the developer to pinpoint and fix the issue
    # quickly.
    fail "Cannot sort an array in ascending order as an array "\
      "variable name was not given."
  fi
}

# ## array\_is\_even()
#
# Checks to see if an array with the name given as the first parameter
# is even.
#
# ### Input Parameters
#
# The first parameter is the name of the array variable.
#
# ### Stream Outputs
#
# None.
#
# ### Return Codes
#
# 0 if the array is non-empty.
# 1 if the array is empty.
#
# ### Failure Scenarios
#
# Fails if the array name, the first parameter, is not given.
#
# ### Usage Examples
#
#     user$ cat $HOME/test
#     #!/usr/bin/env bash
#     source "/usr/local/bdsm/modules/bash/core/initialize" # BDSM framework
#     modules array
#
#     the_array=()
#     printf "($(array_join the_array))"
#     if array_is_even the_array
#     then
#       echo " has an even number of elements"
#     else
#       echo " has an odd number of elements"
#     fi
#
#     the_array=(1)
#     printf "($(array_join the_array))"
#     if array_is_even the_array
#     then
#       echo " has an even number of elements"
#     else
#       echo " has an odd number of elements"
#     fi
#
#     the_array=(1 2 3 4)
#     printf "($(array_join the_array))"
#     if array_is_even the_array
#     then
#       echo " has an even number of elements"
#     else
#       echo " has an odd number of elements"
#     fi
#
#     the_array=(1 2 3 4 5)
#     printf "($(array_join the_array))"
#     if array_is_even the_array
#     then
#       echo " has an even number of elements"
#     else
#       echo " has an odd number of elements"
#     fi
#
#     user$ "$HOME/test"
#     () has an even number of elements
#     (1) has an odd number of elements
#     (1 2 3 4) has an even number of elements
#     (1 2 3 4 5) has an odd number of elements
#
# ### Code Walkthrough
array_is_even()
{
  # Store the array name into a local variable, set to the empty string if it
  # was not passed in.
  local _array_name="${1:-}"

  # If the array name variable is not empty
  if variable_is_nonempty _array_name
  then
    if eval "(( ( \${#${_array_name}[@]} % 2 ) == 0 ))"
    then
      # the array is even, return true, 0
      return 0
    else
      # the array is odd, return false, 1
      return 1
    fi
  else
    # otherwise the array name was not passed in, this is a programming error
    # so send a fail message which will send a backtrace allowing the developer
    # to quickly debug where they have an issue.
    fail "Cannot push onto array as an array name was not given."
  fi
}
