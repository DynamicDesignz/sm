#!/usr/bin/env bash

#
# ### show_help()
#
# Display help for the current extension based on settings declared in the help
# action.
#
# ##### Input Parameters
#
# First parameter is the help section to display, default is all sections 'usage'.
#
# ##### Stream Outputs
#
# Prints out formatted help sections to the calling environments STDOUT stream.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 0 for success.
#
# ##### Failure Scenarios
#
# No failure scenarios currently.
#
# ##### Usage Examples
#
#     user$ show_help usage
#
show_help()
{
  local _help_command _token

  while (( $# > 0 )) ; do
    _token="$1" ; shift
    case "${_token}" in
      desc*|description)
        _help_command="description"
        ;;
      actions)
        _help_command="actions"
        ;;
      usage)
        _help_command="usage"
        ;;
    esac
  done

  "${_help_command:-usage}"
}

#
# ### description()
#
# Set the string that will be printed when the actions help section is output.
#
# ##### Input Parameters
#
# First parameter is a string containing a description of the extension.
#
# ##### Stream Outputs
#
# None.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 0 for success.
#
# ##### Failure Scenarios
#
# Fails if no description is given.
#
# ##### Usage Examples
#
#     user$ description "This extension handles X Y and Z."
#
description()
{
  [[ -n "$*" ]] || fail "No help description was given."

  help_description="$*"
}

#
# ### actions()
#
# Set the string that will be printed when the actions help section is output.
#
# ##### Input Parameters
#
# First parameter is a string of the action descriptions.
#
# ##### Stream Outputs
#
# None.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 0 for success.
#
# ##### Failure Scenarios
#
# Fails if no actions are given.
#
# ##### Usage Examples
#
#     user$ actions "install  - Installs the extension..."
#
actions()
{
  [[ -n "$*" ]] || fail "No help actions were given."
  warn "help actions() is depreciated, use action() instead for each action."
  help_actions="$*"
}

#
# ### action()
#
# Adds an action definition for help output.
#
# ##### Input Parameters
#
# First parameter is the name of the extension action
# Second parameter is the description of the extension action
#
# ##### Stream Outputs
#
# None.
#
# ##### Environmental effects
#
# The action description will be stored for use on help output.
#
# ##### Return Codes
#
# 0 for success.
#
# ##### Failure Scenarios
#
# Fails if an action name is not given.
# Fails if a description is not provided.
#
# ##### Usage Examples
#
#     user$ action "install"  "Installs the extension..."
#
action()
{
  local _name="${1:-}"
  local _description="${2:-}"

  [[ -n "${_name}" && -n "${_description}" ]] ||
    fail "An action and a description must be provided:\naction {name} {description}"

  help_names+=( "${_name}" )
  help_descriptions+=( "${_description}" )
}

#
# ### notes()
#
# Define the notes help section content.
#
# ##### Input Parameters
#
# First parameter is a string containing any notes for the notes section of the
# current extension's help output.
#
# ##### Stream Outputs
#
# None.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 0 for success.
#
# ##### Failure Scenarios
#
# No failure scenarios currently.
#
# ##### Usage Examples
#
#     user$ notes "Help for this extension can be found in #beginrescueend on irc.freenode.net"
#
notes()
{
  help_notes="$*"
}

#
# ### dependencies()
#
# Specify content for the dependencies section of the help command.
#
# ##### Input Parameters
#
# First parameter is a string containing any dependencies for the dependencies
# section of the current extension's help output.
#
# ##### Stream Outputs
#
# None.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# No failure scenarios currently.
#
# ##### Usage Examples
#
#     user$ dependencies " * pcre"
#
dependencies()
{
  help_dependencies="$*"
}

#
# ### resource()
#
# Add a resource for the Resources section of the help command.
#
# ##### Input Parameters
#
# First parameter is a string containing any resources for the resources
# section of the current extension's help output.
#
# ##### Stream Outputs
#
# None.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# No failure scenarios currently.
#
# ##### Usage Examples
#
#     user$ resource "website: ..."
#
resource()
{
  help_resources+=("$*")
}

#
# ### help_actions()
#
# Outputs the help actions in a formatted manner.
# Outputs a message if there are no actions.
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# Prints a formatted listing of the actions and their descriptions to the
# calling environments STDOUT.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# No failure scenarios currently.
#
# ##### Usage Examples
#
#     user$ cat $HOME/test
#     #!/usr/bin/env bash
#     source "/usr/local/bdsm/modules/bash/core/initialize" # Load BDSM framework core.
#     modules help
#
#     action "help" "Displays the help output for the ${extension} extension"
#     action "install" "Installs Z redis package"
#     action "uninstall" "Uninstalls Z redis package"
#
#     help_actions
#
#     user$ "$HOME/test"
#     help      - Displays the help output for the redis extension
#     install   - Installs Z redis package
#     uninstall - Uninstalls Z redis package
#
help_actions()
{
  local _largest _index

  if (( ${#help_names[@]} > 0 ))
  then
    _largest=$( array_largest help_names ) # Use the array DSL to grab largest
    _largest=$(( ${#_largest} + 1 ))

    for (( _index=0 ; _index < ${#help_names[@]} ; _index++ ))
    do
      printf "%-${_largest}s - %s\n" \
        "${help_names[${_index}]}" "${help_descriptions[${_index}]}"
    done
  else
    log "# No help definitions exist for ${extension} actions ."
  fi
}

#
# ### help_notes()
#
# Outputs the help notes in a formatted manner.
# Outputs a message if there are no notes.
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# Prints a formatted listing of the notes to the calling environments STDOUT.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# No failure scenarios currently.
#
# ##### Usage Examples
#
#     user$ cat $HOME/test
#     #!/usr/bin/env bash
#     source "/usr/local/bdsm/modules/bash/core/initialize" # Load BDSM framework core.
#     modules help
#
#     note "Don't forget the milk! "
#     note "... and cookies... mmm...."
#
#     help_notes
#
#     user$ "$HOME/test"
#     * Don't forget the milk!
#     * ... and cookies... mmm....
#
help_notes()
{
  local _index

  if (( ${#help_names[@]} > 0 ))
  then
    for (( _index=0 ; _index < ${#help_notes[@]} ; _index++ ))
    do
      printf " * %s\n" "${help_notes[${_index}]}"
    done
  else
    log "# No help notes exist for ${extension} actions ."
  fi
}

#
# ### help_section()
#
# Displays a help section header.
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# Prints the given string as a help section header.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# No failure scenarios currently.
#
# ##### Usage Examples
#
#     user$ help_section Usage
#
help_section()
{
  log "\n$*\n"
}


#
# ### usage()
#
# Display the usage help output of the command. This displays all help sections.
#
# ##### Input Parameters
#
# None.
#
# ##### Stream Outputs
#
# Prints all help sections to the STDOUT of the calling environment.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# No failure scenarios currently.
#
# ##### Usage Examples
#
#     user$ usage
#
usage()
{
  bdsm_version

  log "\nbdsm ${bdsm_version} https://bdsm.beginrescueend.com/ by Wayne E. Seguin (wayneeseguin@gmail.com)"

  help_section Usage
  log "  bdsm ${extension} {action} [arguments...]"

  help_section Description
  help_description

  help_section Actions
  help_actions

  help_section Notes
  help_notes

  secthelp_ion Dependencies
  help_dependencies

  help_section Resources
  help_resources

  case "${extension}" in
    core|<extension>)
      section "Installed Extensions"
      extensions_installed

      section "Available Extensions"
      extensions_available
      ;;
  esac
}
