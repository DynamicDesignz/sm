#!/usr/bin/env bash

#
# ## log()
#
# Log arguments to the calling environments STDOUT.
#
# ### Input Parameters
#
# Strings to be logged.
#
# ### Stream Outputs
#
# Prints arguments passed in to the calling environments STDOUT with a newline
# character appended.
#
# ### Environmental effects
#
# None.
#
# ### Return Codes
#
# 0 for success
#
# ### Failure Scenarios
#
# Fails if no arguments are given.
#
# ### Usage Examples
#
#     user$ log "Hello there! "
#     Hello there!
#
log()
{
  local _token _file _message _append_flag=0

  while (( $# > 0 ))
  do
    _token="$1"
    shift

    case "${_token}" in
      (append|--append)
        _append_flag=1
        ;;
      (to)
        _file="${1}"
        shift
        ;;
      (*)
        _message="${_token}"
        ;;
   esac
  done

  if variable_is_nonempty _message
  then
    if variable_is_nonempty _file
    then
      if (( _append_flag == 1 ))
      then
        printf "${_message}\n" >> "${_file}"
      else
        printf "${_message}\n" > "${_file}"
      fi
    else
        printf "${_message}\n"
    fi
  else
    fail "Cannot log a message as no message was given."
  fi
}

#
# ## info()
#
# Log arguments to the calling environments STDOUT preceeded by 'INFO .
#
# ### Input Parameters
#
# Strings to be logged.
#
# ### Stream Outputs
#
# Prints arguments passed in to the calling environments STDOUT with a newline
# character appended and 'INFO ' prepended.
#
# ### Environmental effects
#
# None.
#
# ### Return Codes
#
# 0 for success
#
# ### Failure Scenarios
#
# Fails if no arguments are given.
#
# ### Usage Examples
#
#     user$ info "Hello there! "
#     INFO Hello there!
#
info()
{
  log "INFO: $*"
}

#
# ## warn()
#
# Log arguments to the calling environments STDOUT preceeded by 'WARNING .
#
# ### Input Parameters
#
# Strings to be logged.
#
# ### Stream Outputs
#
# Prints arguments passed in to the calling environments STDOUT with a newline
# character appended and 'WARNING ' prepended.
#
# ### Environmental effects
#
# None.
#
# ### Return Codes
#
# 0 for success
#
# ### Failure Scenarios
#
# Fails if no arguments are given.
#
# ### Usage Examples
#
#     user$ info "Bad Monkeys are Typing! "
#     WARNING: Bad Monkeys are Typing!
#
warn()
{
  log "WARNING: $*"
}

#
# ## note()
#
# Log arguments to the calling environments STDOUT preceeded by 'NOTE .
#
# ### Input Parameters
#
# Strings to be logged.
#
# ### Stream Outputs
#
# Prints arguments passed in to the calling environments STDOUT with a newline
# character appended and 'NOTE ' prepended.
#
# ### Environmental effects
#
# None.
#
# ### Return Codes
#
# 0 for success
#
# ### Failure Scenarios
#
# Fails if no arguments are given.
#
# ### Usage Examples
#
#     user$ info "You are not Smurfette! "
#     NOTE You are not Smurfette!
#
note()
{
  log "NOTE: $*"
}

#
# ## debug()
#
# Log arguments to the calling environments STDOUT preceeded by 'DEBUG: .
#
# ### Input Parameters
#
# Strings to be logged.
#
# ### Stream Outputs
#
# Prints arguments passed in to the calling environments STDOUT with a newline
# character appended and 'DEBUG: ' prepended.
#
# ### Environmental effects
#
# None.
#
# ### Return Codes
#
# 0 for success
#
# ### Failure Scenarios
#
# Fails if no arguments are given.
#
# ### Usage Examples
#
#     user$ debug "Hello there! "
#     DEBUG: Hello there!
#
debug()
{
  if (( ${debug_flag:=0} == 1 ))
  then
    log "DEBUG: $*"
  else
    return 0
  fi
}

#
# ## error()
#
# Log arguments to the calling environments STDERR preceeded by 'ERROR '.
# Exits with status code 1.
#
# ### Input Parameters
#
# Strings to be logged.
#
# ### Stream Outputs
#
# Prints arguments passed in to the calling environments STDOUT with a newline
# character appended and 'ERROR ' prepended.
#
# ### Environmental effects
#
# None.
#
# ### Return Codes
#
# 1 for failure.
#
# ### Failure Scenarios
#
# Fails if no arguments are given.
#
# ### Usage Examples
#
#     user$ error "Hello there! "
#     ERROR Hello there!
#     *poof* shell closed...
#
error()
{
  set +o xtrace
  log "\nERROR: $*" >&2
  disable_backtrace
  exit 1
}

#
# ## succeed()
#
# Log arguments to the calling environments STDOUT. Exits with status code 0.
#
# ### Input Parameters
#
# Strings to be logged.
#
# ### Stream Outputs
#
# Prints arguments passed in to the calling environments STDOUT with a newline
# character appended.
#
# ### Environmental effects
#
# None.
#
# ### Return Codes
#
# 0 for success
#
# ### Failure Scenarios
#
# Fails if no arguments are given.
#
# ### Usage Examples
#
#     user$ succeed "Hello there! "
#     Hello there!
#     *poof* shell closed...
#
succeed() {
  set +o xtrace
  if [[ -n "$*" ]]
  then
    log "$*"
  fi
  exit 0
}

#
# ## fail()
#
# Log arguments to the calling environments STDERR preceeded by 'ERROR '.
# Exits with status code 1.
#
# ### Input Parameters
#
# Strings to be logged.
#
# ### Stream Outputs
#
# Prints arguments passed in to the calling environments STDOUT with a newline
# character appended and 'ERROR ' prepended.
#
# ### Environmental effects
#
# None.
#
# ### Return Codes
#
# 1 for failure.
#
# ### Failure Scenarios
#
# Fails if no arguments are given.
#
# ### Usage Examples
#
#     user$ error "Hello there! "
#     ERROR Hello there!
#     *poof* shell closed...
#
fail()
{
  trace_flag=0
  backtrace "$*"
  exit 1
}

#
# ## verbose()
#
# Log arguments to the calling environments STDERR preceeded by 'ERROR '.
# Exits with status code 1.
#
# ### Input Parameters
#
# Strings to be logged.
#
# ### Stream Outputs
#
# Prints arguments passed in to the calling environments STDOUT with a newline
# character appended and 'ERROR ' prepended.
#
# ### Environmental effects
#
# None.
#
# ### Return Codes
#
# 1 for verboseure.
#
# ### verboseure Scenarios
#
# verboses if no arguments are given.
#
# ### Usage Examples
#
#     user$ verbose "w00t! "
#     user$ verbose_flag=1
#     user$ verbose "w00t! "
#     w00t!
#
verbose()
{
  if (( ${verbose_flag:=0} == 1 ))
  then
    log "$*"
  else
    return 0
  fi
}

# ## logrotate()
#
# Strategically rotate a logfile minimizing data loss.
#
# This function uses a copy, tail and truncate strategy.
#
# ### Usage Examples
#
#     root# logrotate /var/log/my_logfile.log
#
logrotate()
{
  local _file="${1:-}"
  if variable_is_nonempty _file
  then
    timestamp_set

    verbose "Tailing the file in a background process into a tail logfile."
    ( tail -n 0 -f "${_file}" > ${file}.$$.log )&

    local _tail_pid=$!

    verbose "Copying the file's contentes into a new timestamped file."
    cp "${_file}" "${_file}.${timestamp}"

    verbose "Truncating the file."
    cp /dev/null ${_file}

    verbose "Signaling the tail background process to stop."
    kill -QUIT ${_tail_pid}

    verbose "Appending the tail logfile to the new timestamped logfile."
    cat "${file}.$$.log" >> "${file}.${timestamp}"

    verbose "Compressing the timestamped file (gzip)"
    gzip -f -9 "${file}.${timestamp}"

    verbose "Removing the tail logfile"
    rm "${file}.$$.log"
  else
    fail "Cannot rotate a log file as no log file was given."
  fi
}

# ## log\_streams()
#
# Log streams to three files:
#   - standard out
#   - standard in
#   - combined (what the user typically sees)
#
# ### Usage Examples
#
#     root# log_streams "make install" prefix make
#     cat make.out.log
#     root#
#     ...
#
# Alternatively,
#
#     root# log_streams "make install" \
#           out /path/to/out.log \
#           err /path/to/err.log \
#           mix /path/to/mix.log # both out & err as they occurred.
#     root# cat /path/to/mix.log
#     ...
#
log_streams()
{
  local _command="${1:-}" _prefix _err _out _mix

  # TODO: allow specification of path, name prefix
  while (( $# > 0 ))
  do
    _token="${1}"
    shift
    case "${token}" in
      prefix)
        _prefix="${1}."
        ;;
      err)
        _stderr="${1}"
        shift
        ;;
      out)
        _stdout="${1}"
        shift
        ;;
      mix)
        _stdmix="${1}"
        shift
        ;;
      *)
        _command="${1}"
        shift
        ;;
    esac
  done

  : \
    "${_stdout="${2:-stdout.log}"}" \
    "${_stderr="${3:-stderr.log}"}" \
    "${_stdmix="${4:-stdmix.log}"}"

  # It's like fireworks~! :)
  {
    {
      ${_command} 2>&1 1>&3 | tee "${_stderr}"
    } 3>&1 1>&2 | tee "${_stdout}"
  } > "${_stdmix}" 2>&1
}

