#!/usr/bin/env bash

#
# ### log()
#
# Log arguments to the calling environments STDOUT.
#
# ##### Input Parameters
#
# Strings to be logged.
#
# ##### Stream Outputs
#
# Prints arguments passed in to the calling environments STDOUT with a newline
# character appended.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# Fails if no arguments are given.
#
# ##### Usage Examples
#
#     user$ log "Hello there! "
#     Hello there!
#
log()
{ # TODO: Refactor the function below to parse arguments properly.
  if [[ -n "$1" ]]
  then
    if [[ "${2:-}" = "to" ]]
    then
      if [[ -n "${3:-}" ]]
      then
        printf "$1\n" > "${3}"
      else
        fail "Cannot log arguments to a file as no file name/path was given."
      fi
    else
      printf "$1\n"
    fi
  else
    fail "Cannot log arguments as none were given."
  fi
}

#
# ### info()
#
# Log arguments to the calling environments STDOUT preceeded by 'INFO .
#
# ##### Input Parameters
#
# Strings to be logged.
#
# ##### Stream Outputs
#
# Prints arguments passed in to the calling environments STDOUT with a newline
# character appended and 'INFO ' prepended.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# Fails if no arguments are given.
#
# ##### Usage Examples
#
#     user$ info "Hello there! "
#     INFO Hello there!
#
info()
{
  log "INFO\n$*"
}

#
# ### warn()
#
# Log arguments to the calling environments STDOUT preceeded by 'WARNING .
#
# ##### Input Parameters
#
# Strings to be logged.
#
# ##### Stream Outputs
#
# Prints arguments passed in to the calling environments STDOUT with a newline
# character appended and 'WARNING ' prepended.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# Fails if no arguments are given.
#
# ##### Usage Examples
#
#     user$ info "Hello there! "
#     INFO Hello there!
#
warn()
{
  log "WARNING\n$*"
}

#
# ### debug()
#
# Log arguments to the calling environments STDOUT preceeded by 'DEBUG: .
#
# ##### Input Parameters
#
# Strings to be logged.
#
# ##### Stream Outputs
#
# Prints arguments passed in to the calling environments STDOUT with a newline
# character appended and 'DEBUG: ' prepended.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# Fails if no arguments are given.
#
# ##### Usage Examples
#
#     user$ debug "Hello there! "
#     DEBUG: Hello there!
#
debug()
{
  if (( ${debug_flag:=0} == 0 ))
  then
    log "DEBUG\n$*"
  fi
}

#
# ### error()
#
# Log arguments to the calling environments STDERR preceeded by 'ERROR '.
# Exits with status code 1.
#
# ##### Input Parameters
#
# Strings to be logged.
#
# ##### Stream Outputs
#
# Prints arguments passed in to the calling environments STDOUT with a newline
# character appended and 'ERROR ' prepended.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 1 for failure.
#
# ##### Failure Scenarios
#
# Fails if no arguments are given.
#
# ##### Usage Examples
#
#     user$ error "Hello there! "
#     ERROR Hello there!
#     *poof* shell closed...
#
error()
{
  set +o xtrace
  log "\nERROR\n\n$*\n" >&2
  disable_backtrace
  exit 1
}

#
# ### succeed()
#
# Log arguments to the calling environments STDOUT. Exits with status code 0.
#
# ##### Input Parameters
#
# Strings to be logged.
#
# ##### Stream Outputs
#
# Prints arguments passed in to the calling environments STDOUT with a newline
# character appended.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 0 for success
#
# ##### Failure Scenarios
#
# Fails if no arguments are given.
#
# ##### Usage Examples
#
#     user$ succeed "Hello there! "
#     Hello there!
#     *poof* shell closed...
#
succeed() {
  set +o xtrace
  log "$*"
  exit 0
}

#
# ### fail()
#
# Log arguments to the calling environments STDERR preceeded by 'ERROR '.
# Exits with status code 1.
#
# ##### Input Parameters
#
# Strings to be logged.
#
# ##### Stream Outputs
#
# Prints arguments passed in to the calling environments STDOUT with a newline
# character appended and 'ERROR ' prepended.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 1 for failure.
#
# ##### Failure Scenarios
#
# Fails if no arguments are given.
#
# ##### Usage Examples
#
#     user$ error "Hello there! "
#     ERROR Hello there!
#     *poof* shell closed...
#
fail()
{
  trace_flag=0
  backtrace "$*"
  exit 1
}


#
# ### verbose()
#
# Log arguments to the calling environments STDERR preceeded by 'ERROR '.
# Exits with status code 1.
#
# ##### Input Parameters
#
# Strings to be logged.
#
# ##### Stream Outputs
#
# Prints arguments passed in to the calling environments STDOUT with a newline
# character appended and 'ERROR ' prepended.
#
# ##### Environmental effects
#
# None.
#
# ##### Return Codes
#
# 1 for verboseure.
#
# ##### verboseure Scenarios
#
# verboses if no arguments are given.
#
# ##### Usage Examples
#
#     user$ verbose "w00t! "
#     user$ verbose_flag=1
#     user$ verbose "w00t! "
#     w00t!
#
verbose()
{
  if (( ${verbose_flag:=0} == 1 ))
  then
    log "$*"
  fi
}

# ### logrotate()
#
# Strategically rotate a logfile minimizing data loss.
#
# This function uses a copy, tail and truncate strategy.
#
# ##### Usage Examples
#
#     root# logrotate /var/log/my_logfile.log
#
logrotate()
{
  local _file="${1:-}"
  if [[ -z "${_file}" ]]
  then
    fail "Cannot rotate a log file as no log file was given."
  fi

  set_timestamp

  verbose "Tailing the file in a background process into a tail logfile."
  ( tail -n 0 -f "${_file}" > ${file}.$$.log )&

  local _tail_pid=$!

  verbose "Copying the file's contentes into a new timestamped file."
  cp "${_file}" "${_file}.${timestamp}"

  verbose "Truncating the file."
  cp /dev/null ${_file}

  verbose "Signaling the tail background process to stop."
  kill -QUIT ${_tail_pid}

  verbose "Appending the tail log to the new timestamped logfile."
  cat "${file}.$$.log" >> "${file}.${timestamp}"

  verbose "Compressing the timestamped file (gzip)"
  gzip -f -9 "${file}.${timestamp}"

  verbose "Removing temporary logfilek"
  # 6. Remove the temporary log file.
  rm "${file}.$$.log"
}

