#!/usr/bin/env bash

sets_help()
{
  modules ext/help

  description "BDSM extension sets management"

  action "sets" "List installed sets."
  action "sets known" "List extension sets that can be installed."
  action_separator
  action "sets install all" "Install all extension sets found on the known list."
  action "sets install {name}" "Install extension set {name} found on the known list."
  action "sets install {name} {uri}" "Install extension set {name} from the given {uri}."
  action "sets add" "Shortcut for install."
  action_separator
  action "sets update all" "Update all extension sets using remembered uris."
  action "sets update {name}" "Update extension set {name} using remembered uri."
  action "sets up" "Shortcut for update."
  action_separator
  action "sets uninstall {name}" "Remove extension set {name}."
  action "sets del" "Shortcut for uninstall."
  action_separator
  action "sets help" "Show this help."

  show_help usage
}

sets_list()
{
  local _path extensions COLUMNS=80

  for _path in "${extensions_search_paths[@]}"
  do
    if [[ "${_path}" =~ "${extension_sets_path}" ]]
    then
      log "${_path##${extension_sets_path}\/}:"
    elif [[ "${_path}" =~ "${extension_sets_home}" ]]
    then
      log "${_path##${extension_sets_home}\/}: # User set"
    else
      log "${_path##$bdsm_path\/}:"
    fi

    if extensions_in "$_path"
    then
      extensions=( ${found_extensions[@]} )
      echo ${extensions[@]} | xargs -s ${COLUMNS} | xargs -I '{}' echo "  - {}"
    else
      echo "  # No extensions in set"
    fi

    echo ""
  done
}

sets_list_known()
{
  local COLUMNS=80
  awk -F = '/^[^#]/ {printf "# %18s | %s\n", $1, $2 }' <<<"Set name=Repository"
  awk -F = '/^[^#]/ {printf "%20s   %s\n", $1, $2 }' < "${bdsm_path}/core/cli/config/known_sets"
}

sets_install()
{
  local _name="${1:-}" _uri="${2:-}"

  shift || fail "name must be the first parameter to sets_install()."

  [[ "${_name}" != "builtin" ]] ||
    error "builtin extension set may not be (re-)installed, except by updating BDSM core (bdsm get head)."

  [[ -n "${_uri}" ]] ||
    _uri=$( awk -F = "/^${_name}=/ {print \$2 }" < "${bdsm_path}/core/cli/config/known_sets" )

  [[ -n "${_uri}" ]] ||
    error "Cannot find ${_name} in known extension sets list."

  local _identifier="$(scm_identifier "${_uri}")"

  log_step "bdsm-${_name}" # TODO: if fail, log_step failure
  ensure_paths_exist "${extension_sets_home}"
  enter "${extension_sets_home}"
  fetch_uri "${_uri}" "${src_path}/${_identifier}"
  remove_paths "${_name}"
  copy_directory "${src_path}/${_identifier}" to "${_name}"
  log_step success
}

sets_install_all()
{
  local _set _name _uri COLUMNS=80

  for _set in $( awk '/^[^#]/' < "${bdsm_path}/core/cli/config/known_sets" )
  do
    _name="${_set%%=*}"
    _uri="${_set##*=}"
    sets_install "${_name}" "${_uri}"
  done
}

sets_update()
{
  local _name _uri

  (( $# > 0 )) ||
    error "Cannot update extension sets without giving their names! "

  for _name in "$@"
  do
    case "${_name}" in
      builtin|ext)
        error "Extension set ${_name} cannot be updated."
        ;;
    esac

    if [[ ! -d "${extension_sets_home}/${_name}" ]]
    then
      if in_search_paths detect_extension_existence "${_name}" \
      && [[ "${extension}" == "${_name}" ]] #do not count finding fallback default extension: bdsm
      then
        error "Extension set ${_name} is installed system wide and can not be updated by user."
      else
        error "Extension set ${_name} does not exist."
      fi
    else
      true
    fi

    if [[ ! -s "${extension_sets_home}/${_name}/.uri" ]]
    then
      log "Extension set ${_name} does not contain stored uri.\n"
      continue
    fi

    _uri=$( cat "${extension_sets_home}/${_name}/.uri" )

    if [[ -z "${_uri}" ]]
    then
      log "Extension set ${_name} does not contain stored uri."
    else
      sets_install "${_name}" "${_uri}"
    fi
  done
}

sets_update_all()
{
  local _name
  for _name in ${extension_sets_home}/*
  do
    case "${_name##*/}" in
      builtin|ext)
        # Skip those two
        ;;
      \*)
        log "No extension sets found for update."
        ;;
      *)
        sets_update "${_name##*/}"
        ;;
    esac
  done
}

sets_uninstall()
{
  local _name="$1"
  case "${_name}" in
    */*|.|..)
      error "Please specify a valid extension name."
      ;;
    builtin|ext)
      error "Extension set ${_name} cannot be removed."
      ;;
  esac
  enter "${extension_sets_home}"
  if [[ ! -d "${_name}" ]]
  then
      if in_search_paths detect_extension_existence "${_name}" \
      && [[ "${extension}" == "${_name}" ]] #do not count finding fallback default extension: bdsm
      then
        error "Extension set ${_name} is installed system wide and can not be uninstaled by user."
      else
        error "Extension set ${_name} does not exist."
      fi
  fi

  #TODO: are you sure ?

  log "Uninstalling extension set: ${_name}."
  rm -rf "${_name}"
}

sets_check_availability()
{
  # TODO: refactor this to take argument of uri to check instead.
  #       provide check_known_sets_availability or some such to wrap this.
  awk -F = '/^[^#]/ {printf "%20s   %s\n", $1, $2 }' < "${bdsm_path}/core/cli/config/known_sets" |
  "${bdsm_path}/bin/bdsm-ll" \
    printf "%s: " {} \; curl -s --head https://github.com/wayneeseguin/bdsm-{} \| awk "'/Status/{print \$2}'"
}

