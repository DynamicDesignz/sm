#!/bin/sh

sets_help()
{
  modules ext/help

  description "BDSM extension sets management"

  action "sets" "List installed sets."
  action "sets known" "List extension sets that can be installed."
  action_separator
  action "sets install all" "Install all extension sets found on the known list."
  action "sets install {name}" "Install extension set {name} found on the known list."
  action "sets install {name} [uri]" "Install extension set {name}, from [uri] if given."
  action "sets add {name} [uri]" "Shortcut for install."
  action_separator
  action "sets update all" "Update all extension sets using remembered uris."
  action "sets update {name}" "Update extension set {name} using remembered uri."
  action_separator
  action "sets uninstall {name}" "Remove extension set {name}."
  action "sets rm {name}" "Shortcut for uninstall."
  action_separator
  action "sets help" "Show this help."

  show_help usage
}

sets_list()
{
  local _path extensions COLUMNS=80

  for _path in "${extensions_search_paths[@]}"
  do
    [[ -d "${_path}"  ]] || continue

    if [[ "${_path}" =~ "${extension_sets_path}" ]]
    then
      log "${_path##${extension_sets_path}\/}:"
    elif [[ "${_path}" =~ "${extension_sets_home}" ]]
    then
      log "${_path##${extension_sets_home}\/}: # User set"
    elif [[ "${_path}" == "${extension_exts_home}" ]]
    then
      log "${_path##*\/}: # User set"
    else
      log "${_path##$sm_path\/}:"
    fi

    if extensions_in "$_path"
    then
      extensions=( ${found_extensions[@]} )
      echo ${extensions[@]} | xargs -s ${COLUMNS} | xargs -I '{}' echo "  - {}"
    else
      log "  # No extensions in set"
    fi
    log ""
  done
}

sets_list_known()
{
  local COLUMNS=80
  printf "# %18s | %s\n" "Set Name" "Repository"

  while read line
  do
    printf "%20s   %s\n" "${line/=*}" "${line/*=}"
  done < "${sm_path}/core/cli/config/known_sets"
}

sets_install()
{
  local _name _names="${1:-}" _extension_namespace
  shift || fail "Cannot install a set; No set name was given."

  _names=(${_names//,/ })
  _extension_namespace="${extension_sets_home#${sm_path}\/}"
  _extension_namespace="${_extension_namespace#${user_sm_path}\/}"

  for _name in ${_names[@]}
  do
    log_step "Installing ${_name} in ${_extension_namespace//\// }" set_install "${_name}" "$@" || true
  done
}

set_install()
{
  local _name="${1:-}"
  shift || fail "Cannot install a set; No set name was given."

  local _uri="${1:-}"
  shift || _uri=$( awk -F= "/^${_name}=/ {print \$2 }" < "${sm_path}/core/cli/config/known_sets" | tail -n 1 )

  local _identifier="$(scm_identifier "${_uri}")"

  [[ -n "${_uri}" ]] ||
    error "uri not given and cannot find ${_name} in known extension sets."

  ensure_paths_exist "${extension_sets_home}"
  enter "${extension_sets_home}"

  fetch_uri "${_uri}" "${src_path}/${_identifier}" "$@" || return $?

  [[ -z "${__vcs_failed}" ]] || return 1

  remove_paths "${_name}"
  copy_directory "${src_path}/${_identifier}" to "${_name}"
}

sets_install_all()
{
  local _set _name _uri COLUMNS=80

  while read _set
  do
    [[ "${line}" != \#* ]] || continue

    _name="${_set/=*}"
    _uri="${_set/*=}"
    sets_install "${_name}" "${_uri}" --on-fail true
  done < "${sm_path}/core/cli/config/known_sets"
}

sets_update()
{
  local _name _uri

  (( $# > 0 )) ||
    error "Cannot update extension sets without giving their names! "

  for _name in "$@"
  do
    case "${_name}" in
      builtin|ext)
        error "Extension set ${_name} cannot be updated."
        ;;
    esac

    if [[ ! -d "${extension_sets_home}/${_name}" ]]
    then
      if in_search_paths detect_extension_existence "${_name}"
      then
        error "Extension set ${_name} is installed system wide and can not be updated by user."
      else
        error "Extension set ${_name} does not exist."
      fi
    else
      true
    fi

    if [[ ! -s "${extension_sets_home}/${_name}/.uri" ]]
    then
      log "Extension set ${_name} does not contain stored uri."
      continue
    fi

    _uri=$( cat "${extension_sets_home}/${_name}/.uri" )

    if [[ -z "${_uri}" ]]
    then
      log "Extension set ${_name} does not contain stored uri."
    else
      sets_install "${_name}" "${_uri}"
    fi
  done
}

sets_update_all()
{
  local _name
  for _name in ${extension_sets_home}/*
  do
    [[ -d "${_name}"  ]] || continue

    case "${_name##*/}" in
      (builtin|ext)
        # Skip those two
        ;;
      (\*)
        log "No extension sets found for update."
        ;;
      (*)
        sets_update "${_name##*/}"
        ;;
    esac
  done
}

sets_uninstall()
{
  local _name="$1"
  case "${_name}" in
    */*|.|..)
      error "Please specify a valid extension name."
      ;;
    builtin|ext)
      error "Extension set ${_name} cannot be removed."
      ;;
  esac

  enter "${extension_sets_home}"

  if [[ ! -d "${_name}" ]]
  then
    if in_search_paths detect_extension_existence "${_name}"
    then
      error "Extension set ${_name} is installed system wide and can not be uninstaled by user."
    else
      error "Extension set ${_name} does not exist."
    fi
  fi

  log_step "Uninstalling extension set: ${_name}." rm -rf "${_name}"
}

sets_check_availability()
{
  local _set _line _args=($@)

  # TODO: refactor this to take argument of uri to check instead.
  #       provide check_known_sets_availability or some such to wrap this.
  while read _set
  do
    case "$line" in
      (^#)
        true # Skipt comment lines
        ;;
      (*)
        while read _line
        do
          [[ "${_line}" == Status* ]] || continue
          echo "${_set/=*}" "${_line/*:}"
          break
        done < <(curl -s --head https://github.com/sm/sm-"${_set/=*}")
        ;;
    esac
  done < "${sm_path}/core/cli/config/known_sets"
}

