#!/bin/sh

__sm.config.read()
{
  local _extension="$1" _file="$2" _key="$3" _variable="$4" _prefix="$5" _temp _value

  if [[ -z "${_variable}" ]]
  then
    _variable="${_key}"
  fi
  if [[ -n "${_prefix}" ]]
  then
    _variable="${_prefix}_${_variable}"
  fi

  # Run search in the same process to initialize cache variables.
  __sm.config.settings.search ${_extension} "${_file}" > /dev/null

  for _file in  $( __sm.config.settings.search ${_extension} "${_file}" )
  do
    _value="$(files hash from "${_file}" key "${_key}")"
    [[ -z "${_value}" ]] || break
  done

  eval "${_variable}=\"${_value}\""
}

__sm.config.write()
{
  local _extension="$1" _file="$2" _key="$3" _value="$4"
}

__sm.config.settings.search()
{
  trace_filter config_search

  local extension=$1 setting=$2 _path paths

  paths=( "/etc/sm/${extension}" "$HOME/.sm/${extension}" ) # Standard paths

  if __sm.extension.path "${extension}"
  then
    paths+=( "${extension_path}/config" )
  fi

  for _path in "${settings_search_path_append[@]}"
  do # Additional paths
    __sm.config.settings.search.path.update "${_path}"
    paths+=( "${_path}/${extension}" )
  done

  for _path in "${paths[@]}"
  do # Print existing paths.
#    if paths exist "${_path}" && ! files are empty "${_path}/${setting}"
    if [[ -d "${_path}" &&  -f "${_path}/${setting}" && -s "${_path}/${setting}" ]]
    then
      printf "${_path}/${setting}\n"
    fi
  done
}

__sm.config.settings.search.path.update()
{
  local path=$1 _uri

  if __sm.string.contains "${path}" "${__sm_settings_search_cache[*]}"
  then
    return 0
  fi

  if files exist "${path}/.uri" && ! files are empty "${_path}/.uri"
  then
    _uri="$( __sm.vcs.read_uri "${path}/.uri" )"
    fetch_uri "${_uri}" "${path}" >&2
  fi

  __sm_settings_search_cache+=( "${path}" )
}

