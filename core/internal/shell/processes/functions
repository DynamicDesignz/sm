#!/bin/sh

__sm.process.lockfile.lock()
{
  local _lockfile
  _lockfile="${1:-}"
  shift ||
    __sm.log.fail "No lockfile was specified as the first parameter."

  printf "$$" >> "${_lockfile}" # *Append* current process's pid to the lockfile

  # Now read in the first pidfile from the lockfile.  This means that the first
  # instance that successfully writes its pid to the lockfile obtains the lock.
  read -r _pid < "${_lockfile}"

  # If the pidfile read in matches the pid of the current process, then
  if [[ "${_pid}" != "$$" ]]
  then
    __sm.log.error "Another process already owns the lockfile; exiting."
  fi

  # The currently running process has the lock; immediately add an on-exit
  # hook that removes the lockfile when the process exits, thus relinquishing
  # the filesystem-level lock. This also preserves existing EXIT code.
  traps on exit "cd '$PWD';rm -f ${_lockfile}"

  return 0 # The lock has been obtained! Proceed with nefarious things!
}
