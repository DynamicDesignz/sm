#!/bin/sh

__sm.templates.find()
{
  typeset -g template_path template_name
  typeset _extensions_path _extension _template_path _params_path
  _extensions_path="$1"

  (( $# )) && shift || __sm.log.fail "No extensions path and extension name given."

  _params_path="$*"
  _params_path="${_params_path// //}"
  _extension="${_params_path%%/*}"
  _params_path="${_params_path#*/}"
  _template_path="${_extensions_path}/${_extension}/templates/${_params_path}"

  if [[ -f "${_template_path}.template" ]]
  then
    template_path="${_template_path}.template"
    template_name="${_extension}/${_params_path}"
    return 0
  elif [[ -f "${_template_path}.mustache" ]]
  then
    template_path="${_template_path}.mustache"
    template_name="${_extension}/${_params_path}"
    return 0
  elif [[ -f "${_template_path}" ]]
  then
    template_path="${_template_path}"
    template_name="${_extension}/${_params_path}"
    return 0
  fi
  return 1
}

__sm.templates.exists()
{
  if __sm.extension.in.paths __sm.templates.find "$@" ||
     __sm.cli.in.path __sm.templates.find "$@"
  then
    __sm.log.search "template" "$template_name" "${template_path##${sm_path}\/}"
    return 0
  else
    return 1
  fi
}

__sm.templates.install()
{
  __sm.templates.exists "${_name}" || __sm.log.fail "No template found matching '${_name}'."

  _template="${template_path}"
  _name="$(basename "${_name}")"

  path create "$(dirname "${_target}")"

  if path exists "${_target}"
  then
    if path exists "${_target}/${_name}"
    then
      __sm.log.fail "Cannot install the template '${_template}' to ${_target}/${_name}, as it is a directory."
    fi
    file copy \
      from "${_template}" \
      to "${_target}/${_name}" \
      mode "${_mode}" \
      owner "${_owner}"
  else
    if (( ${_templates_append_flag:-0} == 0 ))
    then
      file copy force \
        from "${_template}" \
        to "${_target}" \
        mode "${_mode}" \
        owner "${_owner}"
    else
      cat "${_template}" >> "${_target}"
      file change mode "${_mode}" "${_target}"
      file change owner "${_owner}" "${_target}"
    fi
  fi
}

__sm.templates.seed()
{
  typeset _template _owner _mode _hash _strings temporary _key _value _variable_name

  _template="${1}"
  _owner="${2}"
  _mode="${3}"
  _variable_name="${4}"
  shift 4
  _hash=("$@")
  _strings=()
  temporary=${_template}.${timestamp}.$$

  if ! file exists "${_template}"
  then __sm.log.fail "template file '${_template}' does not exist." ; fi

  if array is empty ${_variable_name:-"_hash"}
  then
    __sm.log.fail "Cannot seed template '${_template}';"\
      " No replacement keys were specified."
  fi

  if ! array is even ${_variable_name:-"_hash"}
  then
    __sm.log.fail "Cannot seed template;"\
      " Every replacement key must have a replacement value."
  fi

  eval "
  for (( index=1 ; index <= \${#${_variable_name:-"_hash"}[@]} ; index++ ))
  do
    _key=\"\${${_variable_name:-"_hash"}[\${index}]}\"
    _value=\"\${${_variable_name:-"_hash"}[\$((++index))]}\"
    _strings+=(-e \"s#{{\${_key}}}#\${_value}#g\")
  done"

  sed "${_strings[@]}" ${_template} > ${temporary} ||
    __sm.log.error "There was an error (?) seeding the template '${_template}';" \
    " Most often this is due to filesystem permissions / disk full."

  if ! files exist "${temporary}"
  then
    __sm.log.fail "Something went very wrong;"\
      " the template intermediate file '${temporary}' does not exist?! "
  fi

  file move \
    from "${temporary}" \
    to "${_template}" \
    mode "${_mode}" \
    owner "${_owner}"
}

__sm.templates.update()
{
  typeset _template _target _incoming _hash _strings _variables
  _template="${1:-}"
  _target="${2:-}"
  (( $# )) && shift || __sm.log.fail "Cannot update seed template;"\
    " Template name was not given as the first parameter."
  (( $# )) && shift || __sm.log.fail "Cannot update seed template;"\
    " Template target was not given as the second parameter."

  _incoming="${1:-${_target}.incoming}"
  (( $# )) && shift || true
  _hash=("$@")
  _strings=()
  _variables="${_target}.var.$$"

  if ! __sm.templates.exists "${_template}"
  then
    __sm.log.fail "Cannot update seed template;"\
      " No template was found matching '${_template}'."
  fi

  _template="${template_path}"

  for (( index=1 ; index <= ${#_hash[@]} ; index++ ))
  do
    _strings+=(-e "s#{{${_hash[${index}]}}}#${_hash[$((++index))]}#g")
  done

  sed "${_strings[@]}" ${_template} | grep -E '^[^#]+=' > "${_variables}"

  diff -wN --left-column \
    <( grep -Eo '(^[^#]+=)' "${_target}" 2>/dev/null | sed 's/export //' | sort ) \
    <( grep -Eo '(^[^#]+=)' "${_variables}" | sed 's/export //' | sort ) | \
    awk -F '> ' '/^>/ {print$2}' | \
    xargs -n 1 | \
    xargs -I {} grep "^[^#]*{}" "${_variables}" > "${_incoming}"

  rm "${_variables}"
}


# template diff {name}
# Identical to install except that instead of doing the install it will check the files for differences.
# 0 - identical
# 1 - difference ; show diff changes as well
#
# template diff \
#   "${extension}/before_release" \
#   to "${shared_path}/deploy/before_release" \
#   mode 0755
#
__sm.templates.diff()
{
  __sm.templates.exists "${_name}" ||
    __sm.log.fail "No template found matching '${_name}'."

  _template="${template_path}"
  _name="$(basename "${_name}")"

  # Step 1. change the target,
  # Step 2. do the actual install
  # Step 3. then do diff of changed target vs actual
  # Step 4. check mode,owner

  # 1. file missing
  # 2. Actual diff differences
  # 3. different owner than specified (if specified)
  # 4. different mode than specified (if specified)
}
