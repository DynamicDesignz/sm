#!/bin/sh

__sm.json.get()
{
  typeset _type _path _default _variable _json_file _array_name
  _json_file="$1" && shift

  # TODO: support 'as {variable name}'
  while (( $# ))
  do
    _variable= # Ensure _variable is empty for each next round.
    _default= # Ensure _default is empty for each next round.
    _type="$1" && shift
    _path="$1" && shift
    case "${_type}" in
      (into)
        _array_name="${_path}"
        typeset -ga ${_array_name}
        ;;
      (string)
        while :
        do
          case "${1}" in
            (as|variable)
              _variable="${2}" && shift 2 ||
                __sm.log.fail "A variable name must follow keyword '${_token}'"
              ;;
            (default)
              _default="$2" && shift 2
              ;;
            (*)
              break
              ;;
          esac
        done

        if [[ -z "${_variable}" ]]
        then _variable="${_path//\//_}" ; fi

        typeset -g ${_variable} >/dev/null

        if ! eval "${_variable}=$("${sm_path}/core/cli/bin/json/get" "${_path}" "${_json_file}")"
        then
          eval "${_variable}="
        fi

        if eval "[[ -z \"\${${_variable}}\" && -n \"${_default}\" ]]"
        then
          eval "${_variable}=\"${_default}\""
        fi

        if [[ -n "${_array_name}" ]]
        then
          eval "${_array_name}+=(${_variable} \${${_variable}})"
        fi
        ;;
      (array)
        while :
        do
          case "${1}" in
            (as|variable)
              _variable="${2}" && shift 2 ||
                __sm.log.fail "A variable name must follow keyword '${_token}'"
              ;;
            (default)
              _default="$2" && shift 2
              ;;
            (*)
              break
              ;;
          esac
        done

        if [[ -z "${_variable}" ]]
        then _variable="${_path//\//_}" ; fi

        typeset -ga ${_variable} >/dev/null

        if ! eval "${_variable}=($("${sm_path}/core/cli/bin/json/get" "${_path}" "${_json_file}"))"
        then
          eval "${_variable}=()"
        fi

        if eval "[[ -z \"\${${_variable}}\" && -n \"${_default}\" ]]"
        then
          eval "${_variable}=(${_default})"
        fi

        if [[ -n "${_array_name}" ]]
        then
          eval "${_array_name}+=(${_variable} \${${_variable}})"
        fi
        ;;
    esac
  done
}

__sm.json.set()
{
  NIY
}

