#!/bin/sh

__sm.json.cli()
{
  trace_filter json || set -o xtrace

  set +o xtrace

  typeset _token index
  typeset -a _ignored_args _ext_args

  _ext_args=( $@ )

  for (( index=1 ; index <= ${#_ext_args} ; index++ ))
  do
    _token="${_ext_args[$index]}"
    case "${_token}" in
      (json_uri|json_file)
        json_uri="${_ext_args[$((++index))]}"
        [[ -n "${json_uri}" ]] ||
          __sm.log.error "a json uri/path must follow keyword '${_token}'"
        ;;
      (data)
        data_path="${_ext_args[$((++index))]}"
        [[ -n "${data_path}" ]] ||
          __sm.log.error "a path must follow keyword 'data'"
        ;;
      (user)
        package_user="${_ext_args[$((++index))]}"
        [[ -n "${package_user}" ]] ||
          __sm.log.error "a user name must follow keyword 'user'"
        ;;
      (version)
        package_version="${_ext_args[$((++index))]}"
        [[ -n "${package_version}" ]] ||
          __sm.log.error "a version number string must follow keyword 'version'"
        ;;
      (base_url)
        package_base_url="${_ext_args[$((++index))]}"
        [[ -n "${package_base_url}" ]] ||
          __sm.log.error "a base path url must follow keyword 'base_url'"
        ;;
      (file)
        package_file="${_ext_args[$((++index))]}"
        [[ -n "${package_file}" ]] ||
          __sm.log.error "a path must follow keyword 'file'"
        ;;
      (dir)
        package_directory="${_ext_args[$((++index))]}"
        [[ -n "${package_directory}" ]] ||
          __sm.log.error "a single extracted directory name must follow keyword 'dir'"
        ;;
      (archive_format)
        archive_format="${_ext_args[$((++index))]}"
        [[ -n "${archive_format}" ]] ||
          __sm.log.error "an archive format (tar.gz,tar.bz2,tar.xz,zip,...) must follow keyword 'archive_format'"
        ;;
      (md5)
        package_md5="${_ext_args[$((++index))]}"
        [[ -n "${package_md5}" ]] ||
          __sm.log.error "an md5 sum string must follow keyword 'md5'"
        ;;
      (force)
        force_flag=1
        ;;
      (static)
        static_flag=1
        __sm.package.configure.flags --static
        ;;
      (shared)
        shared_flag=1
        __sm.package.configure.flags --enable-shared
        ;;
      (licence)
        extension_license
        succeed
        ;;
      (help)
        __sm.package.usage
        succeed
        ;;
      (--with*|--enable*|--disable*)
        __sm.package.configure.flags "${_token}"
        ;;
      (*)
        _ignored_args+=("${_token}")
        ;;
    esac

  done

  __sm.package.init "${_ignored_args[@]}"
}

__sm.json.get()
{
  trace_filter json || set -o xtrace
  typeset _type _path _default _variable _json_uri _json_uri_src _array_name

  _json_uri_src="$1" && shift
  _json_uri="${sm_temp_path}/${_json_uri_src##*/}"

  fetch_uri "${_json_uri_src}" "${_json_uri}" # ensure uri maps to a file.

  # TODO: support 'as {variable name}'
  while (( $# ))
  do
    _variable= # Ensure _variable is empty for each next round.
    _default= # Ensure _default is empty for each next round.
    _type="$1" && shift
    _path="$1" && shift
    _default=""
    case "${_type}" in
      (into)
        _array_name="${_path}"
        typeset -ga ${_array_name}
        ;;
      (string)
        while :
        do
          case "${1}" in
            (as|variable)
              _variable="${2}" && shift 2 ||
                __sm.log.fail "A variable name must follow keyword '${_token}'"
              ;;
            (default)
              _default="$2" && shift 2
              ;;
            (*)
              break
              ;;
          esac
        done

        if [[ -z "${_variable}" ]]
        then _variable="${_path//\//_}" ; fi

        typeset -g ${_variable} >/dev/null

        if ! eval "${_variable}=$("${sm_path}/core/cli/bin/json/get" "${_path}" "${_json_uri}")"
        then
          eval "${_variable}=\"\""
        fi

        if eval "[[ -z \"\${${_variable}}\" ]]"
        then
          eval "${_variable}=\"${_default}\""
        fi

        if [[ -n "${_array_name}" ]]
        then
          eval "${_array_name}+=(${_variable} \"\${${_variable}}\")"
        fi
        ;;
      (array)
        while :
        do
          case "${1}" in
            (as|variable)
              _variable="${2}" && shift 2 ||
                __sm.log.fail "A variable name must follow keyword '${_token}'"
              ;;
            (default)
              _default="$2" && shift 2
              ;;
            (*)
              break
              ;;
          esac
        done

        if [[ -z "${_variable}" ]]
        then _variable="${_path//\//_}" ; fi

        typeset -ga ${_variable} >/dev/null

        if ! eval "${_variable}=($("${sm_path}/core/cli/bin/json/get" "${_path}" "${_json_uri}"))"
        then
          eval "${_variable}=()"
        fi

        if eval "[[ -z \"\${${_variable}}\" ]]"
        then
          eval "${_variable}=(\"${_default}\")"
        fi

        if [[ -n "${_array_name}" ]]
        then
          eval "${_array_name}+=(${_variable} \${${_variable}})"
        fi
        ;;
    esac
  done
}

__sm.json.set()
{
  trace_filter json || set -o xtrace
  NIY
}
