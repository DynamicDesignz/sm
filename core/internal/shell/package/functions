#!/bin/sh

__sm.package.error
{
  local _message="$1" _log="$2" _lines="$3"

  if [[ -n ${_log} && -s "${_log}" ]]
  then # Append tail of error log to the error message.
    _message="${_message}\n\nTail of ${_log}:\n$( tail -n ${_lines} ${_log} )"
  fi
  error "${_message}"
}

__sm.package.define()
{
  while (( $# > 0 ))
  do
    key="$1" && shift
    value="$1"
    if ! shift
    then
      if echo "$key" | grep '='
      then
        fail "Invalid key '${key}'; Most likely the '=' is supposed to be a space?"
      else
        fail "Value not specified for key '${key}'; They should be specified in key/value pairs :)"
      fi
    fi

    case "$key" in
      name)
        package_name="${value}"
        ;;
      version)
        package_version="${value}"
        ;;
      file)
        package_file="${value}"
        ;;
      dir)
        package_dir="${value}"
        ;;
      url)
        package_url="${value}"
        ;;
      base_url)
        package_base_url="${value}"
        ;;
      docs_url)
        package_docs_url="${value}"
        ;;
      patches_url)
        package_patches_url="${value}"
        ;;
      md5_url)
        package_md5_url="${value}"
        ;;
      bin_path)
        bin_path="${value}"
        ;;
      packages_path)
        packages_path="${value}"
        ;;
      source_path)
        source_path="${value}"
        ;;
      target_path)
        target_path="${value}"
        ;;
      archive_format)
        archive_format="${value}"
        ;;
      # TODO: Simplify into
      #(+([[[:alnum:]]|])_path|name|version|url|md5_url)
      #  eval "${key}=${value}"
      #  ;;
      *)
        fail "Unknown key '${key}' (value: ${value})."
      ;;
    esac
  done
}

__sm.package.configure.flags()
{
  local _flag

  for _flag in "$@"
  do
    if ! __sm.string.contains "${_flag}" "${configure_flags[*]}"
    then
      configure_flags+=( "${_flag}" )
    fi
  done
}

__sm.package.configure.flag()
{
  local _key="$1" _value="$2"

  if ! __sm.string.contains "${_key}=" "${configure_keys[*]}"
  then
    configure_keys+=( "${_key}=${_value}" )
  fi
}

