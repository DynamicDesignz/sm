#!/bin/sh

__sm.files.source()
{
  local _file _files=("$@")
  shift || fail "Cannot source files; No files were given."

  for _file in "${_files[@]}"
  do
    _file=${_file/\~\//$HOME\/} # Expand ~/ to full value of $HOME

    if ! file is empty "${_file}"
    then
      bash -n "${_file}" ||
        fail "Cannot source the file '${_file}'; Invalid syntax."

      source "${_file}" ||
        fail "There was an error sourcing the file '${_file}'."
    fi
  done
}

__sm.files.nonempty()
{
  local _file _files=("$@")
  shift || fail "Cannot return nonempty files; No files were given."

  _file=${_file/\~\//$HOME\/} # Expand ~/ to full value of $HOME

  for _file in "${_files[@]}"
  do
    file_is_nempty "${_file}" || printf "${_file}\n"
  done
}

__sm.files.remove()
{
  # TODO: add 'from' parameter
  local _file _files=("$@")
  shift || fail "Cannot remove files, as no files were given to remove."

  for _file in "${_files[@]}"
  do
    if [[ -f "${_file}" || -L "${_file}" ]]
    then
      rm -f "${_file}"

    elif [[ -d "${_file}" ]]
    then
      fail "Cannot remove the file ${_file}, as it is a directory."

    elif [[ -e "${_file}" ]]
    then
      fail "Failed to remove the file from the filesystem, "\
        "as the file exists as an unknown/unhandled filesystem entity type:"\
        "$(file "${_file}")."
    else
      return 0
    fi
  done
}

__sm.files.create()
{
  trace_filter filesystem
  local _file _path _files=("$@")
  shift || fail "Cannot ensure files exist; No files were given."

  for _file in "${_files[@]}"
  do
    ! [[ -f "${_file}" ]] || continue
    _path="${_file%\/*}"
    paths create "${_path}"
    touch "${_file}" ||
      fail "Error creating the file '${_file}' on the filesystem; "\
      " touch command returned error code '$?'."
  done
}

__sm.files.link()
{
  local _source="$1" _target="$2" _flags=(${3:-}) _path

  _path="${_target%\/*}"
  if [[ -n "${_path}" ]]
  then
    [[ -d "${_path}" ]] || mkdir -p "${_path}"
  fi

  ln ${_flags[@]} "${_source}" "${_target}" ||
    fail "Failed to create a symbolic link from '${_source}' to '${_target}';"\
    "'ln -fs' command failed with error code '$?'."
}

__sm.files.move()
{
  local _source="$1" _target="$2" _flags=($3) #_mode="$4" _owner="$5"
  shift 3
  local _file _files=("$@")

  if [[ -n "${_files}" ]]
  then
    for _file in "${_files[@]}"
    do
      mv ${_flags[@]} "${_source}/${_file}" "${_target}/${_file}" ||
        fail "There was an error ($?) moving the source '${_source}/${_file}'" \
        "to the target '${_target}/${_file}'."

#      if [[ -n "${_mode}" ]]
#      then
#        chmod "${_mode}" "${_target}/${_file}" ||
#          warn "There was an error ($?) changing"\
#          " target's '${_target}' mode to '${_mode}'."
#      fi
#
#      if [[ -n "${_owner}" ]]
#      then
#        chown "${_owner}" "${_target}/${_file}" ||
#          warn "There was an error ($?) changing"\
#          " target's '${_target}' owner to '${_owner}'."
#      fi
    done
  else # moving single file
    mv ${_flags[@]} "${_source}" "${_target}" ||
      fail "There was an error ($?) moving the source '${_source}'" \
      "to the target '${_target}'."

#    if [[ -n "${_mode}" ]]
#    then
#      chmod "${_mode}" "${_target}" ||
#        warn "There was an error ($?) changing"\
#        " target's '${_target}' mode to '${_mode}'."
#    fi
#
#    if [[ -n "${_owner}" ]]
#    then
#      chown "${_owner}" "${_target}" ||
#        warn "There was an error ($?) changing"\
#        " target's '${_target}' owner to '${_owner}'."
#    fi
  fi
}

#__sm.files.copy()
#{
#  local _source="$1" _target="$2" _flags=($3) _mode="$4" _owner="$5"
#  shift 5
#  local _file _files=("$@")
#
#  if [[ -n "${_files}" ]]
#  then
#    for _file in "${_files[@]}"
#    do
#      cp ${_flags[@]} "${_source}/${_file}" "${_target}/${_file}" ||
#        fail "There was an error ($?) moving the source '${_source}/${_file}'" \
#        "to the target '${_target}/${_file}'."
#
#      if [[ -n "${_mode}" ]]
#      then
#        chmod "${_mode}" "${_target}/${_file}" ||
#          warn "There was an error ($?) changing"\
#          " target's '${_target}' mode to '${_mode}'."
#      fi
#
#      if [[ -n "${_owner}" ]]
#      then
#        chown "${_owner}" "${_target}/${_file}" ||
#          warn "There was an error ($?) changing"\
#          " target's '${_target}' owner to '${_owner}'."
#      fi
#    done
#  else # moving single file
#    cp ${_flags[@]} "${_source}" "${_target}/" ||
#      fail "There was an error ($?) moving the source '${_source}'" \
#      "to the target '${_target}'."
#
#    if [[ -n "${_mode}" ]]
#    then
#      chmod "${_mode}" "${_target}" ||
#        warn "There was an error ($?) changing"\
#        " target's '${_target}' mode to '${_mode}'."
#    fi
#
#    if [[ -n "${_owner}" ]]
#    then
#      chown "${_owner}" "${_target}" ||
#        warn "There was an error ($?) changing"\
#        " target's '${_target}' owner to '${_owner}'."
#    fi
#  fi
#}

__sm.files.copy()
{
  local _source="$1" _target="$2" _flags=($3)
  shift 3
  local _file _files=("$@")

  if [[ -n "${_files[*]}" ]]
  then
    for _file in "${_files[@]}"
    do
      cp ${_flags[@]} "${_source}/${_file}" "${_target}/${_file}" ||
        fail "There was an error ($?) moving the source '${_source}/${_file}'" \
        "to the target '${_target}/${_file}'."
    done
  else # moving single file
    cp ${_flags[@]} "${_source}" "${_target}" ||
      fail "There was an error ($?) moving the source '${_source}'" \
      "to the target '${_target}'."
  fi
}

__sm.files.chown()
{
  local _owner="$1" #_flags=($2)
  shift #2
  local _file _files=("$@")

  chown ${_flags[@]} "${_owner}" "${_files[@]}" ||
    fail "There was an error ($?) chowning"\
    " files '${_files[@]}' owner to '${_owner}'."
}

__sm.files.chmod()
{
  local _mode="$1" #_flags=($2)
  shift #2
  local _file _files=("$@")

  chown ${_flags[@]} "${_mode}" "${_files[@]}" ||
    fail "There was an error ($?) chowning"\
    " files '${_files[@]}' owner to '${_owner}'."
}

__sm.files.hash()
{
  local _file="$1" _key="$2" _value="${3:-}"

  shift || fail "File path/name not given.\n"\
  " => Usage: $0 <filename> <key> [value]"

  local _key="${1:-}"
  shift || fail "Key not given.\n"\
    " => Usage: $0 <filename> <key> [value]"

  local _path=$(dirname "${_file}") # Note this will be '.' only if a file name was given.

  [[ -d "${_path}" ]] || fail "Cannot access the database file '${_file}'; "\
    "'${_path}' does not exist on the filesystem."

  files create "$_file"

  value="$*"

  case "$value" in
    unset|delete)
      sed -i.tmp "s#^${_key}=.*\$##" "${_file}"
      ;;
    *)
      if [[ -z "${value}" ]]
      then
        awk -F= '/^'"${_key}"'=/{print $2}' "${_file}"
      else
        if ! awk -F= "/^'"${_key}"'=/{print $2}" "${_file}" >/dev/null 2>&1
        then
          echo "${_key}=$value" >> "${_file}"
        else # Overwrite.
          sed -i.tmp "s#^${_key}=.*\$#${_key}=$value#" "${_file}"
        fi
      fi
      ;;
  esac
}

__sm.files.are.executable()
{
  local _file _files="${$@}"
  for _file in "${_files[@]}"
  do
    [[ -r "${_file}" && -x "${_file}" ]] || return 1
  done
}

__sm.files.exist()
{
  trace_filter filesystem
  local _file="${1:-}"
  shift || fail "Cannot check to see if a file exists;"\
    " No name/path was given."
  [[ -f "${_file}" ]]
}

__sm.files.are.empty()
{
  trace_filter filesystem
  local _file="${1:-}"
  shift || fail "Cannot check if a file is empty;"\
    " No file path/name was given."

  [[ -f "${_file}" && ! -s "${_file}" ]]
}

__sm.files.contain()
{

  local _string="$1" _regex="$2"
  shift 2
  local _file _files=("$@")

  for _file in ${_files[@]}
  do
    [[ -f "${_file}" ]] || fail "'${_file}' is not a file."
  done

  if [[ -n "${_regex}" ]]
  then
    for _file in "${_files[@]}"
    do
      grep "${_regex}" "${_file}" >/dev/null 2>&1 || return 1
    done
  else
    for _file in "${_files[@]}"
    do
      grep "${_string}" "${_file}" >/dev/null 2>&1 || return 1
    done
  fi
}

__sm.files.containing()
{
  local _string="$1" _regex="$2"
  shift 2
  _files=("$@") _file

  [[ -f "${_file}" ]] || fail "'${_file}' is not a file."

  if [[ -n "${_regex}" ]]
  then
    for _file in "${_files[@]}"
    do
      if grep "${_regex}" "${_file}" >/dev/null 2>&1
      then
        echo "${_file}"
      fi
    done
  else
    for file in "${_files[@]}"
    do
      if grep "${_string}" "${_file}" >/dev/null 2>&1
      then
        echo "${_file}"
      fi
    done
  fi
}

__sm.files.are.symlinks()
{
  local _file _files=("$@")
  for _file in "${_files[@]}"
  do
    [[ -L "${_file}" ]] || return 1
  done
}

__sm.files.sha.256()
{
  local _sum _files=("$@")
  local _sums=($(shasum -a 256 "${_files[@]}"))
  for _sum in "${_sums[@]}"
  do
    echo "${_sum// *}"
  done
}

__sm.files.sha.512()
{
  local _sum _files=("$@")
  local _sums=($(shasum -a 512 "${_files[@]}"))
  for _sum in "${_sums[@]}"
  do
    echo "${_sum// *}"
  done
}

__sm.files.write()
{
  local _string="$1" _target="$2" _flags=($3)
  printf "${_string}\n" | tee ${_flags[@]} "${_file}" >/dev/null
}

__sm.files.in()
{
  local _file _paths=() _file_paths=($@)
  for _path in "${_paths[@]}"
  do
    [[ -d "${_path}" ]] || fail "'${_path}' is not a valid path! "

    shopt -s nullglob
    _paths=( "${_file_paths}"/* )
    shopt -u nullglob

    for _file in "${_paths[@]}"
    do
      [[ -f "${_file}" ]] || continue
      echo "${_file}"
    done
  done
}

__sm.files.within()
{
  local _paths=("$@")
  for _path in "${_paths[@]}"
  do
    [[ -d "${_path}" ]] || fail "'${_path}' is not a directory!"
    for _entry in "${_path}"/*
    do
      if [[ -d "${_entry}" ]]
      then
        __sm.files.within "${_entry}"
      else
        if [[ -f "${_entry}" || -L "${_entry}" ]]
        then
          echo "${_entry}"
        fi
      fi
    done
  done
}

__sm.files.within.matching()
{
  local _string="$1" _regex="$2" _file
  shift 2
  _paths=("${@}")
  shopt -s nullglob
  for _path in "${_paths}"
  do
    for _file in "${_path}"/*
    do
      if [[ -d "${_file}" ]]
      then
        __sm.files.within.matching "${_string}" "${_regex}" "${_file}"
      else
        if [[ -n "${_regex}" ]]
        then
          if [[ "${_file}" == ${_regex} ]]
          then
            echo "${_file}"
          fi
        else
          if [[ "${_file}" == ${_string} ]]
          then
            echo "${_file}"
          fi
        fi
      fi
    done
  done
  shopt -u nullglob
}

__sm.files.md5()
{
  local _files=("$@") _file _command _md5

  if command exists "md5sum"
  then
    _command="md5sum"
  elif command exists md5
  then
    _command="md5"
  else
    error "Could not find a suitable MD5 command (md5/md5sum) in PATH."
  fi

  for file in "${_files[@]}"
  do
    if _md5="$(${_command} "$_file" 2>/dev/null)"
    then
      printf "${_md5// *}"
    else # Should this be error ?
      warn "There was an unknown error computing the MD5 value of "${_file}"."
      return 1
    fi
  done
}

#__sm.files.replace()
#{
#  local _regex="$1"
#  shift 1
#  local _files=("$@")
#
#}

__sm.files.replace()
{
  local _string="$1" _regex="$2"
  shift 2
  local _file _files=("$@")

  for _file in "${_files[@]}"
  do
    sed "s#${_regex//\#/\\#}#${_string//\#/\\#}#g" "${_file}" \
      > "${_file}.replaced" && mv "${_file}.replaced" "${_file}"
  done
}

__sm.files.open()
{
  local _files=("$@")
  os open "${_files[@]}"
}

