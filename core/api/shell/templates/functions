#!/bin/sh

# TODO: Rework this into a 1.0.0 module API

#
#    user$ templates install "nginx.conf" \
#            to "${nginx_path}/nginx.conf" \
#            mode 0644 owner "${nginx_user}"
#
#    user$ templates seed "/etc/conf.d/${extension}.conf" \
#            prefix_path "${prefix_path}" \
#            init_scripts_path "${init_scripts_path}" \
#            data_path "${data_path}" \
#            confd_path "${confd_path}" \
#            extension "${extension}"
#
# Note that if you wish to eliminate all unset strings, pass the pair
#     ".*" ""
# as the last pair of arguments to templates seed.
#
template() { templates "$@" ; }
templates()
{
  trace_filter templates || set -o xtrace

  typeset _command _name _target _source _mode _owner _group _template _params \
    __templates_commands _token _variable_name
  typeset -g _templates_append_flag

  _templates_append_flag=0
  _source="${extension_templates_path}"
  _mode=0644
  _owner=$USER
  _params=()
  __templates_commands=(
    "exists=exist"
  )

  if __sm.command.detect "$*" "${__templates_commands[@]}"
  then
    _command="${__sm_command_dotted}"
    shift "${__sm_command_words}"
  else
    __sm.log.fail "No command given.\nUsage:  \npaths <command> ..."
  fi

  _name="$1"
  (( $# )) && shift || __sm.log.fail "Template name was not given"

  while (( $# > 0 ))
  do
    _token="${1}" && shift
    case "${_token}" in
      (to)
        _target="$1"
        (( $# )) && shift ||
          __sm.log.fail "A target path must follow keyword 'to'"
        ;;
      (mode)
        _mode="$1"
        (( $# )) && shift ||
          __sm.log.fail "A file mode must follow keyword 'mode'"
        ;;
      (owner)
        _owner="$1"
        (( $# )) && shift ||
          __sm.log.fail "An owner name must follow keyword 'owner'"
        ;;
      (group)
        _group="$1"
        (( $# )) && shift ||
          __sm.log.fail "A group name must follow keyword 'group'"
        ;;
      (from)
        __sm.log.fail "'from' keyword is no longer supported"
        ;;
      (with|variables)
        if [[ "${1}" == "from" ]]
        then
          shift
          _variable_name="${1}"
        else
          _params+=("$@")
          break
        fi
        ;;
      (append)
        _templates_append_flag=1
        ;;
      (*)
        _params+=("${_token}")
    esac
  done

  if [[ -n "${_group}" ]] && ! __sm.string.contains ":" "${_owner}"
  then _owner="${_owner}:${_group}" ; fi

  case "${_command}" in
    (install)
      __sm.templates.${_command} "${_name}" "${_variable_name}" "${_params[@]}"
      if (( ${#_params[@]} ))
      then
        __sm.templates.seed "${_target}" "${_owner}" "${_mode}" "${_variable_name}" "${_params[@]}"
      fi
      ;;
    (exist|exists)
      __sm.templates.exists "${_name}" "${_params[@]}"
      ;;
    (seed)
      __sm.templates.seed "${_name}" "${_owner}" "${_mode}" "${_variable_name}" "${_params[@]}"
      ;;
    (update)
      __sm.templates.${_command} "${_name}" "${_params[@]}"
      ;;
    (diff)
      # change the target, do the actual install then do diff.
      __sm.templates.diff "${_name}" "${_owner}" "${_mode}" "" "" "" "${_params[@]}"
      if (( ${#_params[@]} ))
      then
        __sm.templates.seed "${_target}" "${_owner}" "${_mode}" "${_params[@]}"
      fi
      ;;
    (*)
      __sm.log.fail "Unknown command '${_command}' for templates API."
      ;;
  esac
}
