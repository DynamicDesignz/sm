#!/usr/bin/env zsh

process2()
{
  trace_filter process2 || set -o xtrace
  typeset _command _token _name _timeout_start _timeout_stop
  typeset -a __process_commands _command_arr

  __process_commands=(
    "start"
    "stop"
    "restart"
    "running=is.running"
    "pid=pid.read"
  )

  if __sm.command.detect "$*" "${__process_commands[@]}"
  then
    _command="${__sm_command_dotted}"
    shift "${__sm_command_words}"
  else
    __sm.log.__sm.log.fail "No command given.\nUsage:  \npaths <command> ..."
  fi

  while (( $# ))
  do
    _token="$1" && shift
    case ${_token} in
      (name)
        _name="$1"
        shift || __sm.log.fail "Process name must be given after keyword '${_token}'"
        ;;
      (timeout)
        case "${_command}" in
          (start) _timeout_start="$1" ;;
          (stop)  _timeout_stop="$1"  ;;
          (*) __sm.log.fail "Keyword '${_token}' can not be used with '${_command}'." ;;
        esac
        shift || __sm.log.fail "Timeout must be given after keyword '${_token}'"
        ;;
      (timeout_start)
        _timeout_start="$1"
        shift || __sm.log.fail "Start timeout must be given after keyword '${_token}'"
        ;;
      (timeout_stop)
        _timeout_stop="$1"
        shift || __sm.log.fail "Stop timeout must be given after keyword '${_token}'"
        ;;
      (command)
        _command_arr=( "$@" )
        shift || __sm.log.fail "Command must be given after keyword '${_token}'"
        ;;
      (*)
        __sm.log.__sm.log.fail "Unknown token '${_token}'"
        ;;
    esac
  done

  case "${_command}" in
    (start)
      [[ -n "${_name}"          ]] || __sm.log.fail "Name must be given for '__sm.process2.${_command}'."
      [[ -n "${_timeout_start}" ]] || __sm.log.fail "Start timeout must be given for '__sm.process2.${_command}'."
      __sm.array.is.nonempty _command_arr || __sm.log.fail "Command must be given for '__sm.process2.${_command}'."

      if __sm.process2.${_command} "${_name}" "${_timeout_start}" "${_command_arr[@]}"
      then return 0
      else return $?
      fi
      ;;
    (stop)
      [[ -n "${_name}"          ]] || __sm.log.fail "Name must be given for '__sm.process2.${_command}'."
      [[ -n "${_timeout_stop}"  ]] || __sm.log.fail "Stop timeout must be given for '__sm.process2.${_command}'."

      if __sm.process2.${_command} "${_name}" "${_timeout_stop}"
      then return 0
      else return $?
      fi
      ;;
    (restart)
      [[ -n "${_name}"          ]] || __sm.log.fail "Name must be given for '__sm.process2.${_command}'."
      [[ -n "${_timeout_start}" ]] || __sm.log.fail "Start timeout must be given for '__sm.process2.${_command}'."
      [[ -n "${_timeout_stop}"  ]] || __sm.log.fail "Stop timeout must be given for '__sm.process2.${_command}'."
      __sm.array.is.nonempty _command_arr || __sm.log.fail "Command must be given for '__sm.process2.${_command}'."

      if __sm.process2.${_command} "${_name}" "${_timeout_start}" "${_timeout_stop}" "${_command_arr[@]}"
      then return 0
      else return $?
      fi
      ;;
    (is.running|pid.read)
      [[ -n "${_name}" ]] || __sm.log.fail "Name must be given for '__sm.process2.${_command}'."
      if __sm.process2.${_command} "${_name}"
      then return 0
      else return $?
      fi
      ;;
    (*)
      __sm.log.__sm.log.fail "Process API command '${_command}' s not handled."
      ;;
  esac
}
