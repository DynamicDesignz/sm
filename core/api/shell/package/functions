#!/bin/sh

# TODO: Rework this into a 1.0.0 module API
#
# ## package install
#
# Performs all package installation steps based on selected strategy:
# preinstall
#
# if gnu:
#     prefetch
#   fetch
#     preextract
#   extract
#     prepatch
#   patch
#     preconfigure
#   configure
#     prebuild
#   build
#     preinstall
#   install
#     preactivate
#   activate
#   service setup, if service module is loaded
#
# if binary:
#     prefetch
#   fetch
#     preextract
#   extract
#     preinstall
#   install
#     preactivate
#   activate
#   service setup, if service module is loaded
#
# postinstall
#
package()
{
  local _token _command _logfile _lines=50 _params=()

  while (( $# ))
  do
    _token="$1" && shift
    case "${_token}" in
      (log)
        _log="$1"
        shift || fail "Log file path/name must be given following keyword 'log'"
        ;;
      (lines)
        _lines="$1"
        shift || fail "Number of lines to show must be given following keyword 'lines'"
        ;;
      (message)
        _message="$1"
        shift || fail "Message must be given following keyword 'message'"
      ;;
      (configure)
        _command=configure
        case "$1" in
          (flag|flags)
            _subcommand="$1"
            shift
            ;;
          (*)
            fail "Unknown configure param '$1'."
            continue
            ;;
        esac
        ;;
      (key)
        _key="$1"
        shift || fail "Key name must follow keyword 'key'"
        ;;
      (*)
        if [[ -z "${_command}" ]]
        then
          _command="${_token}"
        else
          _params+=("${_token}")
        fi
        ;;
    esac
  done

  case "${_command}" in
    (install|uninstall)
      case "${package_strategy:=gnu}" in
        (gnu|binary|java)
          __sm.package.${package_strategy}.${_command}
          ;;
        *)
          fail "Unknown package strategy ${package_strategy}"
          ;;
      esac
      ;;
    (configure)
      case "${_subcommand}" in
        (flag)
          __sm.package.configure.flag "${_key}" "${_params[@]}"
          ;;
        (flags)
          __sm.package.configure.flags "${_params[@]}"
          ;;
        (*)
          __sm.package.configure
          ;;
      esac
      ;;
    (define)
      [[ -n "${_params}" ]] || fail "No '{key} {value}' pairs given."
      if array is even _params
      then
        __sm.package.define "${_params[@]}"
      else
        fail "Every key must have an associated value."
      fi
      ;;
    (initialize)
      declare -a package_dependencies
      declare -a configure_flags
      ;;
    (error)
      [[ -n "${_message}" ]] || fail "Message must be given for package error."
      __sm.package.error "${_params[@]}" "${_log}" "${_lines}"
      ;;
    (cli)
      __sm.package.cli "${_params[@]}"
      ;;
    (*)
      fail "Unknown package command '${_token}'"
  esac
}

