#!/bin/sh

# TODO: Rework this into a 1.0.0 module API

package()
{
  local _token _command _logfile _lines=50 _params=()

  while (( $# ))
  do
    _token="$1" && shift
    case "${_token}" in
      (log)
        _log="$1"
        shift || fail "Log file path/name must be given following keyword 'log'"
        ;;
      (lines)
        _lines="$1"
        shift || fail "Number of lines to show must be given following keyword 'lines'"
        ;;
      (message)
        _message="$1"
        shift || fail "Message must be given following keyword 'message'"
      ;;
      (configure)
        _command=configure
        case "$1" in
          (flag|flags)
            _subcommand="$1"
            shift
            ;;
          (*)
            fail "Unknown configure param '$1'."
            continue
            ;;
        esac
        ;;
      (key)
        _key="$1"
        shift || fail "Key name must follow keyword 'key'"
        ;;
      (*)
        if [[ -z "${_command}" ]]
        then
          _command="${_token}"
        else
          _params+=("${_token}")
        fi
        ;;
    esac
  done

  case "${_command}" in
    (configure)
      case "${_subcommand}" in
        (flag)
          __sm.package.configure.flag "${_key}" "${_params[@]}"
          ;;
        (flags)
          __sm.package.configure.flags "${_params[@]}"
          ;;
        (*)
          package_configure
          ;;
      esac
      ;;
    (define)
      [[ -n "${_params}" ]] || fail "No '{key} {value}' pairs given."
      if array is even _params
      then
        __sm.package.define "${_params[@]}"
      else
        fail "Every key must have an associated value."
      fi
      ;;
    (initialize)
      declare -a package_dependencies
      declare -a configure_flags
      ;;
    (error)
      [[ -n "${_message}" ]] || fail "Message must be given for package error."
      __sm.package.error "${_params[@]}" "${_log}" "${_lines}"
      ;;
    (*)
      fail "Unknown package command '${_token}'"
  esac
}

package_cli()
{
  local _ignored_args=() _package_args=( $@ ) _token
  local number_of_args=${#_package_args[@]} index

  for (( index=0 ; index < $number_of_args ; index++ ))
  do
    _token="${_package_args[$index]}"
    case "${_token}" in
      prefix)
        packages_path="${_package_args[$((++index))]}"
        [[ -n "${packages_path}" ]] ||
          error "a path must follow keyword 'prefix'"
        ;;
      src)
        src_path="${_package_args[$((++index))]}"
        [[ -n "${src_path}" ]] ||
          error "a path must follow keyword 'src'"
        ;;
      data)
        data_path="${_package_args[$((++index))]}"
        [[ -n "${data_path}" ]] ||
          error "a path must follow keyword 'data'"
        ;;
      user)
        package_user="${_package_args[$((++index))]}"
        [[ -n "${package_user}" ]] ||
          error "a user name must follow keyword 'user'"
        ;;
      version)
        package_version="${_package_args[$((++index))]}"
        [[ -n "${package_version}" ]] ||
          error "a version number string must follow keyword 'version'"
        ;;
      base_url)
        package_base_url="${_package_args[$((++index))]}"
        [[ -n "${package_base_url}" ]] ||
          error "a base path url must follow keyword 'base_url'"
        ;;
      file)
        package_file="${_package_args[$((++index))]}"
        [[ -n "${package_file}" ]] ||
          error "a path must follow keyword 'file'"
        ;;
      dir)
        package_directory="${_package_args[$((++index))]}"
        [[ -n "${package_directory}" ]] ||
          error "a single extracted directory name must follow keyword 'dir'"
        ;;
      archive_format)
        archive_format="${_package_args[$((++index))]}"
        [[ -n "${archive_format}" ]] ||
          error "an archive format (tar.gz,tar.bz2,tar.xz,zip,...) must follow keyword 'archive_format'"
        ;;
      md5)
        package_md5="${_package_args[$((++index))]}"
        [[ -n "${package_md5}" ]] ||
          error "an md5 sum string must follow keyword 'md5'"
        ;;
      force)
        force_flag=1
        ;;
      static)
        static_flag=1
        __sm.package.configure.flags --static
        ;;
      shared)
        shared_flag=1
        __sm.package.configure.flags --enable-shared
        ;;
      licence)
        extension_license
        succeed
        ;;
      help)
        package_usage
        succeed
        ;;
      --with*|--enable*|--disable*)
        __sm.package.configure.flags "${_token}"
        ;;
      *)
        _ignored_args+=("${_token}")
        ;;
    esac

  done

  package_init "${_ignored_args[@]}"
}

package_init()
{
  package_name="${1:-${package_name:-${extension}}}"

  [[ -n "${package_name}" ]] || fail "Package name must be given.\n"

  case "${package_name}" in
    *=*) # exact version specifier
      package_version="${package_name#*=}"
      package_name="${package_name%%=*}"
      ;;
    *:*) # minimum version specifier
      # TODO: concept of 'minimum' ;)
      package_version="${package_name#*:}"
      package_name="${package_name%%:*}"
      ;;
    *)
      true "${package_version:="${2:-}"}" "${archive_format:="${3:-}"}"
      ;;
  esac

  if command exists "${package_name}_initialize"
  then
    __sm.string.contains "${package_name}_initialize" "${FUNCNAME[*]}" ||
      "${package_name}_initialize"
  fi

  true \
    "${source_path:="${sm_path}/src"}" \
    "${archives_path:="${sm_path}/archives"}" \
    ${static_flag:=0}

  case "${package_strategy:-gnu}" in
    gnu)
      LDFLAGS="-L${active_path}/lib ${LDFLAGS:-}"
      CFLAGS="-I${active_path}/include ${CFLAGS:-} "
      if os is darwin && [[ -x /usr/bin/gcc-4.2 ]]
      then
        export CC=/usr/bin/gcc-4.2
      fi
      ;;
    *)
      fail "Unknown strategy ${package_strategy}"
      ;;
  esac

  export package_name packages_path package_name package_version archive_format \
    package_file package_url package_md5_url packages_path bin_path source_path \
    LDFLAGS CFLAGS package_default_version
  # Ensure that package_version is set at this point

  [[ -n "${package_default_version}" ]] || read_default version prefix package_default for ${package_name}
  [[ -n "${package_base_url}" ]] || read_default base_url    prefix package for ${package_name}
  [[ -n "${package_md5_url}"  ]] || read_default md5_url     prefix package for ${package_name}
  [[ -n "${package_user}"  ]]    || read_default user        prefix package for ${package_name}
  [[ -n "${website_url}"      ]] || read_default website_url prefix package for ${package_name}
  [[ -n "${archive_format}"   ]] || read_default archive_format             for ${package_name}

  local default_configure_flags _flag
  [[ -n "${default_configure_flags}" ]] || read_default configure_flags prefix default for ${package_name}
  __sm.package.configure.flags "${default_configure_flags[@]}"

  true \
    "${package_version:="${package_default_version}"}" \
    "${init_scripts_path:="$(init_scripts_path)"}" \
    "${archive_format:=tar.gz}" \
    "${package_file:="${package_name}-${package_version}.${archive_format}"}" \
    "${install_base_path:="${packages_path}/versions/${package_name}"}" \
    "${install_path:="${install_base_path}/${package_version}"}"

  package configure flag key --prefix "${install_path}"

  # This check should only happen in places that require a version...
  #[[ -n "${package_version}" ]] ||
  #  fail "Package version must be specified.\n"\
  #  "(For example version=x.y.z set in extension's config/defaults file.)\n"

  fhs_dirs=( bin etc include lib libexec sbin share man )

  paths create "${active_path}"

  for dir in ${fhs_dirs}
  do
    paths create "${active_path}/${fhs_dirs}"
  done

  if user is root
  then
    true \
      "${log_path:="/var/log/${package_name}"}" \
      "${package_user:="${package_name}"}"
  else
    true \
      "${log_path:="${active_path}/log"}" \
      "${package_user:="$USER"}"
  fi

  extension_patches_path="${extension_path}/patches"
}

#
# ## package\_install
#
# Performs all package installation steps:
# * download
# * extract
# * patch
# * confiure
# * build
# * install
# * postinstall
# * activation
# * service setup, if service module is loaded
#
# ### Usage Examples
#
# Example Usage:
#
# user$ package_definition \
#         name "bash" \
#         version "4.2" \
#         url "ftp.gnu.org/gnu/bash/"
#
# user$ package_install
#
package_install()
{
  (( $# == 0 )) || package_cli $@

  if package_installed_versions | grep -q "${package_version}" &&
    [[ "${force_flag}" != "1" ]]
  then
    log "The ${package_name} ${package_version} package is already installed.
To force it to reinstall, call:\n\tsm ${package_name} package install force\n"
    exit 0
  fi

  true "${package_dir:="${package_name}-${package_version}"}"

  paths create "${source_path}"

  paths enter "${source_path}"

  if command exists "${package_name}_dependencies"
  then
    log_step "${package_name} ${package_version} ~ dependencies" \
      "${package_name}_dependencies"
  else
    log_step "${package_name} ${package_version} ~ dependencies" \
      package_dependencies
  fi

  if command exists "${package_name}_prefetch"
  then
    log_step "${package_name} ${package_version} ~ prefetch" \
      "${package_name}_prefetch"
  fi

  if command exists "${package_name}_fetch"
  then
    log_step "${package_name} ${package_version} ~ download" \
      "${package_name}_fetch"
  else
    log_step "${package_name} ${package_version} ~ download" \
      package_fetch
  fi

  paths enter "${source_path}/${package_dir}"

  if command exists "${package_name}_postfetch"
  then
    log_step "${package_name} ${package_version} ~ postfetch" \
      "${package_name}_postfetch"
  fi

  if command exists "${package_name}_patch"
  then
    log_step "${package_name} ${package_version} ~ patch" \
      "${package_name}_patch"
  else
    log_step "${package_name} ${package_version} ~ patch" \
      package_patch
  fi

  if command exists "${package_name}_preconfigure"
  then
    log_step "${package_name} ${package_version} ~ preconfigure" \
      "${package_name}_preconfigure"
  fi

  if command exists "${package_name}_configure"
  then
    "${package_name}_configure"
  else
    log_step "${package_name} ${package_version} ~ configure" \
      package_configure
  fi

  if command exists "${package_name}_postconfigure"
  then
    log_step "${package_name} ${package_version} ~ postconfigure" \
      "${package_name}_postconfigure"
  fi

  if command exists "${package_name}_build"
  then
    log_step "${package_name} ${package_version} ~ build" \
      "${package_name}_build"
  else
    log_step "${package_name} ${package_version} ~ build" \
      package_build
  fi

  if command exists "${package_name}_preinstall"
  then
    log_step "${package_name} ${package_version} ~ preinstall" \
      "${package_name}_preinstall"
  else
    log_step "${package_name} ${package_version} ~ preinstall" \
      package_preinstall
  fi

  versionedfs add \
    path "${packages_path}" name "${package_name}" version "${package_version}" \
    source "${install_path}"

  if command exists "${package_name}_install"
  then
    log_step "${package_name} ${package_version} ~ install" \
      "${package_name}_install"
  else
    package_make_install
  fi

  files link symbolic force \
    from "${source_path}/${package_dir}" \
    to "${install_path}/src"

  if command exists "${package_name}_postinstall"
  then
    log_step "${package_name} ${package_version} ~ postinstall" \
      "${package_name}_postinstall"
  else
    log_step "${package_name} ${package_version} ~ postinstall" \
      package_postinstall
  fi

  if ! __sm.string.contains 'package_update' "${FUNCNAME[*]}"
  then
    package_activate_if_first "${package_name}" "${package_version}"
  fi

  if command exists "${package_name}_postactivate"
  then
    log_step "${package_name} ${package_version} ~ postactivate" \
      "${package_name}_postactivate"
  fi

  package_setup
}

package_update()
{
  (( $# == 0 )) || package_cli $@

  # TODO: check if newer version exists, if so then...
  if package_installed_versions | grep -q "${package_version}" \
  && [[ "${force_flag}" != "1" ]]
  then
    log "The latest version (${package_version}) of the ${package_name} package is already installed."
  else
    package_install ${package_name} ${package_version:-} ${archive_format:-} --force
    package_activate ${package_name} ${package_version}
  fi
}

package_fetch_md5()
{
  (( $# == 0 )) || package_cli $@

  local download_url

  : \
    "${package_file:="${package_name}-${package_version}.${archive_format}"}" \
    "${packge_md5_url:="${package_base_url}/${package_file}.md5"}"

  [[ -n "${package_md5}" ]] || read_config "${package_name}" md5 "${package_file}" as package_md5
  [[ -n "${package_md5}" ]] ||
    if [[ -n "${package_md5_url}" ]]
    then # TODO: Can this be added into fetch_uri ?
      curl -L "${packge_md5_url}" -o "${archives_path}/${package_file}.md5" 2>/dev/null ||
        error "Fetching MD5 checksum from '${package_md5_url}' failed."

      package_md5=$(cat "${archives_path}/${package_file}.md5")

      rm "${archives_path}/${package_file}.md5"
    else
      package_md5="" # not known.
    fi
}

package_fetch()
{
  (( $# == 0 )) || package_cli $@

  local _args=()

  true \
    "${package_file:="${package_name}-${package_version}.${archive_format}"}" \
    "${package_url:="${package_base_url}/${package_file}"}"

  package_fetch_md5
  if [[ -n "${scm_type:-}" ]]
  then
    _args+=( "scm_type" "${scm_type}" )
  fi

  fetch_uri "${package_url}" "${source_path}/${package_dir}" \
    "${package_md5:-#}" ${_args[@]} || return 1

  [[ -z "${__vcs_failed}" ]] || return 1

  [[ -d "${source_path}/${package_dir}/${package_dir}" ]] || return 0

  shopt -s nullglob
  local _entries=( "${source_path}/${package_dir}/${package_dir}"/*  )
  shopt -u nullglob

  mv "${_entries[@]}" "${source_path}/${package_dir}/"

  rm -rf "${source_path}/${package_dir}/${package_dir}/"
}

package_configure()
{
  local _command

  if [[ -n "${configure_command}" ]]
  then
    _command="${configure_command}"
  else
    export PREFIX="${install_base_path}/${package_version}"

    package configure flag key --prefix "${install_path}"
    _command="./configure ${configure_flags[*]}"

    [[ -x "${_command%% *}" ]] || return 0
  fi

  debug package "package_configure: ${_command}"

  ${_command} > configure.log 2>&1 ||
    package error \
    message "Configuration of ${package_name} ${package_version} failed." \
    log "configure.log"
}

package_build()
{
  local _command

  if [[ -n ${build_command:-} ]]
  then
    _command="${build_command}"
  else
    _command="make ${make_flags[@]:-"-j$(os cpu count)"}"
  fi

  debug package "package_build: ${_command}"

  ${_command} > build.log 2>&1 ||
    package error \
      message "Compilation of ${package_name} ${package_version} failed! " \
      log "build.log"
}

package_preinstall()
{
  true
}

package_make_install()
{
  local _command

  if [[ -n ${install_command:-} ]]
  then
    _command="${install_command}"
  else
    _command="make ${make_install_flags[@]:-install}"
  fi

  log_step "${package_name} ${package_version} ~ install"
  ${_command} > make.install.log 2>&1 ||
    package error \
      message "Installation of ${package_name} ${package_version} failed! " \
      log "make.install.log"
  log_step success

}

package_postinstall()
{
  true
}

package_activate()
{
  (( $# == 0 )) || package_cli $@

  versionedfs activate \
    path "${packages_path}" name "${package_name}" version "${package_version}"

  package_ldconfig "${package_name}"

  package_setup "${package_name}"
}

package_setup()
{
  local _package="${1:-${package_name}}"

  package_profile_d "${_package}"

  ! __sm.module.is.loaded "service"  || service_setup "${_package}"
  ! __sm.module.is.loaded "database" || database_setup "${_package}"
}

package_deactivate()
{
  (( $# == 0 )) || package_cli $@

  log_step "${package_name} ${_version} ~ deactivate"

  versionedfs deactivate \
    path "${packages_path}" name "${package_name}"

  log_step success

  __sm.string.contains 'package_activate' "${FUNCNAME[*]}" ||
    package_ldconfig "${_package}"
}

package_activate_if_first()
{
  local _package="${1:-}" _version="${2:-}"
  shift || fail "Package name must be given as first parameter."
  shift || fail "Package version must be given as second parameter."

  if paths exist "${install_path}"
  then
    package_activate "${_package}" "${_version}"
  else
    log "'${install_path}' not found; skipping activation."
  fi
}

package_ldconfig()
{
  local _package="${1:-${package_name}}" _path _files _ldconfig="/sbin/ldconfig"
  [[ -n "${_package}" ]] || fail "Package name must be given."

  #  paths exist "${packages_path}/versions/${_package}/active/lib" ||
  #    return 0 # no lib/ directory for activated package, no need to update ldconfig

  user is root || return 0

  # TODO: Figure out if solaris and freebsd have an analog to this?
  if os is linux
  then
    if paths exist "/etc/ld.so.conf.d"
    then
      files write \
        string "${active_path}/lib\n" \
        to "/etc/ld.so.conf.d/sm.conf" \
        mode 0444
    fi

    if [[ -d /selinux ]] && command exists restorecon
    then
      restorecon -R "${active_path}/lib" # -v ~ verbose
      restorecon -R "${packages_path}/versions/${package_name}" # -v ~ verbose
    fi

    command exists "${_ldconfig}" || ldconfig="ldconfig"

    log_step "${package_name} ${package_version} ~ ldconfig" \
      "${_ldconfig}" "${active_path}/lib"

  elif os is darwin
  then # Cluster Fuck!
    true
    # This should be handled by the profile.d?
    # _files=($(find "${packages_path}/versions/${_package}/active" -mindepth 1 -maxdepth 1 -type d))
    # (( ${#_files[@]} > 0 )) && copy_files to "${packages_path}" "${_files[@]}"
  fi
}

package_profile_d()
{
  local _package="${1:-${package_name}}"
  [[ -n "${_package}" ]] || fail "Package name must be given."

  templates exist "profile.d.template" || return 0

  log_step "Updating shell profile for ${_package}"

  paths create "${profile_d_path}"
  files create "${profile_path}"

  templates install "profile.d" to "${profile_d_path}/${_package}.sh" mode 0755

  log_step success
}

package_uninstall()
{
  (( $# == 0 )) || package_cli $@

  if package_is_active "${package_name}" "${package_version}"
  then # Deactivate the package if active.
    package_deactivate "${package_name}" "${package_version}"
  fi

  log_step "${package_name} ${package_version} ~ uninstall"

  paths remove "${install_path}"

  ! module_is_loaded service || service_uninstall # Remove any service reminants

  log_step success
}

package_patch()
{
  local _patches _patch _path _paths

  _paths=(
  "${extension_patches_path}"
  "${extension_patches_path}/$(os type)"
  "${extension_patches_path}/$(os type)/${package_version}"
  )

  for _path in "${_paths[@]}"
  do
    paths exists "${_path}" || continue # No patch path
    shopt -s nullglob
    _patches=( "${_path}"/*.patch )
    shopt -u nullglob
    package_apply_patches "${_patches[@]}"
  done
}

package_apply_patches()
{
  local _patch _patches=("$@")
  shift || fail "No patches were given."

  for _patch in "${_patches[@]}"
  do
    [[ -f "${_patch}" && -s "${_patch}" ]] || continue
    error "TODO: patch application is NIY (see package_patch())"
  done
}

package_usage() {
  log "
  Usage:

  $0 [options]

  options:

  --prefix   - specify prefix path
  --src)     - specify source directory
  --data)    - specify data directory
  --user)    - specify user to install as
  --version) - specify version to install
  --licence) - view licence
  --help)    - view this usage information

  "
}

package_is_active()
{
  local _name="${1:-}" _version="${2:-}"
  shift || fail "No package name was given, or name is empty."

  local _path="${packages_path}/versions/${_name}"

  if shift
  then # version was passed
    [[ -d "${_path}/${_version}" ]]
  else # version was not passed
    [[ -L "${_path}/active" && -d $(readlink "${_path}/active") ]]
  fi
}

package_must_be_active()
{
  local _name="${1:-}"

  shift || fail "No package name was given (or name is empty.)"

  package_is_active "${_name}" ||
    error "Install/activate the node package extension, before installing ${_name}."
}

packages_must_be_active()
{
  local _package _packages="$@"
  shift || fail "No packages were given."

  for _package in "${_packages[@]}"
  do
    package_must_be_active "${_package}"
  done
}

package_docs()
{
  os open "${package_docs_url}"
}

package_website()
{
  os open "${package_website_url}"
}

package_dependencies()
{
  local dependency _dependencies=(${package_dependencies[@]}) _missing_dependencies=()

  unset package_dependencies

  # TODO: improve dependency management.
  for dependency in "${_dependencies[@]}"
  do
    package_is_active ${dependency/-/ } || _missing_dependencies+=( ${dependency} )
  done

  if [[ -n "${_missing_dependencies}" ]]
  then
    local IFS=','
    error "${extension} requires ${_missing_dependencies[*]}.\n
Please install via sm package module, and retry. Typically, this can be done as follows:\n
\tsm ${_missing_dependencies[*]} package install\n"
  fi
}


#
# ## package\_info
#
# Displays package information.
#
# ### Input Parameters
#
# None.
#
# ### Stream Outputs
#
# Steps performed are logged to STDOUT of the calling environment.
#
# ### Environmental effects
#
# Package installation artifacts are created in the system and source directories.
#
# ### Return Codes
#
# 0 for success.
#
# ### Failure Scenarios
#
# Fails if any of the constituant components fail.
#
# ### Usage Examples
#
# Example Usage:
#
# user$ package_info "bash"
#
# default_version: "4.2"
# base_url "ftp.gnu.org/gnu/bash/"
# ...
#
# user$ package_info
#
# ### Notes
#
package_info()
{
  (( $# == 0 )) || package_cli $@

  local _installed _path="${packages_path}/versions/${package_name}" package_md5

  : \
    "${package_dir:="${package_name}-${package_version}"}" \
    "${package_url:="${package_base_url}/${package_file}"}"

  [[ -n "${package_md5}" ]] || read_config "${package_name}" md5 "${package_file}" as package_md5

  log "package_name: ${package_name}"
  if paths exist "${_path}"
  then
    local _installed=($( package_installed_versions ${package_name} ${package_version} ))
    log "  versions_installed: ${_installed[*]}"
  else
    log "  versions_installed: none"
  fi
  log "  default_version: ${package_default_version}"

  if [[ -d "${_path}" ]] && [[ -L "${_path}/active" ]]
  then
    log "  version_active: $(readlink "${_path}/active")"
  else
    log "  version_active: none"
  fi
  log "  base_url: ${package_base_url}"
  log "  download_url: ${package_url}"
  log "  archive_format: ${package_file}"
  log "  stored archive_md5: ${package_md5:-}"
  log "  source_path: ${source_path}/${package_dir}"

  [[ -z "${package_dependencies}" ]] ||
    log "  dependencies: ${package_dependencies[*]}"
}

package_man()
{
  (( $# == 0 )) || package_cli $@

  true "${package_path:="${packages_path}/versions/${package_name}/${package_version}"}"

  MANPATH="${package_path}/man"

  paths exist $MANPATH ||
    error "No man page available for package ${package_name} ${package_version}"

  man ${extension_actions[@]:-${package_name}} || true
}

package_installed_versions()
{
  versionedfs versions path "${packages_path}" name "${package_name}"
}

packages_installed()
{
  versionedfs versions path "${packages_path}"
}

packages_active()
{
  local _name="${1:-}"
  if [[ -n "${_name}" ]]
  then
    versionedfs active path "${packages_path}" name "${_name}"
  else
    versionedfs active path "${packages_path}"
  fi
}

packages_available()
{
  __sm.extensions.installed module "api/package" "$@"
}

packages_list()
{
  local _action="${1:-}" _args
  shift || true

  case "${_action}" in
    (active)
      packages_active "$@"
      ;;

    (available)
      packages_available "$@"
      ;;

    (installed|*)
      packages_installed "$@"
      ;;
  esac
}

