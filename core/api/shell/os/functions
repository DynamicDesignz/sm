#!/bin/sh

#
# SM Framework Core Module ~ Operating System (os)
#
# API Version: 1.0.0
#
# files *
#
# TODO: Finish this API documentation below
#
os()
{
  trace_filter os

  local _command _subcommand

  while (( $# > 0 ))
  do
    token="$1" && shift
    case "${token}" in
      (is)
        _command="$token"
        _os="${1}"
        shift || fail "lowercase operating system name must follow keyword 'os';"\
          "os is <linux|darwin|bsd|solaris|aix>"
        ;;
      (cpu)
        _command=cpu
        _subcommand="$1"
        shift || fail "A command must follow keyword 'cpu'; one of {count}"
        case "${_subcommand}" in
          (count)
            true # all good.
            ;;
          (*)
            fail "A valid command must follow keyword 'cpu'; one of {count}"
            ;;
        esac
        ;;
      (*)
        if [[ -z "${_command}" ]]
        then
          _command="$token"
        else
          _files+=("$token")
        fi
        ;;
    esac
  done

  case "${_command}" in
    (is)
      case "${_os}" in
        (linux|bsd|darwin|solaris|aix)
          if [[ "$OSTYPE" == *${_os}* ]]
          then
            return 0
          else
            return 1
          fi
          ;;
        (*)
          fail "Unhandled os '${_os}'"
          ;;
      esac
      ;;
    (open)
      __sm.os.open "${_files[@]}"
      ;;
    (type)
      __sm.os.type
      ;;
    (version)
      case "${_subcommand}" in
        (major)
          __sm.os.version.major
          ;;
        (minor)
          __sm.os.version.minor
          ;;
        (patch)
          __sm.os.version.patch
          ;;
        (*)
          __sm.os.version
          ;;
      esac
      ;;
    (arch)
      case "${_subcommand}" in
        (capable)
          __sm.os.arch.capable
          ;;
        (*)
          __sm.os.arch
          ;;
      esac
      ;;
    (cpu)
      case "${_subcommand}" in
        (count)
          __sm.os.cpu.count
          ;;
        (*)
      fail "Unknown command for os cpu: '${_subcommand}'; valid commands include {count} "
          ;;
      esac
      ;;
    (*)
      fail "Unknown command for os: '${_command}' "\
        "A os command must be specified as the first parameter: "\
        "{is,}"
      ;;
  esac
}

# TODO: Move this function into internal/os
init_scripts_path()
{
  if (( UID == 0 ))
  then
    case "$OSTYPE" in
      *darwin*)
        printf "/etc/init.d"
        ;;
      *linux*|*)
        if [[ -d "/etc/init.d" ]]
        then
          printf "/etc/init.d"
        elif [[ -d "/etc/rc.d" ]]
        then
          printf "/etc/rc.d"
        else
          fail "Unknown init scripts directory (/etc/init.d or /etc/rc.d not found)."
        fi
        ;;
    esac
  else
    printf "$HOME/.init.d"
  fi
}

# TODO: Move this function into internal/os
confd_path()
{
  if (( UID == 0 ))
  then
    printf "/etc/conf.d"
  else
    printf "$HOME/.conf.d"
  fi
}

