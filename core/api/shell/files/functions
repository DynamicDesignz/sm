#!/bin/sh

#
# SM Framework Core Module ~ Files (files)
#
# API Version: 1.0.0
#
# files *
#
# TODO: Finish this API documentation below
#
files()
{
  trace_filter filesystem

  local _token _command _subcommand _path _file _files=() _source _target _mode _owner \
    _flags _string _regex

  while (( $# > 0 ))
  do
    _token="$1" && shift
    case "${_token}" in
      (are|is)
        _command="are"
        _subcommand="$1"
        shift
        case "${_subcommand}" in
          (empty|nonempty|executable|missing|symlinks)
            continue
            ;;
          (*)
            fail "Invalid command following keyword '${_command}';"\
              "Usage: files '${_command}' <empty,missing,executable>"
            ;;
        esac
        ;;
      (sha)
        command -v shasum > /dev/null 2>&1 ||
          fail "shasum command missing, cannot use 'files sha'"
        _subcommand="$1"
        shift || fail "sha algorithm not given; 'files sha <256|512> {files...}'"
        case "${_subcommand}" in
          (256|512)
            continue
            ;;
          (*)
            fail "sha algorithm not properly given; 'files sha <256|512> {files...}'"
            ;;
        esac
        ;;
      (append)
        _flags+=( -a )
        ;;
      (to)
        _target="${1}"
        shift || fail "Target path must be provided after keyword 'to'"
        ;;
      (in)
        if [[ -z "${_command}" ]]
        then
          _command=in
        else
          _target="${1}"
          shift || fail "Target path must be provided after keyword 'to'"
        fi
        ;;
      (from)
        _source="${1}"
        shift || fail "Source path must be provided after keyword 'from'"
        ;;
      (mode|permissions)
        _mode="${1}"
        shift || Fail "Mode must follow keywords 'mode|permissions'"
        ;;
      (chmod)
        _command=chmod
        _mode="${1}"
        shift || Fail "Mode must follow keywords 'mode|permissions'"
        ;;
      (owner)
        _owner="${1}"
        shift || fail "Owner must be provided after keyword 'owner'"
        ;;
      (chown)
        _command=chown
        _owner="${1}"
        shift || fail "Owner must be provided after keyword 'owner'"
        ;;
      (recursive|recursively)
        _flags+=(-R)
        shift # Remove the recursive flag parameter.
        ;;
      (symbolic)
        _flags+=( -s )
        ;;
      (force)
        _flags+=( -f )
        ;;
      (contain|containing|replace)
        if [[ -z "${_command}" ]] ; then _command="${_token}" ; fi
        ;;
      (string)
        _string="$1"
        shift || fail "A string must be followed by keyword 'string'"
        ;;
      (regex)
        _regex="$1"
        shift || fail "A regex must be followed by keyword 'regex'"
        ;;
      (in)
        _files+=("$1")
        shift || fail "A file name must follow keyword 'in'"
        ;;
      (key)
        _key="$1"
        shift || fail "A key name must follow keyword 'key'"
        ;;
      (value)
        _value="$1"
        shift || fail "A value must follow keyword 'value'"
        ;;
      (with)
        _string="$1"
        shift || fail "A content string must follow keyword 'with'"
        ;;
      (*)
        if [[ -z "${_command}" ]]
        then
          _command="${_token}"
        else
          _files+=("${_token}")
        fi
        ;;
    esac
  done

  case "${_command}" in
    (are|sha)
      if __sm.files.${_command}."${_subcommand}" "${_files[@]}"
      then return 0 ; else return 1 ; fi
      ;;
    (contain|containing|replace)
      if __sm.files.${_command} "${_string}" "${_regex}" "${_files[@]}"
      then return 0 ; else return 1 ; fi
      ;;
    (open|md5|enter|join|expand|search|within|in|source|empty|nonempty|exist|exists|remove|create)
      [[ -n "${_files}" ]] || fail "files must be given for 'files ${_command}'."
      if __sm.files.${_command} "${_files[@]}"
      then return 0 ; else return 1 ; fi
      ;;
    (link)
      [[ -e "${_source}" ]]   ||
        fail "Cannot link ${_source} to ${_target}, source does not exist!"
      [[ ! -f "${_target}" ]] ||
        fail "Cannot link ${_source} to ${_target} which exists as a file!"
      [[ ! -d "${_target}" ]] ||
        fail "Cannot link ${_source} to ${_target} which exists as a directory"
      #TODO: what about the -f (force flag) to overwrite if target exists ?
      __sm.files.link "${_source}" "${_target}" "${_flags[*]}"
      ;;
    (hash)
      #TODO:
      [[ -e "${_source}" && -n "${_key}" ]] ||
        fail "Source and key must both be given;"\
        " files hash source {source} key {name}"
      __sm.files.hash "${_source}" "${_key}" "${_value}"
      ;;
    (copy|move)
      if [[ -n "${_files[*]}" ]]
      then
        [[ -n "${_source}" || -n "${_target}" ]] || fail "Source or target path (to/from) for ${_command}ing files must be given."
      else
        [[ -n "${_source}" && -n "${_target}" ]] || fail "Source and target path (to/from) for ${_command}ing file must be given."
      fi
      __sm.files.${_command} "${_source:-.}" "${_target:-.}" "${_flags[*]}" "${_files[@]}"
      ;;
    (write)
      [[ -n "${_string}" ]] || fail "String must be given; string 'string'."
      [[ -n "${_target}" ]] || fail "Target must be given;  to {file name}."
      __sm.files.write "${_string}" "${_target}" "${_flags[*]}"
      ;;
#    (chown|chmod) log "Handled bellow" ;;
    (*)
      if [[ -z "${_owner}" && -z "${_mode}" ]]
      then
        fail "Unknown command for files: '${_command}' "\
          "A files command must be specified as the first parameter: "\
          "{chown,chmod,create,remove,copy,in,search,enter,exist,join,expand,move,copy}"
      fi
      ;;
  esac

  case "${_command}" in
    (chown|chmod) true ;;
    (*) _flags=() ;;
  esac

  if [[ -n "${_owner}" ]]
  then
    if [[ -n "${_files[*]}"  ]]
    then
      [[ -z "${_target}" ]] || pushd "${_target}" >/dev/null 2>&1
      __sm.files.chown "${_owner}" "${_flags[*]}" "${_files[@]}"
      [[ -z "${_target}" ]] || popd >/dev/null 2>&1
    else
      __sm.files.chown "${_owner}" "${_flags[*]}" "${_target}"
    fi
  fi

  if [[ -n "${_mode}" ]]
  then
    if [[ -n "${_files[*]}"  ]]
    then
      [[ -z "${_target}" ]] || pushd "${_target}" >/dev/null 2>&1
      __sm.files.chmod "${_mode}" "${_flags[*]}" "${_files[@]}"
      [[ -z "${_target}" ]] || popd >/dev/null 2>&1
    else
      __sm.files.chmod "${_mode}" "${_flags[*]}" "${_target}"
    fi
  fi
}

