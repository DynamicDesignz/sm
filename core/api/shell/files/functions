#!/bin/sh

#
# SM Framework Core Module ~ Files (files)
#
# API Version: 1.0.0
#
# files *
#
# TODO: Finish this API documentation below
#
files()
{
  trace_filter filesystem

  local _command _subcommand _path _file _files=() _source _target _mode _owner \
    _flags _string _regex _content

  while (( $# > 0 ))
  do
    token="$1" && shift
    case "${token}" in
      (are|is)
        _subcommand="$1"
        shift
        case "${_subcommand}" in
          (empty|executable|missing|symlinks)
            continue
            ;;
          (*)
            fail "Invalid command following keyword '${_command}';"\
              "Usage: files '${_command}' <empty,missing,executable>"
            ;;
        esac
        ;;
      (sha)
        command -v shasum > /dev/null 2>&1 ||
          fail "shasum command missing, cannot use 'files sha'"
        _subcommand="$1"
        shift || fail "sha algorithm not given; 'files sha <256|512> {files...}'"
        case "${_subcommand}" in
          (256|512)
            continue
            ;;
          (*)
            fail "sha algorithm not properly given; 'files sha <256|512> {files...}'"
            ;;
        esac
        ;;
      (append)
        _flags+=( -a )
        ;;
      (to)
        _target="${1}"
        shift || fail "Target path must be provided after keyword 'to'"
        ;;
      (from)
        _source="${1}"
        shift || fail "Source path must be provided after keyword 'from'"
        ;;
      (mode|permissions)
        _mode="${1}"
        shift || Fail "Mode must follow keywords 'mode|permissions'"
        ;;
      (owner)
        _owner="${1}"
        shift || fail "Owner must be provided after keyword 'owner'"
        ;;
      (recursive|recursively)
        _flags+=(-R)
        shift # Remove the recursive flag parameter.
        ;;
      (symbolic)
        _flags+=( -s )
        ;;
      (force)
        _flags+=( -f )
        ;;
      (contain|containing|replace)
        _subcommand="$1"
        shift
        case "${_subcommand}" in
          (string)
            _string="$1"
            shift || fail "A string must be followed by keyword 'string'"
            ;;
          (regex)
            _regex="$1"
            shift || fail "A regex must be followed by keyword 'regex'"
            ;;
          (*)
            fail "Unknown subcommand '${1}' for '${_command}'"
            ;;
        esac
        [[ -n "${_string}" || -n "${_regex}" ]] ||
          fail "A string or regex must be given after keyword 'containing'."
        ;;
      (key)
        _key="$1"
        shift || fail "A key name must follow keyword 'key'"
        ;;
      (value)
        _value="$1"
        shift || fail "A value must follow keyword 'value'"
        ;;
      (with)
        _content="$1"
        shift || fail "A content string must follow keyword 'with'"
        ;;
      (*)
        if [[ -z "${_command}" ]]
        then
          _command="$token"
        else
          _files+=("$token")
        fi
        ;;
    esac
  done

  case "${_command}" in
    (are|is)
      case "${_subcommand}" in
        (empty)
          __sm.files.are.empty "${_files[@]}"
          ;;
        (executable)
          __sm.files.are.executable "${_files[@]}"
          ;;
        (missing)
          __sm.files.are.missing "${_files[@]}"
          ;;
        (symlinks)
          __sm.files.are.symlinks "${_files[@]}"
          ;;
      esac
      ;;
    (in)
      __sm.files.in "${_files[@]}"
      ;;
    (within)
      __sm.files.within "${_paths[@]}"
      ;;
    (sha)
      __sm.files.sha.${_subcommand} "${_files[@]}"
      ;;
    (contain)
      __sm.files.contain "${_string}" "${_regex}" "${_files[@]}"
      ;;
    (containing)
      __sm.files.containing "${_string}" "${_regex}" "${_files[@]}"
      ;;
    (replace)
      __sm.files.containing "${_string}" "${_regex}" "${_files[@]}"
      ;;
    (source)
      [[ -n "${_files}" ]] || fail "files must be given."
      __sm.files.source "${_files[@]}"
      ;;
    (nonempty)
      __sm.files.nonempty()
      ;;
    (exist)
      __sm.files.exist()
      ;;
    (remove)
      __sm.files.remove()
      ;;
    (create)
      [[ -n "${_files}" ]] || fail "files to create must be given."
      __sm.files.create "${_files[@]}"
      ;;
    (link)
      [[ -e "${_source}" ]]   ||
        fail "Cannot link ${_source} to ${_target}, source does not exist!"
      [[ ! -f "${_target}" ]] ||
        fail "Cannot link ${_source} to ${_target} which exists as a file!"
      [[ ! -d "${_target}" ]] ||
        fail "Cannot link ${_source} to ${_target} which exists as a directory"
      __sm.files.link "${_source}" "${_target}" "${_flags[*]}"
      ;;
    (chown)
      [[ -n "${_owner}" ]] || fail "'owner {user}[:{group}]' was not given."
      [[ -n "${_files}" ]]    || fail "files must be given."
      __sm.files.chown "${_owner}" "${_flags[*]}" "${_files[@]}"
      ;;
    (chmod)
      [[ -n "${_mode}" ]]  || fail "'mode {permissions mode}' must be given."
      [[ -n "${_files}" ]] || fail "files to chmod must be given."
      __sm.files.chmod "${_mode}" "${_flags[*]}" "${_files[@]}"
      ;;
    (hash)
      [[ -e "${_source}" && -n "${_key}" ]] ||
        fail "Source and key must both be given;"\
        " files hash source {source} key {name}"
      __sm.files.hash "${_source}" "${_key}" "${_value}"
      ;;
    (remove)
      [[ -n "${_files}" ]] || fail "files to remove must be given."
      __sm.files.remove "${_files[@]}"
      ;;
    (copy)
      [[ -n "${_target}" ]] || fail "Target path (to) for copying into must be given."
      __sm.files.copy "${_target}" "${_flags[*]}" "${_files[@]}"
      ;;
    (in)
      [[ -n "${_files}" ]] || fail "Path to list files in must be given."
      __sm.files.in "${_files[@]}"
      ;;
    (search)
      [[ -n "${_files}" ]] || fail "Path to search files under must be given."
      __sm.files.search
      ;;
    (enter)
      [[ -n "${_files}" ]] || fail "Path to enter must be given."
      __sm.files.enter "${_files[@]}"
      ;;
    (exist|exists)
      [[ -n "${_files}" ]] || fail "Path to enter must be given."
      __sm.files.exists "${_files[@]}"
      ;;
    (join)
      [[ -n "${_files}" ]] || fail "Path to join must be given."
      __sm.files.join "${_files[@]}"
      ;;
    (expand)
      [[ -n "${_files}" ]] || fail "Path to expand must be given."
      __sm.files.expand "${_files[@]}"
      ;;
    (move)
      [[ -n "${_source}" ]] || fail "Source must be given to copy (from x). "
      [[ -n "${_target}" ]] || fail "Target must be given to copy (to y). "
      __sm.files.move "${_source}" "${_target}" "${_flags[*]}" "${_mode}" \
        "${_owner}" "${_files[@]}"
      ;;
    (copy)
      [[ -n "${_source}" ]] || fail "Source must be given to copy (from x)."
      [[ -n "${_target}" ]] || fail "Target must be given to copy (to y)."
      __sm.files.copy "${_source}" "${_target}"
      ;;
    (write)
      [[ -n "${_string}" ]] || fail "String must be given; string 'string'."
      [[ -n "${_target}" ]] || fail "Target must be given;  to {file name}."
      __sm.files.write "${_string}" "${_target}" "${_flags[*]}"
      ;;
    (*)
      fail "Unknown command for files: '${_command}' "\
        "A files command must be specified as the first parameter: "\
        "{chown,chmod,create,remove,copy,in,search,enter,exist,join,expand,move,copy}"
      ;;
  esac
}

