#!/bin/sh

#
# SM Framework Core Module ~ Versioned FileSystem (versionedfs)
#
# API Version: 1.0.0
#
# paths *
#
# TODO: Finish this API documentation below
#
#           paths move source target mode owner
#     user$ paths move "freetds-0.91rc"* to "freetds-0.91"
#
#
#     user$ paths enter "/usr/local/src"
#
#
#     user$ paths exist /bin/sm
#     user$ echo $?
#     0
#
#     user$ paths exist /bin/asdfasdf
#     user$ echo $?
#     1
#
#
#     user$ cd ; sm call paths expand test
#     /home/user/test
#
#     user$ paths copy "freetds-0.91rc"* to "freetds-0.91"
#
#     user$ paths create a b c
#     user$ ls
#     a b c
#
#     user$ paths remove /tmp/somedir /tmp/someotherdir
#
#     user$ paths copy to "$HOME/backup/" "$HOME/bin" "$HOME/projects"
#
#     user$ paths_chown $USER "$HOME" "/usr/local"
#
#
#     user$ paths_chmod $USER "$HOME" "/usr/local"
#

paths()
{
  trace_filter filesystem
  local _token _command _path _paths=() _source _target _mode _owner _flags _glob

  while (( $# ))
  do
    _token="$1" && shift
    case "${_token}" in
      (to)
        _target="${1}"
        shift || fail "Target path must be given after keyword 'to'"
        ;;
      (from)
        _source="${1}"
        shift || fail "Source path must be given after keyword 'from'"
        ;;
      (chmod|mode|permissions)
        _command=chmod
        _mode="${1}"
        shift || Fail "Mode must follow keyword '${_token}'"
        ;;
      (owner)
        _owner="${1}"
        shift || fail "Owner must be given after keyword 'owner'"
        ;;
      (recursive|recursively)
        _flags+=(-R)
        shift # Remove the recursive flag parameter.
        ;;
      (matching|regex|glob)
        _regex="$1"
        shift ||
          fail "Shell glob pattern string must b given after keyword '${_token}'"
        ;;
      (in)
        [[ -n "${_command}" ]] || _command=in
        _paths+=("$1")
        shift || fail "A path is expected following keyword 'in'"
        ;;
      (*)
        if [[ -z "${_command}" ]]
        then
          _command="${_token}"
        else
          _paths+=("${_token}")
        fi
        ;;
    esac
  done

  case "${_command}" in
    (chown)
      [[ -n "${_identity}" ]] || fail "'identity {user}[:{group}]' was not given."
      [[ -n "${_paths}" ]]    || fail "Paths must be given."
      __sm.paths.chown "${_identity}" "${_flags[*]}" "${_paths[@]}"
      ;;
    (chmod)
      [[ -n "${_mode}" ]] || fail "'mode {file mode}' must be given."
      [[ -n "${_paths}" ]]    || fail "Paths to chmod must be given."
      __sm.paths.chmod "${_mode}" "${_flags[*]}" "${_paths[@]}"
      ;;
    (create)
      [[ -n "${_paths}" ]] || fail "Paths to create must be given."
      __sm.paths.create "${_paths[@]}"
      ;;
    (remove)
      [[ -n "${_paths}" ]] || fail "Paths to remove must be given."
      __sm.paths.remove "${_paths[@]}"
      ;;
    (copy)
      [[ -n "${_target}" ]] || fail "Target path (to) for copying into must be given."
      __sm.paths.copy "${_target}" "${_flags[*]}" "${_paths[@]}"
      ;;
    (in)
      [[ -n "${_paths}" ]] || fail "Path to list paths in must be given."
      __sm.paths.in "${_paths[@]}"
      ;;
    (search)
      [[ -n "${_paths}" ]] || fail "Path to search paths under must be given."
      [[ -n "${_glob}" ]]  || fail "Glob pattern was not given (matches {glob})."
      __sm.paths.search "${_regex}" "${_paths}"
      ;;
    (enter)
      [[ -n "${_paths}" ]] || fail "Path to enter must be given."
      __sm.paths.enter "${_paths[@]}"
      ;;
    (exist|exists)
      [[ -n "${_paths}" ]] || fail "Path to enter must be given."
      __sm.paths.exists "${_paths[@]}"
      ;;
    (join)
      [[ -n "${_paths}" ]] || fail "Path to join must be given."
      __sm.paths.join "${_paths[@]}"
      ;;
    (expand)
      [[ -n "${_paths}" ]] || fail "Path to expand must be given."
      __sm.paths.expand "${_paths[@]}"
      ;;
    (move)
      [[ -n "${_source}" ]] || fail "Source must be given to copy (from x). "
      [[ -n "${_target}" ]] || fail "Target must be given to copy (to y). "
      __sm.paths.move "${_source}" "${_target}"
      ;;
    (copy)
      [[ -n "${_source}" ]] || fail "Source must be given to copy (from x)."
      [[ -n "${_target}" ]] || fail "Target must be given to copy (to y)."
      __sm.paths.copy "${_source}" "${_target}"
      ;;
    (absolute)
      [[ -n "${_paths}" ]] || fail "Path to expand must be given."
      __sm.paths.absolute "${_paths[@]}"
      ;;
    (*)
      fail "Unknown command for paths: '${_command}' "\
        "A paths command must be specified as the first parameter: "\
        "{chown,chmod,create,remove,copy,in,search,enter,exist,join,expand,move,copy}"
      ;;
  esac
}
