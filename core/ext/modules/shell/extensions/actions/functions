#!/bin/sh

#TODO: rename module to detection (after it is renamed to execution)

build_actions_cache()
{
  trace_filter action_cache

  local _extension_path=$1 _extension _extension_namespace
  shift || fail "Extension path must be given as the first parameter."

  _extension_namespace="${_extension_path#${sm_path}\/}"
  log_step "Updating action cache for ${_extension_namespace//\// }"

  for _extension in "${_extension_path}"/*
  do
    debug search "build_actions_cache:${_extension}:"
    case "${_extension}" in
      (*\/\*|*\/.*) continue ;;
    esac
    [[ -d "${_extension}" ]] || continue
    [[ ! -f "${_extension}/.actions_cache" ]] || continue
    _extension="${_extension#${_extension_path}\/}"
    actions_build_cache_start "${_extension_path}" "${_extension}" 2>/dev/null
  done

  log_step success
  return 1 #fake we found nothing and continue with next search path
}

actions_build_cache_start()
{
  trace_filter action_cache

  local _extension_path="${1:-}" _extension="${2:-}"
  shift || fail "Extension path must be given as the first parameter."
  shift || fail "Extension name must be given as the second parameter."

  local _actions_root _modules_root
  _actions_root="${_extension_path}/${_extension}/actions"
  _modules_root="${_extension_path}/${_extension}/modules/shell"

  shopt -s dotglob

  #                         from to
  actions_build_actions_cache "" "" | sort > "${_extension_path}/${_extension}/.actions_cache" || return 1
  actions_build_modules_cache       | sort > "${_extension_path}/${_extension}/.modules_cache" || return 1
}

actions_build_actions_cache()
{
  trace_filter action_cache

  # Question, what's with the name 'actions_from' ~ Wayne
  local _actions_from="${1:-}" _actions_path="${2:-}" _file _pair _from _path
  shift || fail "actions from must be given as the first parameter."
  shift || fail "actions path must be given as the second parameter."

  case "${_actions_path##*/}" in
    (\*)
      # empty directory yields *
      if [[ -f "${_actions_root}${_actions_path%\/\*}/.actions" ]]
      then
        actions_build_actions_cache "${_actions_from%\/\*}" "${_actions_path%\/\*}/.actions"
      else
        debug search "EMPTY *: ${_actions_from}=${_actions_path}" >&2
      fi
      ;;
    (*\(\))
      # function()
      if [[ -d "${_actions_root}${_actions_path%/*}" ]]
      then
        _actions_from="${_actions_from%\/default}"
        printf "${_actions_from#\/}=${_actions_path#\/}\n"
      else
        debug search "NODIR(): ${_actions_from}=${_actions_path}" >&2
      fi
      ;;
    (.actions)
      # actions file
      _actions_path="${_actions_path%.actions}"
      for _pair in $( sed '/^#/ d ; s/ /\//g' < "${_actions_root}${_actions_path}.actions" )
      do
        _from="${_pair%%=*}" # Cut out everything from first =
        _path="${_pair#*=}"  # Cut out everything to   first =
        actions_build_actions_cache "${_actions_from}/${_from}" "${_actions_path}${_path}"
      done
      ;;
    (*)
      # namespace
      if [[ -d "${_actions_root}${_actions_path}" ]]
      then
        for _file in ${_actions_root}${_actions_path}/*
        do
          _file="${_file#${_actions_root}${_actions_path}\/}"
          if [[ "${_file}" == ".actions" ]]
          then
            actions_build_actions_cache "${_actions_from}" "${_actions_path}/${_file}"
          else
            actions_build_actions_cache "${_actions_from}/${_file}" "${_actions_path}/${_file}"
          fi
        done
      # <action> file
      elif [[ -x "${_actions_root}${_actions_path}" ]]
      then
        _actions_from="${_actions_from%\/default}"
        printf "${_actions_from#\/}=${_actions_path#\/}\n"
      else
        debug search "NOMATCH: ${_actions_from}=${_actions_path}" >&2
      fi
      ;;
  esac
}

actions_build_modules_cache()
{
  trace_filter action_cache

  local _module_path _module_name
  for _module_path in $( find "${_modules_root}${_modules_path}" -name modules -type f || return 1 )
  do
    _module_name="${_module_path#${_modules_root}\/}"
    _module_name="${_module_name%modules}"
    _module_name="${_module_name%\/}"
    echo "${_module_name}=$( cat ${_module_path} | tr '\n' ' ' )"
  done
}

action_from_modules_cache_initialize()
{
  trace_filter action_cache

  [[ -f "${_module_cache}" ]] || return 0
  local _path _line
  for _path in $( tr ' ' ',' < "${_module_cache}" )
  do
    _module_path="${_path%%=*}"
    _module_path="${_module_path:+${_module_path}\/}"
    _module_deps="${_path#*=}"
    for _module_dep in ${_module_deps//,/ }
    do
      if in_search_paths detect_module "${_module_dep}" &&
        [[ -f "${module_path}/actions" ]]
      then
        while read _line
        do
          if [[ "$_line" == [[:alpha:]]* ]]
          then
            _modules_cache+=( "${_module_path}${_line/=*}=${_module_path}${_line/*=}" )
          fi
        done < "${module_path}/actions"
      fi
    done
  done
}

action_cache_check_short()
{
  trace_filter action_cache

  local _found _found_actions _name="${1:-}" _item

  #_found_actions=( $( \awk "/\/$1[=\/]/ {print}" < "${_action_cache}" ) )
  _found_actions=( $( grep "/${_name}[=/]" "${_action_cache}" ) )

  if (( ${#_modules_cache[@]} ))
  then
    for _item in "${_modules_cache[@]}"
    do
      if [[ "${_item}" == "${_name}="* ]]
      then
        _found_actions+=("${_item}")
      fi
    done
  fi

  if (( ${#_found_actions[@]} == 1 ))
  then
    _found_actions="${_found_actions#*=}"
    action="${_found_actions##*/}"
    action_path="${extensions_path}/${extension}/actions/${_found_actions}"
    action_path="${action_path%/*}"
    extension_args=( "${_rest_params[@]}" )
    return 0

  elif (( ${#_found_actions[@]} ))
  then
    local _candidate _candidates=()
    for _candidate in "${_found_actions[@]}"
    do
      _candidate="${_candidate%%=*}"
      _candidates+=( "sm ${extension} ${_candidate//\// } ${_rest_params[@]}\n" )
    done

    error "More than one action found matching, please be more specific.\n\nDid you mean:\n${_candidates[*]}\n"

  else
    debug search "no actions found for '${1}'"
  fi
  return 1
}

action_cache_check()
{
  trace_filter action_cache

  local _found _name="${1:-}" _item _found_actions=()
  shift || fail "No action name given."

  _found="$( grep "^${_name}=" "${_action_cache}" 2>/dev/null || true )"
  if [[ -n "${_found}" ]]
  then
    _found="${_found/*=}"
    action="${_found##*/}"
    action_path="${_found%/*}"
    [[ "${action_path}" != "${_found}" ]] || action_path=""
    action_path="$extensions_path/$extension/actions/${action_path}"
    extension_args=( "${_rest_params[@]}" )
    debug search ":cached(${_action_cache}):${_action_path}=${_found}:params=${_rest_params[*]}:"
    return 0
  else
    if (( ${#_modules_cache[@]} ))
    then
      for _item in "${_modules_cache[@]}"
      do
        if [[ "${_item}" == "${_name}="* ]]
        then
          _found_actions+=("${_item}")
        fi
      done

      if (( ${#_found_actions[@]} == 1 ))
      then
        _found_actions="${_found_actions#*=}"
        action="${_found_actions##*/}"
        action_path="${extensions_path}/${extension}/actions/${_found_actions}"
        action_path="${action_path%/*}"
        extension_args=( "${_rest_params[@]}" )
        return 0
      fi
    fi
  fi
  return 1
}

action_from_action_cache()
{
  trace_filter action_cache

  local _action_cache="$extensions_path/$extension/.actions_cache"
  local _module_cache="$extensions_path/$extension/.modules_cache"
  local _action_params=("$@") _action_path _action_path_help _new_action_path
  local _rest_params=() _param_temp _action_params_length _modules_cache=()

  action_from_modules_cache_initialize

  if [[ -f "${_action_cache}" ]]
  then
    while :
    do
      _action_path="${_action_params[*]}"
      _action_path="${_action_path// /\/}"
      _action_path_help="${_action_path}\/help"
      _action_path_help="${_action_path_help#\\\/}"
      if action_cache_check "${_action_path}"
      then
        return 0
      fi
      if action_cache_check_short "${_action_path}"
      then
        return 0
      fi
      if action_cache_check "${_action_path_help}"
      then
        return 0
      fi
      if action_cache_check_short "${_action_path_help}"
      then
        return 0
      fi

      # Not found, go down one level
      _action_params_length=${#_action_params[@]}
      (( _action_params_length )) || break # finish if no more params

      #TODO: account for zsh indexes ( -1 -> -0 )
      _param_temp="${_action_params[$(( _action_params_length - 1 ))]}"
      _rest_params=( "${_param_temp}" "${_rest_params[@]}" )
      unset _action_params[$(( _action_params_length - 1 ))]
    done
  fi
  return 1
}

cached_action()
{
  trace_filter action_cache
  extensions_path="${1:-}" extension="${2:-}"
  shift || fail "Cannot detect extension existence;"\
    " No extension path was given."
  shift || fail "Cannot detect extension existence;"\
    " No extension name was given."

  extension_is_valid $extensions_path/$extension &&
    action_from_action_cache "$@"
}

