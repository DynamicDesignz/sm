#!/usr/bin/env bash

#
# # VCS (SCM) Module
#

fetch_uri_parse_args()
{
  local _token _allowed_arg
  while (( $# > 0 ))
  do
    _token="$1"
    shift
    for _allowed_arg in branch remote revision scm_type md5
    do
      case "${_token}" in
        (*${_allowed_arg})
          eval "${_allowed_arg}=\"${1}\""
          shift || fail "${_allowed_arg} must be specified after '${_token}'."
          continue 2
          ;;
      esac
    done
    case "${_token}" in
      (--on-fail)
        fetch_error_handler=$1
        shift || fail "fetch error handler function must be specified after '--on-fail'."
        continue
        ;;
    esac
    _args+=("${_token}")
  done
}

# ## fetch\_uri()
#
#
#
# Code Walkthrough
fetch_uri()
{
  trace_filter vcs
  fetch_error_initialize "$@"

  local _uri="${1:-}" _target="${2:-}" _args=()
  shift || fail "uri must be specified as the first parameter."
  shift || fail "target path must be specified as the second parameter."

  unset scm_type
  _args=("${_uri}" "${_target}")
  fetch_uri_parse_args "$@"

  [[ -n "${scm_type}" ]] || fetch_uri_detect_scm_type "${_uri}"

  case "${scm_type}" in
    (path|archive|github|git|svn|hg|fossil)
      module ext/vcs/handlers/${scm_type}
      "${scm_type}_get" "${_args[@]}"
      ;;
    (*)
      fetch_error unknown_scm
      ;;
  esac
}

fetch_update()
{
  local _uri _target="${1:-}"
  shift || fail "target path must be specified as the second parameter."
  if [[ -d "${_target}" ]] \
  && [[ -s "${_target}/.uri" ]]
  then
    _uri=$( cat "${_target}/.uri" )
    if [[ -n "${_uri}" ]]
    then
      fetch_uri "${_uri}" "${_target}" "$@"
      return $?
    fi
  fi
  return 1
}

cli_fetch()
{
  local _uri="${1:-}" _target="${2:-}" _args=()
  shift || error "uri must be specified as the first parameter."
  shift || error "target path must be specified as the second parameter."
  fetch_uri "${_uri}" "${_target}" --on-fail error "$@"
}

cli_fetch_update()
{
  local _target="${1:-}"
  shift || error "target path must be specified as the second parameter."
  fetch_update "${_target}" --on-fail error "$@"
}
