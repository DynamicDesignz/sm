#!/usr/bin/env bash

#
# # VCS (SCM) Module
#

# ## detect\_uri()
#
#
#
# Code Walkthrough
detect_uri()
{
  local extensions_path="${1:-}" _uri_path

  shift || fail "extensions_path must be specified as the first parameter."

  rebuild_path ".uri" $extensions_path $@

  _uri_path="${rebuilded_path}"

  if [[ -s "${_uri_path}" ]]
  then
    uri_path="${_uri_path}"
    return 0
  else
    return 1
  fi
}

# ## scm\_identifier()
#
#
#
# Code Walkthrough
scm_identifier()
{
  local _uri="${1:-}"

  shift || fail "url must be the first parameter to scm_identifier()."

  printf "${_uri//\//_}"
}

# ## is\_github\_uri()
#
#
#
# Code Walkthrough
is_github_uri()
{
  #TODO: add validation that given repository exists on github
  ematch "$1" "^[[:alnum:]_-]+\/[[:alnum:]_-]+$"
}

is_archive_uri() {
  case "$1" in
    *.tar|*.tgz|*.txz|*.tbz2|*.xz|*.bz2|*.gz|*.zip|*.lzma|*github.com/*/tarball/*)
      return 0
      ;;
    *)
      return 1
      ;;
  esac
}

fetch_uri_parse_args()
{
  local _token _allowed_arg
  while (( $# > 0 ))
  do
    _token="$1"
    shift
    for _allowed_arg in branch remote revision scm_type md5
    do
      case "${_token}" in
        (*${_allowed_arg})
          eval "${_allowed_arg}=\"${1}\""
          shift || error "${_allowed_arg} must be specified after '${_token}'."
          continue 2
          ;;
      esac
    done
    _args+=("${_token}")
  done
}

fetch_uri_detect_scm_type()
{
  local _uri="${1:-}"
  if [[ -d "${_uri}" ]] # check for directory
  then
    scm_type="path"
  elif is_archive_uri "${_uri}" # check for packages
  then
    scm_type="archive"
  elif is_github_uri "${_uri}" # check for pattern user/repository from github
  then
    scm_type="github"
  else
    case "${_uri}" in
      (*git*)    scm_type="git" ;;
      (*svn*)    scm_type="svn" ;;
      (*hg*)     scm_type="hg"     ;;
      (*fossil*) scm_type="fossil" ;;
      (*)
        error "Unknown SCM for url '${_uri}'."
        ;;
    esac
  fi
}

# ## fetch\_uri()
#
#
#
# Code Walkthrough
fetch_uri()
{
  trace_filter vcs

  local _uri="${1:-}" _target="${2:-}" _args=()
  shift || fail "uri must be specified as the first parameter."
  shift || fail "target path must be specified as the second parameter."

  unset scm_type
  _args=("${_uri}" "${_target}")
  fetch_uri_parse_args "$@"

  [[ -n "${scm_type}" ]] || fetch_uri_detect_scm_type "${_uri}"

  case "${scm_type}" in
    (path|archive|github|git|svn|hg|fossil)
      module ext/vcs/${scm_type}
      "${scm_type}_get" "${_args[@]}"
      ;;
    (*)
      error "Unknown SCM("${scm_type}") for url '${_uri}'."
      ;;
  esac
}
fetch()
{
  fetch_uri "$@"
}

fetch_update()
{
  local _uri _target="${1:-}"
  shift || fail "target path must be specified as the second parameter."
  if [[ -d "${_target}" ]] \
  && [[ -s "${_target}/.uri" ]]
  then
    _uri=$( cat "${_target}/.uri" )
    if [[ -n "${_uri}" ]]
    then
      fetch_uri "${_uri}" "${_target}" "$@"
      return $?
    fi
  fi
  return 1
}
