#!/bin/sh

#
# # Array Module
#
:
ext_array_initialize()
{
  if [[ -n "${ZSH_VERSION:-}" ]]
  then
    __array_start=1
  else
    __array_start=0
  fi
}
#
# ## array\_is\_nonempty()
#
# Checks to see if an array is nonempty,
# with the name given as the first parameter.
#
# ### Input Parameters
#
# The first parameter is the name of the array variable.
#
# ### Stream Outputs
#
# None.
#
# ### Return Codes
#
# 0 if the array is non-empty.
# 1 if the array is empty.
#
# ### Failure Scenarios
#
# Fails if the array name is not given as the first parameter.
#
# ### Usage Examples
#
#     user$ cat $HOME/test
#     the_array=(1 2 3 4 5)
#     if array_is_nonempty the_array
#     then
#       log "the array is not empty."
#     else
#       log "the array is empty."
#     fi
#
#     the_array=()
#     if array_is_nonempty the_array
#     then
#       log "the array is not empty."
#     else
#       log "the array is empty."
#     fi
#
#     user$ $HOME/test
#     the array is not empty.
#     the array is empty.
#
# ### Code Walkthrough

array_is_nonempty()
{
  trace_filter array
  local _array_name="${1:-}"
  shift || fail "Cannot determine if an array is nonempty;"\
    "Array name was not given."

  eval "(( \${#${_array_name}[@]} > 0 ))"
}

#
# ## array\_is\_empty()
#
# Checks to see if an array is empty, with the name given as the first parameter.
#
# ### Input Parameters
#
# The first parameter is the name of the array variable.
#
# ### Stream Outputs
#
# None.
#
# ### Return Codes
#
# 0 if the array is empty.
# 1 if the array is non-empty.
#
# ### Failure Scenarios
#
# Fails if the array name is not given as the first parameter.
#
# ### Usage Examples
#
#     user$ the_array=()
#     user$ array_is_empty the_array
#     user$ echo $?
#     0
#
#     user$ the_array=(1 2 3 4 5)
#     user$ array_is_empty the_array
#     user$ echo $?
#     1
#
# ### Code Walkthrough
array_is_empty()
{
  trace_filter array
  local _array_name="${1:-}"
  shift || fail "Cannot push onto array;"\
    "Array name was not given."
  eval "(( \${#${_array_name}[@]} == 0 ))"
}

#
# ## array\_length()
#
# Return the length of the given array.
#
# ### Input Parameters
#
# First parameter is the name of the array variable.
#
# ### Stream Outputs
#
# Prints the length of the named array to the STDOUT stream of the calling
# environment.
#
# ### Return Codes
#
# returns 0
#
# ### Failure Scenarios
#
# Fails if the array name is not given as the first parameter.
#
# ### Usage Examples
#
#     user$ the_array=(1 2 3 4 5)
#     user$ array_length the_array
#     5
#
# ### Code Walkthrough
array_length()
{
  trace_filter array
  local _array_name="${1:-}" _length
  shift || fail "Cannot determine array length;"\
    "Array name was not given."
  eval "_length=\${#${_array_name}[@]}"
  printf ${_length}
  return 0
}

#
# ## array\_last\_element()
#
# Print the last element of the given array.
#
# ### Input Parameters
#
# First parameter is the name of the array variable.
#
# ### Stream Outputs
#
# Prints the last element of the named array to the STDOUT stream of the
# calling environment.
#
# ### Failure Scenarios
#
# Fails if the array name is not given as the first parameter.
#
# ### Return Codes
#
# 0 denoting success
#
# ### Usage Examples
#
#     $ the_array=(one two three four five)
#     $ array_last_element the_array
#     five
#
# ### Code Walkthrough
array_last_element()
{
  trace_filter array
  local _array_name="${1:-}" _length _element
  shift || fail "Cannot print last element of array; Array name was not given."

  eval "_length=\${#${_array_name}[@]}"
  eval "_element=\"\${${_array_name}[${_length}]}\""

  printf "%{_element}"
}

#
# ## array\_first\_element()
#
# Print the first element of the given array.
#
# ### Input Parameters
#
# First parameter is the name of the array variable.
#
# ### Stream Outputs
#
# Prints the first element of the named array to the STDOUT stream of the
# calling environment.
#
# ### Return Codes
#
# 0 denoting success
#
# ### Failure Scenarios
#
# Fails if the array name is not given as the first parameter.
#
# ### Usage Examples
#
#     $ the_array=(one two three four five)
#     $ array_first_element the_array
#     one
#
# ### Code Walkthrough
array_first_element()
{
  trace_filter array
  local _array_name="${1:-}" _element _array_length

  shift || fail "Cannot print the first element of array;"\
    "Array name was not given."

  eval "_array_length=\"\${#${_array_name}[@]}\""
  (( _array_length )) || return 1
  eval "_element=\"\${${_array_name}[0]}\""

  printf "${_element}"
}

#
# ## array\_push()
#
# Appends one or more elements to the array with the given name.
#
# ### Input Parameters
#
#   The first parameter is the name of the array variable.
#   Remaining parameters are the elements to be appended to the array.
#
# ### Stream Outputs
#
#   None.
#
# ### Returns
#
#   0 denoting success
#
# ### Failure Scenarios
#
# Fails if the array name is not given as the first parameter.
# Fails if no elements were given (second parameter and beyond).
#
# ### Usage Examples
#
#     $ the_array=(1 2 3 4 5)
#     $ array_push the_array 6
#     $ array_join the_array # print the contents of the array, space-separated.
#     1 2 3 4 5 6
#
# ### Code Walkthrough
array_push()
{
  trace_filter array
  local _array_name="${1:-}"
  shift || fail "Cannot push elements onto array;"\
    " Array name not given."

  if eval "(( \${#${_array_name}[@]} > 0 ))"
  then
    local _element _elements=("$@")

    (( ${#_elements[@]} )) || fail "Cannot push elements onto array;"\
      " No elements were given."

    for _element in "${_elements[@]}"
    do
      eval "${_array_name}+=(\"\${_element}\")"
    done
  fi
}

#
# ## array\_append()
#
# Return the length of the given array.
#
# ### Input Parameters
#
# The first parameter is the name of the array variable.
# Remaining parameters are the elements to append to the end of the array.
#
# ### Stream Outputs
#
# None.
#
# ### Returns
#
# 0 denoting success
#
# ### Failure Scenarios
#
# Fails if the array name is not given as the first parameter.
# Fails if no elements were given to append to the array.
#
# ### Usage Examples
#
#     user$ the_array=(1)
#     user$ array_append the_array 2 3 4 5
#     user$ array_join the_array # print the contents of the array.
#     space separated.
#     1 2 3 4 5
#
# ### Code Walkthrough
array_append()
{
  trace_filter array
  local _array_name="${1:-}"
  shift || fail "Cannot append elements to array;"\
    " No array name was given."

  local _element _elements=("$@")

  (( ${#_elements[@]} )) || fail "Cannot append elements to array;"\
    " No elements were given."

  for _element in "${_elements[@]}"
  do
    eval "${_array_name}+=(\"\${_element}\")}"
  done
}

#
# ## array\_pop()
#
# Removes the last element of the array and assigns it to variable.
#
# ### Input Parameters
#
#   The first parameter is the name of the array variable.
#   The second parameter is the name of variable to assign.
#
# ### Stream Outputs
#
#   none.
#
# ### Usage Examples
#
#     user$ cat $HOME/test
#     #!/bin/sm
#
#     modules array
#
#     my_array=(1 2 3 4)
#     echo ${my_array[@]}
#     array_pop my_array my_var
#     echo :$my_var:${my_array[@]}:
#
#     user$ $HOME/test
#     1 2 3 4
#     :4:1 2 3:
#
# ### Code Walkthrough
array_pop()
{
  trace_filter array

  local _array_name="${1:-}" temp_array=() index _variable="${2:-}"

  shift || fail "Cannot pop element from array;"\
    " Array name was not given."

  eval "(( \${#${_array_name}[@]} ))" ||
    fail "Cannot pop from array; Array '${_array_name}' was empty."

  variable_is_empty _variable ||
    eval "${_variable}=\${${_array_name}[\${#${_array_name}[@]}-1]}"

  eval "unset ${_array_name}[\${#${_array_name}[@]}-1]"
  #TODO: check if this one is required:
  eval "${_array_name}=( \"\${${_array_name}[@]}\" ) "
}

#
# ## array\_shift()
#
# Removes the first element of the array, and prints it.
#
# ### Input Parameters
#
#   The first parameter is the name of the array variable.
#
# ### Stream Outputs
#
#   Prints the first element of the named array to the STDOUT stream of the
#   calling environment.
#
# ### Usage Examples
#
#     user$ cat $HOME/test
#     #!/bin/sm
#     modules ext/array
#
#     my_array=(1 2 3 4)
#     echo ${my_array[@]}
#     array_shift my_array
#     echo ${my_array[@]}
#
#     user$ $HOME/test
#     1 2 3 4
#     1
#     2 3 4
#
# ### Code Walkthrough
array_shift()
{
  trace_filter array
  local _array_name="${1:-}" temp_array=() index _variable="${2:-}"
  shift || fail "Cannot shift array; Array name was not given."

  variable_is_empty _variable || eval "${_variable}=\${${_array_name}[0]}"

  unset "${_array_name}[0]"
  eval "${_array_name}=( \"\${${_array_name}[@]}\" ) "
}

#
# ## array\_unshift()
#
#   Prepends one or more elements to the array whose name is given, in the order
#   given.
#
# ### Input Parameters Parameters
#
#   The first parameter is the name of the array variable.
#   Remaining parameters are the elements to prepend to the array.
#
# ### Stream Outputs
#
#   None.
#   Yields a failure message if no array name was given.
#   Yields a failure message if no elements were given to unshift.
#
# ### Return Codes
#
#   0 denoting success
#
# ### Usage Examples
#
#     $ the_array=(2 3 4 5)
#     $ array_unshift 1
#     user$ array_join the_array # print contents of the array, space-separated.
#     1 2 3 4 5
#
#     $ the_array=(4 5)
#     $ array_unshift 3 2 1
#     user$ array_join the_array # print contents of the array, space-separated.
#     1 2 3 4 5
#
# ### Code Walkthrough
array_unshift()
{
  trace_filter array
  local _array_name="${1:-}"
  shift || fail "Cannot unshift elements onto array;"\
    "Array name was given."

  local _elements=("$@")

  (( ${#_elements[@]} )) || fail "Cannot unshift elements into array;"\
    " No elements were given."

  eval "${_array_name}=(\"${_elements[@]}\" \"\${${_array_name}[@]}\")"
}

#
# ## array\_join()
#
# Joins the named array into a string separated by either a space or
# a given string.
#
# ### Input Parameters
#
# The first parameter is the name of the array variable.
# The second parameter is the separator between elements in the string. This is
# optional, and defaults to a space.
#
# ### Stream Outputs
#
# Prints the elements of the named array, separated by either the 2nd parameter
# (if given), or else a space character, to the STDOUT stream of the calling
# environment.
#
# ### Return Codes
#
# 0 denoting success
#
# ### Failure Scenarios
#
# Fails if the array name is not given as the first parameter.
#
# ### Usage Examples
#
#     $ the_array=(1 2 3 4 5)
#     $ array_join the_array
#     1 2 3 4 5
#
#     $ array_join the_array '.'
#     1.2.3.4.5
#
# ### Code Walkthrough
array_join()
{
  trace_filter array
  local _array_name="${1:-}"
  shift || fail "Cannot join array; Array name was not given."
  local IFS=${1:-' '}
  eval "printf \"\${${_array_name}[*]}\""
}

#
# ## array\_largest()
#
# Outputs the first string in the array with the largest length.
#
# ### Input Parameters
#
# The first element is an array variable name.
#
# ### Stream Outputs
#
# Prints the largest elements of the named array to the STDOUT
# stream of the calling environment.
#
# ### Return Codes
#
# 0 denoting success
#
# ### Failure Scenarios
#
# Fails if the array name, the first parameter, is not given.
#
# ### Usage Examples
#
#     $ the_array=(billie bob joe)
#     $ array_largest the_array
#     billie
#
# ### Code Walkthrough
array_largest()
{
  trace_filter array
  local _array_name="${1:-}" _index _largest=""
  shift || fail "Cannot find largest element;"\
    "No array variable name was given."

  eval "
  for (( _index=0 ; _index < \${#${_array_name}[@]} ; _index++ ))
  do
    if (( \${#${_array_name}[\${_index}]} > \${#_largest} ))
    then
      _largest=\${${_array_name}[\${_index}]}
    fi
  done
  "
  printf "%s" "${_largest}"
}

#
# ## array\_sort\_desc()
#
# Sorts the named array contents in descending order.
#
# ### Input Parameters
#
# An array variable name.
#
# ### Stream Outputs
#
# None.
#
# ### Return Codes
#
# 0 denoting success
#
# ### Failure Scenarios
#
# Fails if the array name, the first parameter, is not given.
#
# ### Usage Examples
#
#     user$ cat $HOME/test
#     #!/bin/sm
#     modules ext/array
#
#     arr=(c a d e f b h j i )
#     array_sort_desc arr
#     array_join arr
#     echo
#
#     user$ $HOME/test
#     j i h f e d c b a
#
# ### Code Walkthrough
array_sort_desc()
{
  trace_filter array
  local _array_name="${1:-}" _index _largest=""
  shift || fail "Cannot sort an array in decending order;"\
    "Array variable name was not given."

  eval "${_array_name}=(\$(
  echo \"\${${_array_name}[@]}\" | sed -e 's/\s/\n/g' | sort -r
  ))"
}

#
# ## array\_sort\_asc()
#
# Sorts the named array contents in ascending order.
#
# ### Input Parameters
#
# An array variable name.
#
# ### Stream Outputs
#
# None.
#
# ### Return Codes
#
# 0 denoting success
#
# ### Failure Scenarios
#
# Fails if the array name, the first parameter, is not given.
#
# ### Usage Examples
#
#     user$ cat $HOME/test
#     #!/bin/sm
#     modules ext/array
#
#     arr=(c a d e f b h j i )
#     array_sort_asc arr
#     array_join arr
#     echo
#
#     user$ $HOME/test
#     a b c d e f h i j
#
# ### Code Walkthrough
array_sort_asc()
{
  trace_filter array
  local _array_name="${1:-}" _index _largest=""

  shift || fail "Cannot sort an array in ascending order;"\
    " Array variable name was not given."

  eval "${_array_name}=(\$(
  echo \"\${${_array_name}[@]}\" | tr ' ' \"\n\" | sort
  ))"
}

#
# ## array\_unique()
#
# Sorts the named array contents in ascending order.
#
# ### Input Parameters
#
# An array variable name.
#
# ### Stream Outputs
#
# None.
#
# ### Return Codes
#
# 0 denoting success
#
# ### Failure Scenarios
#
# Fails if the array name, the first parameter, is not given.
#
# ### Usage Examples
#
#     user$ cat $HOME/test
#     #!/bin/sm
#     modules ext/array
#
#     arr=(a a a b b c c c c d d d d d d)
#     array_unique arr
#     array_join arr
#     echo
#
#     user$ $HOME/test
#     a b c d
#
# ### Code Walkthrough
array_unique()
{
  trace_filter array
  local _array_name="${1:-}" _index _largest=""
  shift ||
    fail "Cannot uniquify array; Array variable name was not given."

  eval "${_array_name}=(\$(
  echo \" \${${_array_name}[@]} \" |
  awk -v RS=' ' -v ORS=' ' '!(\$0 in a){a[\$0];print}'
  ))"
}

# ## array\_is\_even()
#
# Checks to see if an array with the name given as the first parameter
# is even.
#
# ### Input Parameters
#
# The first parameter is the name of the array variable.
#
# ### Stream Outputs
#
# None.
#
# ### Return Codes
#
# 0 if the array is non-empty.
# 1 if the array is empty.
#
# ### Failure Scenarios
#
# Fails if the array name is not given as the first parameter.
#
# ### Usage Examples
#
#     user$ cat $HOME/test
#     #!/bin/sm
#     modules ext/array
#
#     the_array=()
#     printf "($(array_join the_array))"
#     if array_is_even the_array
#     then
#       echo " has an even number of elements."
#     else
#       echo " has an odd number of elements."
#     fi
#
#     the_array=(1)
#     printf "($(array_join the_array))"
#     if array_is_even the_array
#     then
#       echo " has an even number of elements."
#     else
#       echo " has an odd number of elements."
#     fi
#
#     the_array=(1 2 3 4)
#     printf "($(array_join the_array))"
#     if array_is_even the_array
#     then
#       echo " has an even number of elements."
#     else
#       echo " has an odd number of elements."
#     fi
#
#     the_array=(1 2 3 4 5)
#     printf "($(array_join the_array))"
#     if array_is_even the_array
#     then
#       echo " has an even number of elements."
#     else
#       echo " has an odd number of elements."
#     fi
#
#     user$ "$HOME/test"
#     () has an even number of elements.
#     (1) has an odd number of elements.
#     (1 2 3 4) has an even number of elements.
#     (1 2 3 4 5) has an odd number of elements.
#
# ### Code Walkthrough
array_is_even()
{
  trace_filter array
  local _array_name="${1:-}"
  shift || fail "Cannot determine if array is even;"\
    " Array name was not given."

  eval "(( ( \${#${_array_name}[@]} % 2 ) == 0 ))"
}

