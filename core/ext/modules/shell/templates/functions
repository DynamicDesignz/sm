#!/bin/sh

detect_template()
{
  local extensions_path=$1 _module_path
  shift || fail "Cannot detect template;"\
    " No extensions path given as first parameter."

  rebuild_path "templates" $extensions_path $@
  _template_path="${rebuilded_path}"

  if [[ -f "${_template_path}.template" ]]
  then
    template_path="${_template_path}.template"
    return 0
  elif [[ -f "${_template_path}" ]]
  then
    template_path="${_template_path}"
    template_name=$(echo -n $@ | sed 's/ /\//g' )
    return 0
  else
    return 1
  fi
}

#
# ## template_exists()
#
# Checks if a named template file exists in the extension_templates_path.
#
# ### Input Parameters
#
# First parameter must be the name of a template file, eg. a string.
#
# ### Stream Outputs
#
# None.
#
# ### Return Codes
#
# 0 if the named template file exists and is nonempty.
# 1 if the named template file does not exist or is empty.
#
# ### Failure Scenarios
#
# Fails if no template name is given.
#
# ### Usage Examples
#
#     user$ {{ setup the scenario }}
#     user$ function_name {{ parameters }}
#     user$ {{ demonstrate the results}}
#
# ### Code Walkthrough
template_exists()
{
  if in_search_paths detect_template "$@" ||
    in_cli_paths detect_template "$@"
  then
    log_search "template" "$template_name" "${template_path##${sm_path}\/}"
    return 0
  else
    return 1
  fi
}

#
# ## install_template()
#
# Installs a named template to a given location.
#
# ### Input Parameters
#
# The first parameter should be the template name.
# Remaining parameters specify the target, mode and owner:
#   owner "<<user>>[:<<group>>]"
#   mode 0755
#   to "/path/to/new/file"
#
# ### Stream Outputs
#
# None.
#
# ### Return Codes
#
# 0 if successful.
# 1 otherwise.
#
# ### Failure Scenarios
#
# Fails if no template name was given.
# Fails if the template name given is a directory.
#
# ### Usage Examples
#
#     user$ install_template "nginx.conf" \
#           to "${nginx_path}/nginx.conf" \
#           mode 0644 owner "${nginx_user}"
#
# ### Code Walkthrough
install_template()
{
  # Declare function local variables, also set source mode and owner defaults
  local _template _name _target _source="${extension_templates_path}" \
    _mode=0644 _owner=$USER

  # While there are still function parameters left, store the first parameter
  # as the token and remove it from the parameter list.
  #
  # Then switch based on what the parameter contains.
  #
  # If the parameter is 'to', then the next parameter contains the target,
  # store it in the target variable and remove it from the parameters list.
  #
  # If the next parameter contains the mode, store it in the mode variable
  # and remove the mode from the parameters list.
  #
  # If the next parameter contains the owner, store it in the owner variable
  # and remove the owner from the parameters list.
  #
  # If the next parameter contains 'from', then store it in the source
  # variable and remove it from the parameters list.
  #
  # If we do not know what the token is, and
  # If a name has not yet been set, then the token must be the name.
  # Store it in the name variable. Otherwise, if the target has not yet been
  # set, then the token must be the target; store it in the target variable.
  while (( $# > 0 ))
  do
    token="${1}"
    shift
    case "${token}" in
      to)
        _target="$1"
        shift
        ;;
      mode)
        _mode="$1"
        shift
        ;;
      owner)
        _owner="$1"
        shift
        ;;
      from)
        fail 'install_template is not valid.'
        ;;
      *)
        if variable_is_empty _name
        then
          _name="$token"
        elif variable_is_empty _target
        then
          _target="$token"
        fi
        ;;
    esac
  done

  template_exists "${_name}" || fail "Cannot install template; "\
    "No template found matching '${_name}'."

  _template="${template_path}"
  _name="$(basename "${_name}")"

  ensure_paths_exist "$(dirname "${_target}")"

  if path_exists "${_target}"
  then
    ! path_exists "${_target}/${_name}" ||
      fail "Cannot install the template '${_template}' to ${_target}/${_name},"\
        " as it is a directory."

    copy_file "${_template}" to "${_target}/${_name}"

    variable_is_empty _mode  || chmod "${_mode}" "${_target}/${_name}"
    variable_is_empty _owner || chown "${_owner}" "${_target}/${_name}"
  else
    copy_file --force "${_template}" to "${_target}"

    variable_is_empty _mode  || chmod_files "${_mode}" "${_target}"
    variable_is_empty _owner || chown_files "${_owner}" "${_target}"
  fi
}

#
# ## seed_template()
#
# Seed a template file replacing all given keys with given values.
#
# ### Input Parameters
#
# First parameter must be the template filename to seed.
# Remaining parameters must come in pairs; the first of each pair specifies
# the key to search and replace in the template file, and the second is the
# value to replace {{$key}} with.
#
# ### Stream Outputs
#
# None.
#
# ### Return Codes
#
# 0 for success.
#
# ### Failure Scenarios
#
# Fails if no template filename is given.
# Fails if the template given does not exist.
# Fails if no key/value pairs are given.
# Fails if for every key there is no associated value.
# Fails if the intermediate template file does not exist...
#
# ### Usage Examples
#
#    user$ seed_template "/etc/conf.d/${extension}.conf" \
#      prefix_path "${prefix_path}" \
#      init_scripts_path "${init_scripts_path}" \
#      modules_path "${modules_path}" \
#      data_path "${data_path}" \
#      confd_path "${confd_path}" \
#      extension "${extension}"
#
# Note that if you wish to eliminate all unset strings, pass the pair
#     ".*" ""
# as the last pair of arguments to seed_template.
#
# ### Code Walkthrough
seed_template()
{
  local _template="${1:-}"
  shift || fail "Cannot seed template;"\
    " No template name was given as the first parameter."

  local _hash=("$@") _strings=() temporary=${_template}.${timestamp}.$$

  file_exists "${_template}" || fail "Cannot seed template;"\
    " template file '${_template}' does not exist."

  array_is_nonempty _hash || fail "Cannot seed template '${_template}';"\
    " No replacement keys were specified."

  array_is_even _hash || fail "Cannot seed template;"\
    " Every replacement key must have a replacement value."

  for (( index=0 ; index < ${#_hash[@]} ; index++ ))
  do
    _strings+=(-e "s#{{${_hash[${index}]}}}#${_hash[$((++index))]}#g")
  done

  sed "${_strings[@]}" ${_template} > ${temporary} ||
    error "There was an error (?) seeding the template '${_template}';" \
    " Most often this is due to filesystem permissions / disk full."

  file_exists "${temporary}" || fail "Something went very wrong;"\
    " the template intermediate file '${temporary}' does not exist?! "

  move_file "${temporary}" "${_template}"
}

update_seed_template()
{
  local _template="${1:-}" _target="${2:-}"
  shift || fail "Cannot update seed template;"\
    " Template name was not given as the first parameter."
  shift || fail "Cannot update seed template;"\
    " Template target was not given as the second parameter."

  local  _incoming="${1:-${_target}.incoming}"
  shift || true
  local _hash=("$@") _strings=() _variables="${_target}.var.$$"

  template_exists "${_template}" || fail "Cannot update seed template;"\
    " No template was found matching '${_name}'."

  _template="${template_path}"

  for (( index=0 ; index < ${#_hash[@]} ; index++ ))
  do
    _strings+=(-e "s#{{${_hash[${index}]}}}#${_hash[$((++index))]}#g")
  done

  sed "${_strings[@]}" ${_template} | grep -E '^[^#]+=' > "${_variables}"

  diff -wN --left-column \
    <( grep -Eo '(^[^#]+=)' "${_target}" 2>/dev/null | sed 's/export //' | sort ) \
    <( grep -Eo '(^[^#]+=)' "${_variables}" | sed 's/export //' | sort ) | \
    awk -F '> ' '/^>/ {print$2}' | \
    xargs -n 1 | \
    xargs -I {} grep "^[^#]*{}" "${_variables}" > "${_incoming}"

  rm "${_variables}"
}

