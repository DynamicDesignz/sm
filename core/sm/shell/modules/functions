#!/bin/sh

#
# SM Framework Core Module ~ Modules (modules)
#

modules_core_initialize()
{
  (( ! ${modules_initialized:=0} )) || return 0

  true $((modules_initialized++))

  init_extensions_search_paths #initialize search paths

  #core is loaded as BDSM starts
  modules=(
    "sm/core=core/sm/shell/core"
    "sm/string=core/sm/shell/string"
    "sm/logging=core/sm/shell/logging"
    "sm/modules=core/sm/shell/modules"
  )

  for module_def in ${modules[@]}
  do
    module_name="${module_def//=*}"
    module_path="${module_def//*=}"
    log_search preload "$module_name" "${module_path}"
  done

  for module in ${preload_modules[@]}
  do
    module_or_error ${module} "Cannot preload module: ${module}."
  done
}

init_extensions_search_paths()
{
  local _paths=() _extension_set_path

  if [[ -z "${extensions_search_paths[*]}" ]]
  then
    extensions_search_paths=()

    # Single user extensions
    if [[ "${exts_system_path}" != "${exts_user_path}" ]]
    then
      extensions_search_paths+=( "${exts_user_path}/active" )
    fi

    # Single system extensions
    extensions_search_paths+=( "${exts_system_path}/active" )

    # User extension sets
    if [[ "${sets_system_path}" != "${sets_user_path}" ]]
    then
      shopt -s nullglob
      _paths=( "${sets_user_path}"/active/* )
      shopt -u nullglob
      for _extension_set_path in "${_paths[@]}"
      do
        if [[ -d "${_extension_set_path}" ]]
        then
          extensions_search_paths+=( "${_extension_set_path}" )
        fi
      done
    fi

    # System extension sets
    shopt -s nullglob
    _paths=( "${sets_system_path}"/active/* )
    shopt -u nullglob
    for _extension_set_path in "${_paths[@]}"
    do
      if [[ -d "${_extension_set_path}" ]]
      then
        extensions_search_paths+=( "${_extension_set_path}" )
      fi
    done
  fi

  # Core is required to run, add it if not found
  string_contains "${extensions_search_paths[*]}" "${sm_path}/core" ||
    extensions_search_paths+=( "${sm_path}/core" )

  debug search "sets_user_path:${sets_user_path}:"
  debug search "exts_user_path:${exts_user_path}:"
  debug search "extensions_search_paths:${extensions_search_paths[*]}:"
  export extensions_search_paths
}

reorder_path()
{
  local part="${1:-}" extensions_path="${2:-}" extension="${3:-}"
  shift || fail "Path part must be given as the first parameter."
  shift || fail "Extensions path must be given as the second parameter."
  shift || fail "Extension name must be given as the third parameter."

  local output="$extensions_path/$extension/$part/$*"
  rebuilded_path="${output// //}"
}

rebuild_path()
{
  local part="$1" extensions_path="$2"
  shift || fail "Path part must be given as the first parameter."
  shift || fail "Extensions path must be given as the second parameter."

  local params="$*"
  reorder_path "${part}" "${extensions_path}" ${params//\// }
}

is_module()
{
  [[ -s "$1/functions" && ! -d "$1/functions" ]] || [[ -s "$1/includes" && ! -d "$1/includes" ]]
}

detect_module()
{
  local extensions_path=$1 _module_path
  shift || fail "Extensions path must be given as the first parameter."

  rebuild_path "shell" $extensions_path $@
  _module_path=${rebuilded_path}

  debug search_module_path ":${_module_path}:"

  if is_module "${_module_path}"
  then
    module_path=${_module_path}
    module_name="$*"
    module_name="${module_name// //}"
    return 0
  else
    return 1
  fi
}

#
# ## extensions\_in()
#
# Lists the extensions in a given directory.
#
# ### Input Parameters
#
# First parameter is a full path for a BDSM extensions directory.
#   (example: /sm/exts)
#
# ### Stream Outputs
#
# None.
#
# ### Environmental effects
#
# The names of the extensions in the given directory are set in found_extensions.
#
# ### Return Codes
#
# 0 for success.
#
# ### Failure Scenarios
#
# No failure scenarios currently.
#
# ### Usage Examples
#
#     $ sm call extensions_in /sm/sets/gnu
#
extensions_in()
{
  local _path="$1" _extension
  found_extensions=()

  if [[ -d "${_path}" ]]
  then
    shopt -s nullglob
    local _paths=( "${_path}"/* )
    shopt -u nullglob
    for _extension in "${_paths[@]}"
    do
      if [[ -d "${_extension}/bin" || -d "${_extension}/shell" ]]
      then
        found_extensions+=( "${_extension##${_path}\/}" )
      fi
    done
  else
    debug search "Path '${_path}' does not exist."
    return 1
  fi
}

in_search_paths()
{
  trace_filter search
  local callback="${1:-}" _path
  shift || fail "Callback name must be given ast the first parameter."

  if [[ -n "$1" ]] # do search if params given
  then
    for _path in "${extensions_search_paths[@]}"
    do
      "${callback}" "${_path}" "$@" || continue
      return 0
    done
  fi
  return 1
}

in_cli_path()
{
  trace_filter search
  local callback="${1:-}"
  shift || fail "Callback name must be given ast the first parameter."

  "${callback}" "${sm_path}/core" "cli" "$@"
}

# Examples
#
#    if module backup
#    then
#       log "module backup found; please backup your system"
#    else
#       error "could not find backup module"
#    fi
#
module()
{
  local _module="${1:-}" _file _module_dependency _module_path _hook _function
  shift || fail "No module name was given as the first parameter."

  if module_is_loaded "${_module}"
  then
    return 0 # Return if module is loaded.
  fi

  # Search for module.
  if in_search_paths detect_module "${_module}"
  then
    log_search module "$module_name" "${module_path##${sm_path}\/}"
    modules+=("${module_name}=${module_path##${sm_path}\/}")
  else
    log_search module "${_module}" "Not found !!!"
    return 1
  fi

  # store path, so dependencies do not overwrite it.
  _module_path="${module_path}"

  # Load env before dependencies, so they can use env settings.
  if [[ -s "${_module_path}/env" ]]
  then
    source "${_module_path}/env" # TODO: should we check for errors here ?!?!?!
  fi

  # Load module dependencies.
  if [[ -s "${module_path}/includes" ]]
  then
    for _module_dependency in $( cat "${_module_path}/includes" )
    do
      module_or_error "${_module_dependency}" \
        "Could not find module dependency '${_module_dependency}' from '${_module_path##${sm_path}\/}/includes'."
    done
  fi

  # Load module
  for _file in functions cli initialize
  do
    if [[ -s "${_module_path}/${_file}" ]]
    then
      #TODO: should we check for errors here ?!?!?!
      source "${_module_path}/${_file}"
    fi
  done

  _function="${_module//\//_}"
  _function="${_function/_shell/_}"

  for _hook in initialize # options, etc... ?
  do
    if command -v "${_function}_${_hook}" > /dev/null 2>&1
    then
      "${_function}_${_hook}"
    fi
  done

  return 0
}

# load module; or show error msg if module is not available.
module_or_error()
{
  module "$1" || error "$2"
}

# Examples
#
#     user$ modules array system
#
#  modules x y z
#
#  if x,y or z do not contain a '/', then prefix core/.
#  if x contains a '/', then load directly.
#
#
modules()
{
  local _module _sm _extension _path _file _modules=("$@")

  (( ${#_modules[@]} )) || fail "No modules given to load."

  for _module in "${_modules[@]}"
  do
    module "${_module}" || fail "Could not find module path for ${_module}."
  done
}

# Examples
#
#     user$ module_reinitialize package
#
modules_reinitialize()
{
  local _module _modules=("$@") _loaded_modules _module_path _initialize_path

  array_is_nonempty _modules ||
    fail "Cannot load a module; No module name was given."

  _loaded_modules=" ${modules[*]} "
  for _module in "${_modules[@]}"
  do
    _module_path="${_loaded_modules##* ${_module}=}"
    _module_path="${_module_path%% *}"
    [[ -n "${_module_path}" ]] ||
      fail "Can not reinitialize module as it was not yet loaded"

    _initialize_path="${sm_path}/${_module_path}/initialize"
    [[ ! -s "${_initialize_path}" ]] || source "${_initialize_path}"
  done
}

# Examples
#
#     user$ module_is_loaded package
#     user$ echo $?
#     1
#     user$ modules package
#     user$ module_is_loaded package
#     0
#
module_is_loaded()
{
  local _name="${1:-}"

  [[ -n "${_name:-}" ]] ||
    fail "Cannot determine if a module is loaded; No module was given."

  case " ${modules[*]} " in
    (*[[:space:]]${_name}=*)
      return 0
      ;;
    (*)
      return 1
      ;;
  esac
}

