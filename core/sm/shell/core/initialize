#!/bin/sh

shopt -s extglob # Extended globs must always be on for BDSM.

saved_sm_path="${sm_path:-"/sm"}"

# Load System BDSM Configuration, if it exists.
for file in /etc/smrc "$HOME/.smrc"
do
  if [[ -s "${file}" ]]
  then
    previous_preload_modules=( "${preload_modules[@]}" )
    source "${file}"
    preload_modules=( "${previous_preload_modules[@]}" "${preload_modules[@]}" )
  fi
done
unset previous_preload_modules

sm_path="${saved_sm_path}"

if (( UID == 0 ))
then # FHS
  true \
    "${var_path:="/var"}" \
    "${etc_path:="/etc"}" \
    "${profile_path:="/etc/profile"}" \
    "${profile_d_path:="/etc/profile.d"}"
else
  true \
    "${var_path:="${sm_path}/var"}" \
    "${etc_path:="$HOME/.etc"}" \
    "${profile_path:="$HOME/.profile"}" \
    "${profile_d_path:="$HOME/.profile.d"}"
fi

true \
  "${modules_path:="${sm_path}/core/sm/shell"}" \
  "${templates_path:="${sm_path}/templates"}" \
  "${src_path:="${sm_path}/src"}" \
  "${md5_path:="${sm_path}/md5"}" \
  "${archives_path:="${sm_path}/archives"}" \
  "${scm_path:="${sm_path}/scm"}" \
  "${sets_system_path:="${sm_path}/sets"}" \
  "${exts_system_path:="${sm_path}/exts"}" \
  "${extensions_src_path:="${src_path}/extensions"}" \
  "${tmp_path:="${sm_path}/tmp"}" \
  "${bin_path:="${sm_path}/bin"}" \
  "${repos_path:="${sm_path}/repos"}" \
  "${remote:="origin"}" \
  "${branch:="master"}" \
  "${language:="shell"}" \
  "${user:=$USER}" \
  "${user_sm_path:=$HOME/.sm}" \
  "${keep_releases:=4}" \
  "${hooks_flag:=1}" \
  "${PAGER:="less"}" \
  "${config_path:="${sm_path}/core/sm/config"}" \
  "${packages_path:="${sm_path}/pkg"}" \
  "${active_path:="${packages_path}/active"}" \
  "${extension_args:=""}"

user_shell=$(which $(ps -eo pid,comm | awk "{ if ($PPID == \$1) print \$2}") 2>/dev/null ) || true

case "${user_shell}" in
  *sh)
    true # all good!
  ;;
  *)
    user_shell=$(which $(ps -eo pid,comm | awk "{ if ($$ == \$1) print \$2}") 2>/dev/null ) || user_shell=bash
  ;;
esac

if [[ -z "${sets_user_path}" ]]
then
  if [[ -w "${sets_system_path}" ]] || (( UID == 0 ))
  then
    sets_user_path="${sets_system_path}"
  else
    sets_user_path="${user_sm_path}/sets"
  fi
fi

if [[ -z "${exts_user_path}" ]]
then
  if [[ -w "${exts_system_path}" ]] || (( UID == 0 ))
  then
    exts_user_path="${exts_system_path}"
  else
    exts_user_path="${user_sm_path}/exts"
  fi
fi

# Make sure preload_modules is an array.
export preload_modules=( ${preload_modules[@]} )

if [[ -d "${active_path}/bin" ]]
then
  export PATH="${active_path}/bin:${active_path}/sbin:${PATH}"
fi

export sm_path modules_path initial_pwd extension_action_calls=0

# Load module() function, then load core modules.
source "${modules_path}/core/functions"
source "${modules_path}/string/functions"
source "${modules_path}/logging/functions"
source "${modules_path}/logging/initialize"
source "${modules_path}/modules/functions"

modules_core_initialize

modules sm/verfs # Used for pkg, extensions and modules.

[[ "$OSTYPE" != *solaris* ]] || # custom compilations + g*
  export PATH="/bin:/opt/local/bin:/usr/sfw/bin:/usr/sbin:/usr/bin:${PATH}"

# Ensure that any variables you wish export to extensions actually *are* exported.
sm_exports

if [[ -n $sm_script ]]
then
  if [[ "$sm_script" == "/" ]] # Leave this until we can properly detect source vs shebang
  then # Sourcing needed for loading from bash 3, for now, set sm_script='/'
    true # Skip any actions, stop with the framework simply loaded.
  else
    action_source $sm_script "${extension_args[@]}" # load script
  fi
elif [[ -n "${call_action}" ]]
then
  if ! declare -F "${call_action}" >/dev/null
  then
    error "${call_action} is not a valid function name"
  else
    action_call "${call_action}" "${extension_args[@]}"
  fi
elif set | grep '^extension_args=(' >/dev/null
then
  case "${extension_args[*]}" in
    *,*)
      ${sm_path}/bin/smp ${extension_args[@]}
      ;;
    *)
      modules ext/extensions/detection ext/extensions/execution
      extension_action
      detect_action_type
      extension_run
  esac
fi

